"use strict";const lt=require("obsidian");function ls(t,e){const n=Object.create(null),r=t.split(",");for(let i=0;i<r.length;i++)n[r[i]]=!0;return e?i=>!!n[i.toLowerCase()]:i=>!!n[i]}const It={},Ie=[],Qt=()=>{},hi=()=>!1,pi=/^on[^a-z]/,Sn=t=>pi.test(t),cs=t=>t.startsWith("onUpdate:"),Lt=Object.assign,us=(t,e)=>{const n=t.indexOf(e);n>-1&&t.splice(n,1)},mi=Object.prototype.hasOwnProperty,yt=(t,e)=>mi.call(t,e),ht=Array.isArray,Ee=t=>tn(t)==="[object Map]",An=t=>tn(t)==="[object Set]",zs=t=>tn(t)==="[object Date]",gt=t=>typeof t=="function",Bt=t=>typeof t=="string",Ve=t=>typeof t=="symbol",St=t=>t!==null&&typeof t=="object",ds=t=>St(t)&&gt(t.then)&&gt(t.catch),dr=Object.prototype.toString,tn=t=>dr.call(t),gi=t=>tn(t).slice(8,-1),fr=t=>tn(t)==="[object Object]",fs=t=>Bt(t)&&t!=="NaN"&&t[0]!=="-"&&""+parseInt(t,10)===t,pn=ls(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),Pn=t=>{const e=Object.create(null);return n=>e[n]||(e[n]=t(n))},vi=/-(\w)/g,Oe=Pn(t=>t.replace(vi,(e,n)=>n?n.toUpperCase():"")),wi=/\B([A-Z])/g,$e=Pn(t=>t.replace(wi,"-$1").toLowerCase()),hr=Pn(t=>t.charAt(0).toUpperCase()+t.slice(1)),Nn=Pn(t=>t?`on${hr(t)}`:""),qe=(t,e)=>!Object.is(t,e),mn=(t,e)=>{for(let n=0;n<t.length;n++)t[n](e)},bn=(t,e,n)=>{Object.defineProperty(t,e,{configurable:!0,enumerable:!1,value:n})},pr=t=>{const e=parseFloat(t);return isNaN(e)?t:e},_i=t=>{const e=Bt(t)?Number(t):NaN;return isNaN(e)?t:e};let Bs;const Vn=()=>Bs||(Bs=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});function en(t){if(ht(t)){const e={};for(let n=0;n<t.length;n++){const r=t[n],i=Bt(r)?ki(r):en(r);if(i)for(const s in i)e[s]=i[s]}return e}else{if(Bt(t))return t;if(St(t))return t}}const bi=/;(?![^(]*\))/g,yi=/:([^]+)/,xi=/\/\*[^]*?\*\//g;function ki(t){const e={};return t.replace(xi,"").split(bi).forEach(n=>{if(n){const r=n.split(yi);r.length>1&&(e[r[0].trim()]=r[1].trim())}}),e}function Pt(t){let e="";if(Bt(t))e=t;else if(ht(t))for(let n=0;n<t.length;n++){const r=Pt(t[n]);r&&(e+=r+" ")}else if(St(t))for(const n in t)t[n]&&(e+=n+" ");return e.trim()}const Ci="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",Ti=ls(Ci);function mr(t){return!!t||t===""}function Ii(t,e){if(t.length!==e.length)return!1;let n=!0;for(let r=0;n&&r<t.length;r++)n=On(t[r],e[r]);return n}function On(t,e){if(t===e)return!0;let n=zs(t),r=zs(e);if(n||r)return n&&r?t.getTime()===e.getTime():!1;if(n=Ve(t),r=Ve(e),n||r)return t===e;if(n=ht(t),r=ht(e),n||r)return n&&r?Ii(t,e):!1;if(n=St(t),r=St(e),n||r){if(!n||!r)return!1;const i=Object.keys(t).length,s=Object.keys(e).length;if(i!==s)return!1;for(const o in t){const a=t.hasOwnProperty(o),c=e.hasOwnProperty(o);if(a&&!c||!a&&c||!On(t[o],e[o]))return!1}}return String(t)===String(e)}function Ei(t,e){return t.findIndex(n=>On(n,e))}const Tt=t=>Bt(t)?t:t==null?"":ht(t)||St(t)&&(t.toString===dr||!gt(t.toString))?JSON.stringify(t,gr,2):String(t),gr=(t,e)=>e&&e.__v_isRef?gr(t,e.value):Ee(e)?{[`Map(${e.size})`]:[...e.entries()].reduce((n,[r,i])=>(n[`${r} =>`]=i,n),{})}:An(e)?{[`Set(${e.size})`]:[...e.values()]}:St(e)&&!ht(e)&&!fr(e)?String(e):e;let Yt;class Si{constructor(e=!1){this.detached=e,this._active=!0,this.effects=[],this.cleanups=[],this.parent=Yt,!e&&Yt&&(this.index=(Yt.scopes||(Yt.scopes=[])).push(this)-1)}get active(){return this._active}run(e){if(this._active){const n=Yt;try{return Yt=this,e()}finally{Yt=n}}}on(){Yt=this}off(){Yt=this.parent}stop(e){if(this._active){let n,r;for(n=0,r=this.effects.length;n<r;n++)this.effects[n].stop();for(n=0,r=this.cleanups.length;n<r;n++)this.cleanups[n]();if(this.scopes)for(n=0,r=this.scopes.length;n<r;n++)this.scopes[n].stop(!0);if(!this.detached&&this.parent&&!e){const i=this.parent.scopes.pop();i&&i!==this&&(this.parent.scopes[this.index]=i,i.index=this.index)}this.parent=void 0,this._active=!1}}}function Ai(t,e=Yt){e&&e.active&&e.effects.push(t)}function Pi(){return Yt}const hs=t=>{const e=new Set(t);return e.w=0,e.n=0,e},vr=t=>(t.w&pe)>0,wr=t=>(t.n&pe)>0,Oi=({deps:t})=>{if(t.length)for(let e=0;e<t.length;e++)t[e].w|=pe},zi=t=>{const{deps:e}=t;if(e.length){let n=0;for(let r=0;r<e.length;r++){const i=e[r];vr(i)&&!wr(i)?i.delete(t):e[n++]=i,i.w&=~pe,i.n&=~pe}e.length=n}},qn=new WeakMap;let Ne=0,pe=1;const Jn=30;let Xt;const xe=Symbol(""),Yn=Symbol("");class ps{constructor(e,n=null,r){this.fn=e,this.scheduler=n,this.active=!0,this.deps=[],this.parent=void 0,Ai(this,r)}run(){if(!this.active)return this.fn();let e=Xt,n=de;for(;e;){if(e===this)return;e=e.parent}try{return this.parent=Xt,Xt=this,de=!0,pe=1<<++Ne,Ne<=Jn?Oi(this):Ds(this),this.fn()}finally{Ne<=Jn&&zi(this),pe=1<<--Ne,Xt=this.parent,de=n,this.parent=void 0,this.deferStop&&this.stop()}}stop(){Xt===this?this.deferStop=!0:this.active&&(Ds(this),this.onStop&&this.onStop(),this.active=!1)}}function Ds(t){const{deps:e}=t;if(e.length){for(let n=0;n<e.length;n++)e[n].delete(t);e.length=0}}let de=!0;const _r=[];function Le(){_r.push(de),de=!1}function Ue(){const t=_r.pop();de=t===void 0?!0:t}function Zt(t,e,n){if(de&&Xt){let r=qn.get(t);r||qn.set(t,r=new Map);let i=r.get(n);i||r.set(n,i=hs()),br(i)}}function br(t,e){let n=!1;Ne<=Jn?wr(t)||(t.n|=pe,n=!vr(t)):n=!t.has(Xt),n&&(t.add(Xt),Xt.deps.push(t))}function re(t,e,n,r,i,s){const o=qn.get(t);if(!o)return;let a=[];if(e==="clear")a=[...o.values()];else if(n==="length"&&ht(t)){const c=Number(r);o.forEach((f,b)=>{(b==="length"||b>=c)&&a.push(f)})}else switch(n!==void 0&&a.push(o.get(n)),e){case"add":ht(t)?fs(n)&&a.push(o.get("length")):(a.push(o.get(xe)),Ee(t)&&a.push(o.get(Yn)));break;case"delete":ht(t)||(a.push(o.get(xe)),Ee(t)&&a.push(o.get(Yn)));break;case"set":Ee(t)&&a.push(o.get(xe));break}if(a.length===1)a[0]&&Gn(a[0]);else{const c=[];for(const f of a)f&&c.push(...f);Gn(hs(c))}}function Gn(t,e){const n=ht(t)?t:[...t];for(const r of n)r.computed&&$s(r);for(const r of n)r.computed||$s(r)}function $s(t,e){(t!==Xt||t.allowRecurse)&&(t.scheduler?t.scheduler():t.run())}const Bi=ls("__proto__,__v_isRef,__isVue"),yr=new Set(Object.getOwnPropertyNames(Symbol).filter(t=>t!=="arguments"&&t!=="caller").map(t=>Symbol[t]).filter(Ve)),Di=ms(),$i=ms(!1,!0),Li=ms(!0),Ls=Ui();function Ui(){const t={};return["includes","indexOf","lastIndexOf"].forEach(e=>{t[e]=function(...n){const r=xt(this);for(let s=0,o=this.length;s<o;s++)Zt(r,"get",s+"");const i=r[e](...n);return i===-1||i===!1?r[e](...n.map(xt)):i}}),["push","pop","shift","unshift","splice"].forEach(e=>{t[e]=function(...n){Le();const r=xt(this)[e].apply(this,n);return Ue(),r}}),t}function Mi(t){const e=xt(this);return Zt(e,"has",t),e.hasOwnProperty(t)}function ms(t=!1,e=!1){return function(r,i,s){if(i==="__v_isReactive")return!t;if(i==="__v_isReadonly")return t;if(i==="__v_isShallow")return e;if(i==="__v_raw"&&s===(t?e?to:Ir:e?Tr:Cr).get(r))return r;const o=ht(r);if(!t){if(o&&yt(Ls,i))return Reflect.get(Ls,i,s);if(i==="hasOwnProperty")return Mi}const a=Reflect.get(r,i,s);return(Ve(i)?yr.has(i):Bi(i))||(t||Zt(r,"get",i),e)?a:Nt(a)?o&&fs(i)?a:a.value:St(a)?t?Er(a):ws(a):a}}const Ri=xr(),Fi=xr(!0);function xr(t=!1){return function(n,r,i,s){let o=n[r];if(ze(o)&&Nt(o)&&!Nt(i))return!1;if(!t&&(!yn(i)&&!ze(i)&&(o=xt(o),i=xt(i)),!ht(n)&&Nt(o)&&!Nt(i)))return o.value=i,!0;const a=ht(n)&&fs(r)?Number(r)<n.length:yt(n,r),c=Reflect.set(n,r,i,s);return n===xt(s)&&(a?qe(i,o)&&re(n,"set",r,i):re(n,"add",r,i)),c}}function ji(t,e){const n=yt(t,e);t[e];const r=Reflect.deleteProperty(t,e);return r&&n&&re(t,"delete",e,void 0),r}function Ni(t,e){const n=Reflect.has(t,e);return(!Ve(e)||!yr.has(e))&&Zt(t,"has",e),n}function Hi(t){return Zt(t,"iterate",ht(t)?"length":xe),Reflect.ownKeys(t)}const kr={get:Di,set:Ri,deleteProperty:ji,has:Ni,ownKeys:Hi},Wi={get:Li,set(t,e){return!0},deleteProperty(t,e){return!0}},Zi=Lt({},kr,{get:$i,set:Fi}),gs=t=>t,zn=t=>Reflect.getPrototypeOf(t);function on(t,e,n=!1,r=!1){t=t.__v_raw;const i=xt(t),s=xt(e);n||(e!==s&&Zt(i,"get",e),Zt(i,"get",s));const{has:o}=zn(i),a=r?gs:n?bs:Je;if(o.call(i,e))return a(t.get(e));if(o.call(i,s))return a(t.get(s));t!==i&&t.get(e)}function an(t,e=!1){const n=this.__v_raw,r=xt(n),i=xt(t);return e||(t!==i&&Zt(r,"has",t),Zt(r,"has",i)),t===i?n.has(t):n.has(t)||n.has(i)}function ln(t,e=!1){return t=t.__v_raw,!e&&Zt(xt(t),"iterate",xe),Reflect.get(t,"size",t)}function Us(t){t=xt(t);const e=xt(this);return zn(e).has.call(e,t)||(e.add(t),re(e,"add",t,t)),this}function Ms(t,e){e=xt(e);const n=xt(this),{has:r,get:i}=zn(n);let s=r.call(n,t);s||(t=xt(t),s=r.call(n,t));const o=i.call(n,t);return n.set(t,e),s?qe(e,o)&&re(n,"set",t,e):re(n,"add",t,e),this}function Rs(t){const e=xt(this),{has:n,get:r}=zn(e);let i=n.call(e,t);i||(t=xt(t),i=n.call(e,t)),r&&r.call(e,t);const s=e.delete(t);return i&&re(e,"delete",t,void 0),s}function Fs(){const t=xt(this),e=t.size!==0,n=t.clear();return e&&re(t,"clear",void 0,void 0),n}function cn(t,e){return function(r,i){const s=this,o=s.__v_raw,a=xt(o),c=e?gs:t?bs:Je;return!t&&Zt(a,"iterate",xe),o.forEach((f,b)=>r.call(i,c(f),c(b),s))}}function un(t,e,n){return function(...r){const i=this.__v_raw,s=xt(i),o=Ee(s),a=t==="entries"||t===Symbol.iterator&&o,c=t==="keys"&&o,f=i[t](...r),b=n?gs:e?bs:Je;return!e&&Zt(s,"iterate",c?Yn:xe),{next(){const{value:g,done:v}=f.next();return v?{value:g,done:v}:{value:a?[b(g[0]),b(g[1])]:b(g),done:v}},[Symbol.iterator](){return this}}}}function ae(t){return function(...e){return t==="delete"?!1:this}}function Ki(){const t={get(s){return on(this,s)},get size(){return ln(this)},has:an,add:Us,set:Ms,delete:Rs,clear:Fs,forEach:cn(!1,!1)},e={get(s){return on(this,s,!1,!0)},get size(){return ln(this)},has:an,add:Us,set:Ms,delete:Rs,clear:Fs,forEach:cn(!1,!0)},n={get(s){return on(this,s,!0)},get size(){return ln(this,!0)},has(s){return an.call(this,s,!0)},add:ae("add"),set:ae("set"),delete:ae("delete"),clear:ae("clear"),forEach:cn(!0,!1)},r={get(s){return on(this,s,!0,!0)},get size(){return ln(this,!0)},has(s){return an.call(this,s,!0)},add:ae("add"),set:ae("set"),delete:ae("delete"),clear:ae("clear"),forEach:cn(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(s=>{t[s]=un(s,!1,!1),n[s]=un(s,!0,!1),e[s]=un(s,!1,!0),r[s]=un(s,!0,!0)}),[t,n,e,r]}const[Vi,qi,Ji,Yi]=Ki();function vs(t,e){const n=e?t?Yi:Ji:t?qi:Vi;return(r,i,s)=>i==="__v_isReactive"?!t:i==="__v_isReadonly"?t:i==="__v_raw"?r:Reflect.get(yt(n,i)&&i in r?n:r,i,s)}const Gi={get:vs(!1,!1)},Xi={get:vs(!1,!0)},Qi={get:vs(!0,!1)},Cr=new WeakMap,Tr=new WeakMap,Ir=new WeakMap,to=new WeakMap;function eo(t){switch(t){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function no(t){return t.__v_skip||!Object.isExtensible(t)?0:eo(gi(t))}function ws(t){return ze(t)?t:_s(t,!1,kr,Gi,Cr)}function so(t){return _s(t,!1,Zi,Xi,Tr)}function Er(t){return _s(t,!0,Wi,Qi,Ir)}function _s(t,e,n,r,i){if(!St(t)||t.__v_raw&&!(e&&t.__v_isReactive))return t;const s=i.get(t);if(s)return s;const o=no(t);if(o===0)return t;const a=new Proxy(t,o===2?r:n);return i.set(t,a),a}function Se(t){return ze(t)?Se(t.__v_raw):!!(t&&t.__v_isReactive)}function ze(t){return!!(t&&t.__v_isReadonly)}function yn(t){return!!(t&&t.__v_isShallow)}function Sr(t){return Se(t)||ze(t)}function xt(t){const e=t&&t.__v_raw;return e?xt(e):t}function Ar(t){return bn(t,"__v_skip",!0),t}const Je=t=>St(t)?ws(t):t,bs=t=>St(t)?Er(t):t;function Pr(t){de&&Xt&&(t=xt(t),br(t.dep||(t.dep=hs())))}function Or(t,e){t=xt(t);const n=t.dep;n&&Gn(n)}function Nt(t){return!!(t&&t.__v_isRef===!0)}function dt(t){return ro(t,!1)}function ro(t,e){return Nt(t)?t:new io(t,e)}class io{constructor(e,n){this.__v_isShallow=n,this.dep=void 0,this.__v_isRef=!0,this._rawValue=n?e:xt(e),this._value=n?e:Je(e)}get value(){return Pr(this),this._value}set value(e){const n=this.__v_isShallow||yn(e)||ze(e);e=n?e:xt(e),qe(e,this._rawValue)&&(this._rawValue=e,this._value=n?e:Je(e),Or(this))}}function Mt(t){return Nt(t)?t.value:t}const oo={get:(t,e,n)=>Mt(Reflect.get(t,e,n)),set:(t,e,n,r)=>{const i=t[e];return Nt(i)&&!Nt(n)?(i.value=n,!0):Reflect.set(t,e,n,r)}};function zr(t){return Se(t)?t:new Proxy(t,oo)}class ao{constructor(e,n,r,i){this._setter=n,this.dep=void 0,this.__v_isRef=!0,this.__v_isReadonly=!1,this._dirty=!0,this.effect=new ps(e,()=>{this._dirty||(this._dirty=!0,Or(this))}),this.effect.computed=this,this.effect.active=this._cacheable=!i,this.__v_isReadonly=r}get value(){const e=xt(this);return Pr(e),(e._dirty||!e._cacheable)&&(e._dirty=!1,e._value=e.effect.run()),e._value}set value(e){this._setter(e)}}function lo(t,e,n=!1){let r,i;const s=gt(t);return s?(r=t,i=Qt):(r=t.get,i=t.set),new ao(r,i,s||!i,n)}function fe(t,e,n,r){let i;try{i=r?t(...r):t()}catch(s){nn(s,e,n)}return i}function te(t,e,n,r){if(gt(t)){const s=fe(t,e,n,r);return s&&ds(s)&&s.catch(o=>{nn(o,e,n)}),s}const i=[];for(let s=0;s<t.length;s++)i.push(te(t[s],e,n,r));return i}function nn(t,e,n,r=!0){const i=e?e.vnode:null;if(e){let s=e.parent;const o=e.proxy,a=n;for(;s;){const f=s.ec;if(f){for(let b=0;b<f.length;b++)if(f[b](t,o,a)===!1)return}s=s.parent}const c=e.appContext.config.errorHandler;if(c){fe(c,null,10,[t,o,a]);return}}co(t,n,i,r)}function co(t,e,n,r=!0){console.error(t)}let Ye=!1,Xn=!1;const jt=[];let ne=0;const Ae=[];let se=null,_e=0;const Br=Promise.resolve();let ys=null;function uo(t){const e=ys||Br;return t?e.then(this?t.bind(this):t):e}function fo(t){let e=ne+1,n=jt.length;for(;e<n;){const r=e+n>>>1;Ge(jt[r])<t?e=r+1:n=r}return e}function xs(t){(!jt.length||!jt.includes(t,Ye&&t.allowRecurse?ne+1:ne))&&(t.id==null?jt.push(t):jt.splice(fo(t.id),0,t),Dr())}function Dr(){!Ye&&!Xn&&(Xn=!0,ys=Br.then(Ur))}function ho(t){const e=jt.indexOf(t);e>ne&&jt.splice(e,1)}function $r(t){ht(t)?Ae.push(...t):(!se||!se.includes(t,t.allowRecurse?_e+1:_e))&&Ae.push(t),Dr()}function js(t,e=Ye?ne+1:0){for(;e<jt.length;e++){const n=jt[e];n&&n.pre&&(jt.splice(e,1),e--,n())}}function Lr(t){if(Ae.length){const e=[...new Set(Ae)];if(Ae.length=0,se){se.push(...e);return}for(se=e,se.sort((n,r)=>Ge(n)-Ge(r)),_e=0;_e<se.length;_e++)se[_e]();se=null,_e=0}}const Ge=t=>t.id==null?1/0:t.id,po=(t,e)=>{const n=Ge(t)-Ge(e);if(n===0){if(t.pre&&!e.pre)return-1;if(e.pre&&!t.pre)return 1}return n};function Ur(t){Xn=!1,Ye=!0,jt.sort(po);const e=Qt;try{for(ne=0;ne<jt.length;ne++){const n=jt[ne];n&&n.active!==!1&&fe(n,null,14)}}finally{ne=0,jt.length=0,Lr(),Ye=!1,ys=null,(jt.length||Ae.length)&&Ur()}}function mo(t,e,...n){if(t.isUnmounted)return;const r=t.vnode.props||It;let i=n;const s=e.startsWith("update:"),o=s&&e.slice(7);if(o&&o in r){const b=`${o==="modelValue"?"model":o}Modifiers`,{number:g,trim:v}=r[b]||It;v&&(i=n.map(u=>Bt(u)?u.trim():u)),g&&(i=n.map(pr))}let a,c=r[a=Nn(e)]||r[a=Nn(Oe(e))];!c&&s&&(c=r[a=Nn($e(e))]),c&&te(c,t,6,i);const f=r[a+"Once"];if(f){if(!t.emitted)t.emitted={};else if(t.emitted[a])return;t.emitted[a]=!0,te(f,t,6,i)}}function Mr(t,e,n=!1){const r=e.emitsCache,i=r.get(t);if(i!==void 0)return i;const s=t.emits;let o={},a=!1;if(!gt(t)){const c=f=>{const b=Mr(f,e,!0);b&&(a=!0,Lt(o,b))};!n&&e.mixins.length&&e.mixins.forEach(c),t.extends&&c(t.extends),t.mixins&&t.mixins.forEach(c)}return!s&&!a?(St(t)&&r.set(t,null),null):(ht(s)?s.forEach(c=>o[c]=null):Lt(o,s),St(t)&&r.set(t,o),o)}function Bn(t,e){return!t||!Sn(e)?!1:(e=e.slice(2).replace(/Once$/,""),yt(t,e[0].toLowerCase()+e.slice(1))||yt(t,$e(e))||yt(t,e))}let qt=null,Dn=null;function xn(t){const e=qt;return qt=t,Dn=t&&t.type.__scopeId||null,e}function Rr(t){Dn=t}function Fr(){Dn=null}function Qn(t,e=qt,n){if(!e||t._n)return t;const r=(...i)=>{r._d&&Xs(-1);const s=xn(e);let o;try{o=t(...i)}finally{xn(s),r._d&&Xs(1)}return o};return r._n=!0,r._c=!0,r._d=!0,r}function Hn(t){const{type:e,vnode:n,proxy:r,withProxy:i,props:s,propsOptions:[o],slots:a,attrs:c,emit:f,render:b,renderCache:g,data:v,setupState:u,ctx:x,inheritAttrs:h}=t;let m,w;const C=xn(t);try{if(n.shapeFlag&4){const I=i||r;m=Gt(b.call(I,I,g,s,u,v,x)),w=c}else{const I=e;m=Gt(I.length>1?I(s,{attrs:c,slots:a,emit:f}):I(s,null)),w=e.props?c:vo(c)}}catch(I){Ke.length=0,nn(I,t,1),m=$t(ie)}let A=m;if(w&&h!==!1){const I=Object.keys(w),{shapeFlag:z}=A;I.length&&z&7&&(o&&I.some(cs)&&(w=wo(w,o)),A=De(A,w))}return n.dirs&&(A=De(A),A.dirs=A.dirs?A.dirs.concat(n.dirs):n.dirs),n.transition&&(A.transition=n.transition),m=A,xn(C),m}function go(t){let e;for(let n=0;n<t.length;n++){const r=t[n];if(ei(r)){if(r.type!==ie||r.children==="v-if"){if(e)return;e=r}}else return}return e}const vo=t=>{let e;for(const n in t)(n==="class"||n==="style"||Sn(n))&&((e||(e={}))[n]=t[n]);return e},wo=(t,e)=>{const n={};for(const r in t)(!cs(r)||!(r.slice(9)in e))&&(n[r]=t[r]);return n};function _o(t,e,n){const{props:r,children:i,component:s}=t,{props:o,children:a,patchFlag:c}=e,f=s.emitsOptions;if(e.dirs||e.transition)return!0;if(n&&c>=0){if(c&1024)return!0;if(c&16)return r?Ns(r,o,f):!!o;if(c&8){const b=e.dynamicProps;for(let g=0;g<b.length;g++){const v=b[g];if(o[v]!==r[v]&&!Bn(f,v))return!0}}}else return(i||a)&&(!a||!a.$stable)?!0:r===o?!1:r?o?Ns(r,o,f):!0:!!o;return!1}function Ns(t,e,n){const r=Object.keys(e);if(r.length!==Object.keys(t).length)return!0;for(let i=0;i<r.length;i++){const s=r[i];if(e[s]!==t[s]&&!Bn(n,s))return!0}return!1}function ks({vnode:t,parent:e},n){for(;e&&e.subTree===t;)(t=e.vnode).el=n,e=e.parent}const bo=t=>t.__isSuspense,yo={name:"Suspense",__isSuspense:!0,process(t,e,n,r,i,s,o,a,c,f){t==null?ko(e,n,r,i,s,o,a,c,f):Co(t,e,n,r,i,o,a,c,f)},hydrate:To,create:Cs,normalize:Io},xo=yo;function Xe(t,e){const n=t.props&&t.props[e];gt(n)&&n()}function ko(t,e,n,r,i,s,o,a,c){const{p:f,o:{createElement:b}}=c,g=b("div"),v=t.suspense=Cs(t,i,r,e,g,n,s,o,a,c);f(null,v.pendingBranch=t.ssContent,g,null,r,v,s,o),v.deps>0?(Xe(t,"onPending"),Xe(t,"onFallback"),f(null,t.ssFallback,e,n,r,null,s,o),Pe(v,t.ssFallback)):v.resolve(!1,!0)}function Co(t,e,n,r,i,s,o,a,{p:c,um:f,o:{createElement:b}}){const g=e.suspense=t.suspense;g.vnode=e,e.el=t.el;const v=e.ssContent,u=e.ssFallback,{activeBranch:x,pendingBranch:h,isInFallback:m,isHydrating:w}=g;if(h)g.pendingBranch=v,ce(v,h)?(c(h,v,g.hiddenContainer,null,i,g,s,o,a),g.deps<=0?g.resolve():m&&(c(x,u,n,r,i,null,s,o,a),Pe(g,u))):(g.pendingId++,w?(g.isHydrating=!1,g.activeBranch=h):f(h,i,g),g.deps=0,g.effects.length=0,g.hiddenContainer=b("div"),m?(c(null,v,g.hiddenContainer,null,i,g,s,o,a),g.deps<=0?g.resolve():(c(x,u,n,r,i,null,s,o,a),Pe(g,u))):x&&ce(v,x)?(c(x,v,n,r,i,g,s,o,a),g.resolve(!0)):(c(null,v,g.hiddenContainer,null,i,g,s,o,a),g.deps<=0&&g.resolve()));else if(x&&ce(v,x))c(x,v,n,r,i,g,s,o,a),Pe(g,v);else if(Xe(e,"onPending"),g.pendingBranch=v,g.pendingId++,c(null,v,g.hiddenContainer,null,i,g,s,o,a),g.deps<=0)g.resolve();else{const{timeout:C,pendingId:A}=g;C>0?setTimeout(()=>{g.pendingId===A&&g.fallback(u)},C):C===0&&g.fallback(u)}}function Cs(t,e,n,r,i,s,o,a,c,f,b=!1){const{p:g,m:v,um:u,n:x,o:{parentNode:h,remove:m}}=f;let w;const C=So(t);C&&e?.pendingBranch&&(w=e.pendingId,e.deps++);const A=t.props?_i(t.props.timeout):void 0,I={vnode:t,parent:e,parentComponent:n,isSVG:o,container:r,hiddenContainer:i,anchor:s,deps:0,pendingId:0,timeout:typeof A=="number"?A:-1,activeBranch:null,pendingBranch:null,isInFallback:!0,isHydrating:b,isUnmounted:!1,effects:[],resolve(z=!1,K=!1){const{vnode:j,activeBranch:V,pendingBranch:F,pendingId:G,effects:st,parentComponent:S,container:W}=I;if(I.isHydrating)I.isHydrating=!1;else if(!z){const at=V&&F.transition&&F.transition.mode==="out-in";at&&(V.transition.afterLeave=()=>{G===I.pendingId&&v(F,W,H,0)});let{anchor:H}=I;V&&(H=x(V),u(V,S,I,!0)),at||v(F,W,H,0)}Pe(I,F),I.pendingBranch=null,I.isInFallback=!1;let d=I.parent,q=!1;for(;d;){if(d.pendingBranch){d.effects.push(...st),q=!0;break}d=d.parent}q||$r(st),I.effects=[],C&&e&&e.pendingBranch&&w===e.pendingId&&(e.deps--,e.deps===0&&!K&&e.resolve()),Xe(j,"onResolve")},fallback(z){if(!I.pendingBranch)return;const{vnode:K,activeBranch:j,parentComponent:V,container:F,isSVG:G}=I;Xe(K,"onFallback");const st=x(j),S=()=>{I.isInFallback&&(g(null,z,F,st,V,null,G,a,c),Pe(I,z))},W=z.transition&&z.transition.mode==="out-in";W&&(j.transition.afterLeave=S),I.isInFallback=!0,u(j,V,null,!0),W||S()},move(z,K,j){I.activeBranch&&v(I.activeBranch,z,K,j),I.container=z},next(){return I.activeBranch&&x(I.activeBranch)},registerDep(z,K){const j=!!I.pendingBranch;j&&I.deps++;const V=z.vnode.el;z.asyncDep.catch(F=>{nn(F,z,0)}).then(F=>{if(z.isUnmounted||I.isUnmounted||I.pendingId!==z.suspenseId)return;z.asyncResolved=!0;const{vnode:G}=z;is(z,F,!1),V&&(G.el=V);const st=!V&&z.subTree.el;K(z,G,h(V||z.subTree.el),V?null:x(z.subTree),I,o,c),st&&m(st),ks(z,G.el),j&&--I.deps===0&&I.resolve()})},unmount(z,K){I.isUnmounted=!0,I.activeBranch&&u(I.activeBranch,n,z,K),I.pendingBranch&&u(I.pendingBranch,n,z,K)}};return I}function To(t,e,n,r,i,s,o,a,c){const f=e.suspense=Cs(e,r,n,t.parentNode,document.createElement("div"),null,i,s,o,a,!0),b=c(t,f.pendingBranch=e.ssContent,n,f,s,o);return f.deps===0&&f.resolve(!1,!0),b}function Io(t){const{shapeFlag:e,children:n}=t,r=e&32;t.ssContent=Hs(r?n.default:n),t.ssFallback=r?Hs(n.fallback):$t(ie)}function Hs(t){let e;if(gt(t)){const n=Be&&t._c;n&&(t._d=!1,pt()),t=t(),n&&(t._d=!0,e=Jt,Qr())}return ht(t)&&(t=go(t)),t=Gt(t),e&&!t.dynamicChildren&&(t.dynamicChildren=e.filter(n=>n!==t)),t}function Eo(t,e){e&&e.pendingBranch?ht(t)?e.effects.push(...t):e.effects.push(t):$r(t)}function Pe(t,e){t.activeBranch=e;const{vnode:n,parentComponent:r}=t,i=n.el=e.el;r&&r.subTree===n&&(r.vnode.el=i,ks(r,i))}function So(t){var e;return((e=t.props)==null?void 0:e.suspensible)!=null&&t.props.suspensible!==!1}const dn={};function We(t,e,n){return jr(t,e,n)}function jr(t,e,{immediate:n,deep:r,flush:i,onTrack:s,onTrigger:o}=It){var a;const c=Pi()===((a=Rt)==null?void 0:a.scope)?Rt:null;let f,b=!1,g=!1;if(Nt(t)?(f=()=>t.value,b=yn(t)):Se(t)?(f=()=>t,r=!0):ht(t)?(g=!0,b=t.some(I=>Se(I)||yn(I)),f=()=>t.map(I=>{if(Nt(I))return I.value;if(Se(I))return ye(I);if(gt(I))return fe(I,c,2)})):gt(t)?e?f=()=>fe(t,c,2):f=()=>{if(!(c&&c.isUnmounted))return v&&v(),te(t,c,3,[u])}:f=Qt,e&&r){const I=f;f=()=>ye(I())}let v,u=I=>{v=C.onStop=()=>{fe(I,c,4)}},x;if(Qe)if(u=Qt,e?n&&te(e,c,3,[f(),g?[]:void 0,u]):f(),i==="sync"){const I=ya();x=I.__watcherHandles||(I.__watcherHandles=[])}else return Qt;let h=g?new Array(t.length).fill(dn):dn;const m=()=>{if(C.active)if(e){const I=C.run();(r||b||(g?I.some((z,K)=>qe(z,h[K])):qe(I,h)))&&(v&&v(),te(e,c,3,[I,h===dn?void 0:g&&h[0]===dn?[]:h,u]),h=I)}else C.run()};m.allowRecurse=!!e;let w;i==="sync"?w=m:i==="post"?w=()=>Wt(m,c&&c.suspense):(m.pre=!0,c&&(m.id=c.uid),w=()=>xs(m));const C=new ps(f,w);e?n?m():h=C.run():i==="post"?Wt(C.run.bind(C),c&&c.suspense):C.run();const A=()=>{C.stop(),c&&c.scope&&us(c.scope.effects,C)};return x&&x.push(A),A}function Ao(t,e,n){const r=this.proxy,i=Bt(t)?t.includes(".")?Nr(r,t):()=>r[t]:t.bind(r,r);let s;gt(e)?s=e:(s=e.handler,n=e);const o=Rt;me(this);const a=jr(i,s.bind(r),n);return o?me(o):he(),a}function Nr(t,e){const n=e.split(".");return()=>{let r=t;for(let i=0;i<n.length&&r;i++)r=r[n[i]];return r}}function ye(t,e){if(!St(t)||t.__v_skip||(e=e||new Set,e.has(t)))return t;if(e.add(t),Nt(t))ye(t.value,e);else if(ht(t))for(let n=0;n<t.length;n++)ye(t[n],e);else if(An(t)||Ee(t))t.forEach(n=>{ye(n,e)});else if(fr(t))for(const n in t)ye(t[n],e);return t}function Et(t,e){const n=qt;if(n===null)return t;const r=Fn(n)||n.proxy,i=t.dirs||(t.dirs=[]);for(let s=0;s<e.length;s++){let[o,a,c,f=It]=e[s];o&&(gt(o)&&(o={mounted:o,updated:o}),o.deep&&ye(a),i.push({dir:o,instance:r,value:a,oldValue:void 0,arg:c,modifiers:f}))}return t}function ve(t,e,n,r){const i=t.dirs,s=e&&e.dirs;for(let o=0;o<i.length;o++){const a=i[o];s&&(a.oldValue=s[o].value);let c=a.dir[r];c&&(Le(),te(c,n,8,[t.el,a,t,e]),Ue())}}function ge(t,e){return gt(t)?(()=>Lt({name:t.name},e,{setup:t}))():t}const gn=t=>!!t.type.__asyncLoader,Hr=t=>t.type.__isKeepAlive;function Po(t,e){Wr(t,"a",e)}function Oo(t,e){Wr(t,"da",e)}function Wr(t,e,n=Rt){const r=t.__wdc||(t.__wdc=()=>{let i=n;for(;i;){if(i.isDeactivated)return;i=i.parent}return t()});if($n(e,r,n),n){let i=n.parent;for(;i&&i.parent;)Hr(i.parent.vnode)&&zo(r,e,n,i),i=i.parent}}function zo(t,e,n,r){const i=$n(e,t,r,!0);sn(()=>{us(r[e],i)},n)}function $n(t,e,n=Rt,r=!1){if(n){const i=n[t]||(n[t]=[]),s=e.__weh||(e.__weh=(...o)=>{if(n.isUnmounted)return;Le(),me(n);const a=te(e,n,t,o);return he(),Ue(),a});return r?i.unshift(s):i.push(s),s}}const oe=t=>(e,n=Rt)=>(!Qe||t==="sp")&&$n(t,(...r)=>e(...r),n),Bo=oe("bm"),Ln=oe("m"),Do=oe("bu"),$o=oe("u"),Lo=oe("bum"),sn=oe("um"),Uo=oe("sp"),Mo=oe("rtg"),Ro=oe("rtc");function Fo(t,e=Rt){$n("ec",t,e)}const jo=Symbol.for("v-ndc");function Un(t,e,n,r){let i;const s=n&&n[r];if(ht(t)||Bt(t)){i=new Array(t.length);for(let o=0,a=t.length;o<a;o++)i[o]=e(t[o],o,void 0,s&&s[o])}else if(typeof t=="number"){i=new Array(t);for(let o=0;o<t;o++)i[o]=e(o+1,o,void 0,s&&s[o])}else if(St(t))if(t[Symbol.iterator])i=Array.from(t,(o,a)=>e(o,a,void 0,s&&s[a]));else{const o=Object.keys(t);i=new Array(o.length);for(let a=0,c=o.length;a<c;a++){const f=o[a];i[a]=e(t[f],f,a,s&&s[a])}}else i=[];return n&&(n[r]=i),i}const ts=t=>t?si(t)?Fn(t)||t.proxy:ts(t.parent):null,Ze=Lt(Object.create(null),{$:t=>t,$el:t=>t.vnode.el,$data:t=>t.data,$props:t=>t.props,$attrs:t=>t.attrs,$slots:t=>t.slots,$refs:t=>t.refs,$parent:t=>ts(t.parent),$root:t=>ts(t.root),$emit:t=>t.emit,$options:t=>Ts(t),$forceUpdate:t=>t.f||(t.f=()=>xs(t.update)),$nextTick:t=>t.n||(t.n=uo.bind(t.proxy)),$watch:t=>Ao.bind(t)}),Wn=(t,e)=>t!==It&&!t.__isScriptSetup&&yt(t,e),No={get({_:t},e){const{ctx:n,setupState:r,data:i,props:s,accessCache:o,type:a,appContext:c}=t;let f;if(e[0]!=="$"){const u=o[e];if(u!==void 0)switch(u){case 1:return r[e];case 2:return i[e];case 4:return n[e];case 3:return s[e]}else{if(Wn(r,e))return o[e]=1,r[e];if(i!==It&&yt(i,e))return o[e]=2,i[e];if((f=t.propsOptions[0])&&yt(f,e))return o[e]=3,s[e];if(n!==It&&yt(n,e))return o[e]=4,n[e];es&&(o[e]=0)}}const b=Ze[e];let g,v;if(b)return e==="$attrs"&&Zt(t,"get",e),b(t);if((g=a.__cssModules)&&(g=g[e]))return g;if(n!==It&&yt(n,e))return o[e]=4,n[e];if(v=c.config.globalProperties,yt(v,e))return v[e]},set({_:t},e,n){const{data:r,setupState:i,ctx:s}=t;return Wn(i,e)?(i[e]=n,!0):r!==It&&yt(r,e)?(r[e]=n,!0):yt(t.props,e)||e[0]==="$"&&e.slice(1)in t?!1:(s[e]=n,!0)},has({_:{data:t,setupState:e,accessCache:n,ctx:r,appContext:i,propsOptions:s}},o){let a;return!!n[o]||t!==It&&yt(t,o)||Wn(e,o)||(a=s[0])&&yt(a,o)||yt(r,o)||yt(Ze,o)||yt(i.config.globalProperties,o)},defineProperty(t,e,n){return n.get!=null?t._.accessCache[e]=0:yt(n,"value")&&this.set(t,e,n.value,null),Reflect.defineProperty(t,e,n)}};function Ws(t){return ht(t)?t.reduce((e,n)=>(e[n]=null,e),{}):t}function Ho(t){const e=pa();let n=t();return he(),ds(n)&&(n=n.catch(r=>{throw me(e),r})),[n,()=>me(e)]}let es=!0;function Wo(t){const e=Ts(t),n=t.proxy,r=t.ctx;es=!1,e.beforeCreate&&Zs(e.beforeCreate,t,"bc");const{data:i,computed:s,methods:o,watch:a,provide:c,inject:f,created:b,beforeMount:g,mounted:v,beforeUpdate:u,updated:x,activated:h,deactivated:m,beforeDestroy:w,beforeUnmount:C,destroyed:A,unmounted:I,render:z,renderTracked:K,renderTriggered:j,errorCaptured:V,serverPrefetch:F,expose:G,inheritAttrs:st,components:S,directives:W,filters:d}=e;if(f&&Zo(f,r,null),o)for(const H in o){const ot=o[H];gt(ot)&&(r[H]=ot.bind(n))}if(i){const H=i.call(n,n);St(H)&&(t.data=ws(H))}if(es=!0,s)for(const H in s){const ot=s[H],X=gt(ot)?ot.bind(n,n):gt(ot.get)?ot.get.bind(n,n):Qt,rt=!gt(ot)&&gt(ot.set)?ot.set.bind(n):Qt,M=Ut({get:X,set:rt});Object.defineProperty(r,H,{enumerable:!0,configurable:!0,get:()=>M.value,set:L=>M.value=L})}if(a)for(const H in a)Zr(a[H],r,n,H);if(c){const H=gt(c)?c.call(n):c;Reflect.ownKeys(H).forEach(ot=>{Go(ot,H[ot])})}b&&Zs(b,t,"c");function at(H,ot){ht(ot)?ot.forEach(X=>H(X.bind(n))):ot&&H(ot.bind(n))}if(at(Bo,g),at(Ln,v),at(Do,u),at($o,x),at(Po,h),at(Oo,m),at(Fo,V),at(Ro,K),at(Mo,j),at(Lo,C),at(sn,I),at(Uo,F),ht(G))if(G.length){const H=t.exposed||(t.exposed={});G.forEach(ot=>{Object.defineProperty(H,ot,{get:()=>n[ot],set:X=>n[ot]=X})})}else t.exposed||(t.exposed={});z&&t.render===Qt&&(t.render=z),st!=null&&(t.inheritAttrs=st),S&&(t.components=S),W&&(t.directives=W)}function Zo(t,e,n=Qt){ht(t)&&(t=ns(t));for(const r in t){const i=t[r];let s;St(i)?"default"in i?s=vn(i.from||r,i.default,!0):s=vn(i.from||r):s=vn(i),Nt(s)?Object.defineProperty(e,r,{enumerable:!0,configurable:!0,get:()=>s.value,set:o=>s.value=o}):e[r]=s}}function Zs(t,e,n){te(ht(t)?t.map(r=>r.bind(e.proxy)):t.bind(e.proxy),e,n)}function Zr(t,e,n,r){const i=r.includes(".")?Nr(n,r):()=>n[r];if(Bt(t)){const s=e[t];gt(s)&&We(i,s)}else if(gt(t))We(i,t.bind(n));else if(St(t))if(ht(t))t.forEach(s=>Zr(s,e,n,r));else{const s=gt(t.handler)?t.handler.bind(n):e[t.handler];gt(s)&&We(i,s,t)}}function Ts(t){const e=t.type,{mixins:n,extends:r}=e,{mixins:i,optionsCache:s,config:{optionMergeStrategies:o}}=t.appContext,a=s.get(e);let c;return a?c=a:!i.length&&!n&&!r?c=e:(c={},i.length&&i.forEach(f=>kn(c,f,o,!0)),kn(c,e,o)),St(e)&&s.set(e,c),c}function kn(t,e,n,r=!1){const{mixins:i,extends:s}=e;s&&kn(t,s,n,!0),i&&i.forEach(o=>kn(t,o,n,!0));for(const o in e)if(!(r&&o==="expose")){const a=Ko[o]||n&&n[o];t[o]=a?a(t[o],e[o]):e[o]}return t}const Ko={data:Ks,props:Vs,emits:Vs,methods:He,computed:He,beforeCreate:Ht,created:Ht,beforeMount:Ht,mounted:Ht,beforeUpdate:Ht,updated:Ht,beforeDestroy:Ht,beforeUnmount:Ht,destroyed:Ht,unmounted:Ht,activated:Ht,deactivated:Ht,errorCaptured:Ht,serverPrefetch:Ht,components:He,directives:He,watch:qo,provide:Ks,inject:Vo};function Ks(t,e){return e?t?function(){return Lt(gt(t)?t.call(this,this):t,gt(e)?e.call(this,this):e)}:e:t}function Vo(t,e){return He(ns(t),ns(e))}function ns(t){if(ht(t)){const e={};for(let n=0;n<t.length;n++)e[t[n]]=t[n];return e}return t}function Ht(t,e){return t?[...new Set([].concat(t,e))]:e}function He(t,e){return t?Lt(Object.create(null),t,e):e}function Vs(t,e){return t?ht(t)&&ht(e)?[...new Set([...t,...e])]:Lt(Object.create(null),Ws(t),Ws(e??{})):e}function qo(t,e){if(!t)return e;if(!e)return t;const n=Lt(Object.create(null),t);for(const r in e)n[r]=Ht(t[r],e[r]);return n}function Kr(){return{app:null,config:{isNativeTag:hi,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let Jo=0;function Yo(t,e){return function(r,i=null){gt(r)||(r=Lt({},r)),i!=null&&!St(i)&&(i=null);const s=Kr(),o=new Set;let a=!1;const c=s.app={_uid:Jo++,_component:r,_props:i,_container:null,_context:s,_instance:null,version:xa,get config(){return s.config},set config(f){},use(f,...b){return o.has(f)||(f&&gt(f.install)?(o.add(f),f.install(c,...b)):gt(f)&&(o.add(f),f(c,...b))),c},mixin(f){return s.mixins.includes(f)||s.mixins.push(f),c},component(f,b){return b?(s.components[f]=b,c):s.components[f]},directive(f,b){return b?(s.directives[f]=b,c):s.directives[f]},mount(f,b,g){if(!a){const v=$t(r,i);return v.appContext=s,b&&e?e(v,f):t(v,f,g),a=!0,c._container=f,f.__vue_app__=c,Fn(v.component)||v.component.proxy}},unmount(){a&&(t(null,c._container),delete c._container.__vue_app__)},provide(f,b){return s.provides[f]=b,c},runWithContext(f){Cn=c;try{return f()}finally{Cn=null}}};return c}}let Cn=null;function Go(t,e){if(Rt){let n=Rt.provides;const r=Rt.parent&&Rt.parent.provides;r===n&&(n=Rt.provides=Object.create(r)),n[t]=e}}function vn(t,e,n=!1){const r=Rt||qt;if(r||Cn){const i=r?r.parent==null?r.vnode.appContext&&r.vnode.appContext.provides:r.parent.provides:Cn._context.provides;if(i&&t in i)return i[t];if(arguments.length>1)return n&&gt(e)?e.call(r&&r.proxy):e}}function Xo(t,e,n,r=!1){const i={},s={};bn(s,Rn,1),t.propsDefaults=Object.create(null),Vr(t,e,i,s);for(const o in t.propsOptions[0])o in i||(i[o]=void 0);n?t.props=r?i:so(i):t.type.props?t.props=i:t.props=s,t.attrs=s}function Qo(t,e,n,r){const{props:i,attrs:s,vnode:{patchFlag:o}}=t,a=xt(i),[c]=t.propsOptions;let f=!1;if((r||o>0)&&!(o&16)){if(o&8){const b=t.vnode.dynamicProps;for(let g=0;g<b.length;g++){let v=b[g];if(Bn(t.emitsOptions,v))continue;const u=e[v];if(c)if(yt(s,v))u!==s[v]&&(s[v]=u,f=!0);else{const x=Oe(v);i[x]=ss(c,a,x,u,t,!1)}else u!==s[v]&&(s[v]=u,f=!0)}}}else{Vr(t,e,i,s)&&(f=!0);let b;for(const g in a)(!e||!yt(e,g)&&((b=$e(g))===g||!yt(e,b)))&&(c?n&&(n[g]!==void 0||n[b]!==void 0)&&(i[g]=ss(c,a,g,void 0,t,!0)):delete i[g]);if(s!==a)for(const g in s)(!e||!yt(e,g))&&(delete s[g],f=!0)}f&&re(t,"set","$attrs")}function Vr(t,e,n,r){const[i,s]=t.propsOptions;let o=!1,a;if(e)for(let c in e){if(pn(c))continue;const f=e[c];let b;i&&yt(i,b=Oe(c))?!s||!s.includes(b)?n[b]=f:(a||(a={}))[b]=f:Bn(t.emitsOptions,c)||(!(c in r)||f!==r[c])&&(r[c]=f,o=!0)}if(s){const c=xt(n),f=a||It;for(let b=0;b<s.length;b++){const g=s[b];n[g]=ss(i,c,g,f[g],t,!yt(f,g))}}return o}function ss(t,e,n,r,i,s){const o=t[n];if(o!=null){const a=yt(o,"default");if(a&&r===void 0){const c=o.default;if(o.type!==Function&&!o.skipFactory&&gt(c)){const{propsDefaults:f}=i;n in f?r=f[n]:(me(i),r=f[n]=c.call(null,e),he())}else r=c}o[0]&&(s&&!a?r=!1:o[1]&&(r===""||r===$e(n))&&(r=!0))}return r}function qr(t,e,n=!1){const r=e.propsCache,i=r.get(t);if(i)return i;const s=t.props,o={},a=[];let c=!1;if(!gt(t)){const b=g=>{c=!0;const[v,u]=qr(g,e,!0);Lt(o,v),u&&a.push(...u)};!n&&e.mixins.length&&e.mixins.forEach(b),t.extends&&b(t.extends),t.mixins&&t.mixins.forEach(b)}if(!s&&!c)return St(t)&&r.set(t,Ie),Ie;if(ht(s))for(let b=0;b<s.length;b++){const g=Oe(s[b]);qs(g)&&(o[g]=It)}else if(s)for(const b in s){const g=Oe(b);if(qs(g)){const v=s[b],u=o[g]=ht(v)||gt(v)?{type:v}:Lt({},v);if(u){const x=Gs(Boolean,u.type),h=Gs(String,u.type);u[0]=x>-1,u[1]=h<0||x<h,(x>-1||yt(u,"default"))&&a.push(g)}}}const f=[o,a];return St(t)&&r.set(t,f),f}function qs(t){return t[0]!=="$"}function Js(t){const e=t&&t.toString().match(/^\s*(function|class) (\w+)/);return e?e[2]:t===null?"null":""}function Ys(t,e){return Js(t)===Js(e)}function Gs(t,e){return ht(e)?e.findIndex(n=>Ys(n,t)):gt(e)&&Ys(e,t)?0:-1}const Jr=t=>t[0]==="_"||t==="$stable",Is=t=>ht(t)?t.map(Gt):[Gt(t)],ta=(t,e,n)=>{if(e._n)return e;const r=Qn((...i)=>Is(e(...i)),n);return r._c=!1,r},Yr=(t,e,n)=>{const r=t._ctx;for(const i in t){if(Jr(i))continue;const s=t[i];if(gt(s))e[i]=ta(i,s,r);else if(s!=null){const o=Is(s);e[i]=()=>o}}},Gr=(t,e)=>{const n=Is(e);t.slots.default=()=>n},ea=(t,e)=>{if(t.vnode.shapeFlag&32){const n=e._;n?(t.slots=xt(e),bn(e,"_",n)):Yr(e,t.slots={})}else t.slots={},e&&Gr(t,e);bn(t.slots,Rn,1)},na=(t,e,n)=>{const{vnode:r,slots:i}=t;let s=!0,o=It;if(r.shapeFlag&32){const a=e._;a?n&&a===1?s=!1:(Lt(i,e),!n&&a===1&&delete i._):(s=!e.$stable,Yr(e,i)),o=e}else e&&(Gr(t,e),o={default:1});if(s)for(const a in i)!Jr(a)&&!(a in o)&&delete i[a]};function rs(t,e,n,r,i=!1){if(ht(t)){t.forEach((v,u)=>rs(v,e&&(ht(e)?e[u]:e),n,r,i));return}if(gn(r)&&!i)return;const s=r.shapeFlag&4?Fn(r.component)||r.component.proxy:r.el,o=i?null:s,{i:a,r:c}=t,f=e&&e.r,b=a.refs===It?a.refs={}:a.refs,g=a.setupState;if(f!=null&&f!==c&&(Bt(f)?(b[f]=null,yt(g,f)&&(g[f]=null)):Nt(f)&&(f.value=null)),gt(c))fe(c,a,12,[o,b]);else{const v=Bt(c),u=Nt(c);if(v||u){const x=()=>{if(t.f){const h=v?yt(g,c)?g[c]:b[c]:c.value;i?ht(h)&&us(h,s):ht(h)?h.includes(s)||h.push(s):v?(b[c]=[s],yt(g,c)&&(g[c]=b[c])):(c.value=[s],t.k&&(b[t.k]=c.value))}else v?(b[c]=o,yt(g,c)&&(g[c]=o)):u&&(c.value=o,t.k&&(b[t.k]=o))};o?(x.id=-1,Wt(x,n)):x()}}}const Wt=Eo;function sa(t){return ra(t)}function ra(t,e){const n=Vn();n.__VUE__=!0;const{insert:r,remove:i,patchProp:s,createElement:o,createText:a,createComment:c,setText:f,setElementText:b,parentNode:g,nextSibling:v,setScopeId:u=Qt,insertStaticContent:x}=t,h=(k,B,l,P=null,E=null,_=null,p=!1,T=null,$=!!B.dynamicChildren)=>{if(k===B)return;k&&!ce(k,B)&&(P=kt(k),L(k,E,_,!0),k=null),B.patchFlag===-2&&($=!1,B.dynamicChildren=null);const{type:D,ref:O,shapeFlag:U}=B;switch(D){case Mn:m(k,B,l,P);break;case ie:w(k,B,l,P);break;case wn:k==null&&C(B,l,P,p);break;case Dt:S(k,B,l,P,E,_,p,T,$);break;default:U&1?z(k,B,l,P,E,_,p,T,$):U&6?W(k,B,l,P,E,_,p,T,$):(U&64||U&128)&&D.process(k,B,l,P,E,_,p,T,$,mt)}O!=null&&E&&rs(O,k&&k.ref,_,B||k,!B)},m=(k,B,l,P)=>{if(k==null)r(B.el=a(B.children),l,P);else{const E=B.el=k.el;B.children!==k.children&&f(E,B.children)}},w=(k,B,l,P)=>{k==null?r(B.el=c(B.children||""),l,P):B.el=k.el},C=(k,B,l,P)=>{[k.el,k.anchor]=x(k.children,B,l,P,k.el,k.anchor)},A=({el:k,anchor:B},l,P)=>{let E;for(;k&&k!==B;)E=v(k),r(k,l,P),k=E;r(B,l,P)},I=({el:k,anchor:B})=>{let l;for(;k&&k!==B;)l=v(k),i(k),k=l;i(B)},z=(k,B,l,P,E,_,p,T,$)=>{p=p||B.type==="svg",k==null?K(B,l,P,E,_,p,T,$):F(k,B,E,_,p,T,$)},K=(k,B,l,P,E,_,p,T)=>{let $,D;const{type:O,props:U,shapeFlag:J,transition:Z,dirs:Q}=k;if($=k.el=o(k.type,_,U&&U.is,U),J&8?b($,k.children):J&16&&V(k.children,$,null,P,E,_&&O!=="foreignObject",p,T),Q&&ve(k,null,P,"created"),j($,k,k.scopeId,p,P),U){for(const R in U)R!=="value"&&!pn(R)&&s($,R,null,U[R],_,k.children,P,E,_t);"value"in U&&s($,"value",null,U.value),(D=U.onVnodeBeforeMount)&&ee(D,P,k)}Q&&ve(k,null,P,"beforeMount");const N=(!E||E&&!E.pendingBranch)&&Z&&!Z.persisted;N&&Z.beforeEnter($),r($,B,l),((D=U&&U.onVnodeMounted)||N||Q)&&Wt(()=>{D&&ee(D,P,k),N&&Z.enter($),Q&&ve(k,null,P,"mounted")},E)},j=(k,B,l,P,E)=>{if(l&&u(k,l),P)for(let _=0;_<P.length;_++)u(k,P[_]);if(E){let _=E.subTree;if(B===_){const p=E.vnode;j(k,p,p.scopeId,p.slotScopeIds,E.parent)}}},V=(k,B,l,P,E,_,p,T,$=0)=>{for(let D=$;D<k.length;D++){const O=k[D]=T?le(k[D]):Gt(k[D]);h(null,O,B,l,P,E,_,p,T)}},F=(k,B,l,P,E,_,p)=>{const T=B.el=k.el;let{patchFlag:$,dynamicChildren:D,dirs:O}=B;$|=k.patchFlag&16;const U=k.props||It,J=B.props||It;let Z;l&&we(l,!1),(Z=J.onVnodeBeforeUpdate)&&ee(Z,l,B,k),O&&ve(B,k,l,"beforeUpdate"),l&&we(l,!0);const Q=E&&B.type!=="foreignObject";if(D?G(k.dynamicChildren,D,T,l,P,Q,_):p||ot(k,B,T,null,l,P,Q,_,!1),$>0){if($&16)st(T,B,U,J,l,P,E);else if($&2&&U.class!==J.class&&s(T,"class",null,J.class,E),$&4&&s(T,"style",U.style,J.style,E),$&8){const N=B.dynamicProps;for(let R=0;R<N.length;R++){const nt=N[R],ft=U[nt],ct=J[nt];(ct!==ft||nt==="value")&&s(T,nt,ft,ct,E,k.children,l,P,_t)}}$&1&&k.children!==B.children&&b(T,B.children)}else!p&&D==null&&st(T,B,U,J,l,P,E);((Z=J.onVnodeUpdated)||O)&&Wt(()=>{Z&&ee(Z,l,B,k),O&&ve(B,k,l,"updated")},P)},G=(k,B,l,P,E,_,p)=>{for(let T=0;T<B.length;T++){const $=k[T],D=B[T],O=$.el&&($.type===Dt||!ce($,D)||$.shapeFlag&70)?g($.el):l;h($,D,O,null,P,E,_,p,!0)}},st=(k,B,l,P,E,_,p)=>{if(l!==P){if(l!==It)for(const T in l)!pn(T)&&!(T in P)&&s(k,T,l[T],null,p,B.children,E,_,_t);for(const T in P){if(pn(T))continue;const $=P[T],D=l[T];$!==D&&T!=="value"&&s(k,T,D,$,p,B.children,E,_,_t)}"value"in P&&s(k,"value",l.value,P.value)}},S=(k,B,l,P,E,_,p,T,$)=>{const D=B.el=k?k.el:a(""),O=B.anchor=k?k.anchor:a("");let{patchFlag:U,dynamicChildren:J,slotScopeIds:Z}=B;Z&&(T=T?T.concat(Z):Z),k==null?(r(D,l,P),r(O,l,P),V(B.children,l,O,E,_,p,T,$)):U>0&&U&64&&J&&k.dynamicChildren?(G(k.dynamicChildren,J,l,E,_,p,T),(B.key!=null||E&&B===E.subTree)&&Xr(k,B,!0)):ot(k,B,l,O,E,_,p,T,$)},W=(k,B,l,P,E,_,p,T,$)=>{B.slotScopeIds=T,k==null?B.shapeFlag&512?E.ctx.activate(B,l,P,p,$):d(B,l,P,E,_,p,$):q(k,B,$)},d=(k,B,l,P,E,_,p)=>{const T=k.component=ha(k,P,E);if(Hr(k)&&(T.ctx.renderer=mt),ma(T),T.asyncDep){if(E&&E.registerDep(T,at),!k.el){const $=T.subTree=$t(ie);w(null,$,B,l)}return}at(T,k,B,l,E,_,p)},q=(k,B,l)=>{const P=B.component=k.component;if(_o(k,B,l))if(P.asyncDep&&!P.asyncResolved){H(P,B,l);return}else P.next=B,ho(P.update),P.update();else B.el=k.el,P.vnode=B},at=(k,B,l,P,E,_,p)=>{const T=()=>{if(k.isMounted){let{next:O,bu:U,u:J,parent:Z,vnode:Q}=k,N=O,R;we(k,!1),O?(O.el=Q.el,H(k,O,p)):O=Q,U&&mn(U),(R=O.props&&O.props.onVnodeBeforeUpdate)&&ee(R,Z,O,Q),we(k,!0);const nt=Hn(k),ft=k.subTree;k.subTree=nt,h(ft,nt,g(ft.el),kt(ft),k,E,_),O.el=nt.el,N===null&&ks(k,nt.el),J&&Wt(J,E),(R=O.props&&O.props.onVnodeUpdated)&&Wt(()=>ee(R,Z,O,Q),E)}else{let O;const{el:U,props:J}=B,{bm:Z,m:Q,parent:N}=k,R=gn(B);if(we(k,!1),Z&&mn(Z),!R&&(O=J&&J.onVnodeBeforeMount)&&ee(O,N,B),we(k,!0),U&&Y){const nt=()=>{k.subTree=Hn(k),Y(U,k.subTree,k,E,null)};R?B.type.__asyncLoader().then(()=>!k.isUnmounted&&nt()):nt()}else{const nt=k.subTree=Hn(k);h(null,nt,l,P,k,E,_),B.el=nt.el}if(Q&&Wt(Q,E),!R&&(O=J&&J.onVnodeMounted)){const nt=B;Wt(()=>ee(O,N,nt),E)}(B.shapeFlag&256||N&&gn(N.vnode)&&N.vnode.shapeFlag&256)&&k.a&&Wt(k.a,E),k.isMounted=!0,B=l=P=null}},$=k.effect=new ps(T,()=>xs(D),k.scope),D=k.update=()=>$.run();D.id=k.uid,we(k,!0),D()},H=(k,B,l)=>{B.component=k;const P=k.vnode.props;k.vnode=B,k.next=null,Qo(k,B.props,P,l),na(k,B.children,l),Le(),js(),Ue()},ot=(k,B,l,P,E,_,p,T,$=!1)=>{const D=k&&k.children,O=k?k.shapeFlag:0,U=B.children,{patchFlag:J,shapeFlag:Z}=B;if(J>0){if(J&128){rt(D,U,l,P,E,_,p,T,$);return}else if(J&256){X(D,U,l,P,E,_,p,T,$);return}}Z&8?(O&16&&_t(D,E,_),U!==D&&b(l,U)):O&16?Z&16?rt(D,U,l,P,E,_,p,T,$):_t(D,E,_,!0):(O&8&&b(l,""),Z&16&&V(U,l,P,E,_,p,T,$))},X=(k,B,l,P,E,_,p,T,$)=>{k=k||Ie,B=B||Ie;const D=k.length,O=B.length,U=Math.min(D,O);let J;for(J=0;J<U;J++){const Z=B[J]=$?le(B[J]):Gt(B[J]);h(k[J],Z,l,null,E,_,p,T,$)}D>O?_t(k,E,_,!0,!1,U):V(B,l,P,E,_,p,T,$,U)},rt=(k,B,l,P,E,_,p,T,$)=>{let D=0;const O=B.length;let U=k.length-1,J=O-1;for(;D<=U&&D<=J;){const Z=k[D],Q=B[D]=$?le(B[D]):Gt(B[D]);if(ce(Z,Q))h(Z,Q,l,null,E,_,p,T,$);else break;D++}for(;D<=U&&D<=J;){const Z=k[U],Q=B[J]=$?le(B[J]):Gt(B[J]);if(ce(Z,Q))h(Z,Q,l,null,E,_,p,T,$);else break;U--,J--}if(D>U){if(D<=J){const Z=J+1,Q=Z<O?B[Z].el:P;for(;D<=J;)h(null,B[D]=$?le(B[D]):Gt(B[D]),l,Q,E,_,p,T,$),D++}}else if(D>J)for(;D<=U;)L(k[D],E,_,!0),D++;else{const Z=D,Q=D,N=new Map;for(D=Q;D<=J;D++){const Ot=B[D]=$?le(B[D]):Gt(B[D]);Ot.key!=null&&N.set(Ot.key,D)}let R,nt=0;const ft=J-Q+1;let ct=!1,Ct=0;const bt=new Array(ft);for(D=0;D<ft;D++)bt[D]=0;for(D=Z;D<=U;D++){const Ot=k[D];if(nt>=ft){L(Ot,E,_,!0);continue}let zt;if(Ot.key!=null)zt=N.get(Ot.key);else for(R=Q;R<=J;R++)if(bt[R-Q]===0&&ce(Ot,B[R])){zt=R;break}zt===void 0?L(Ot,E,_,!0):(bt[zt-Q]=D+1,zt>=Ct?Ct=zt:ct=!0,h(Ot,B[zt],l,null,E,_,p,T,$),nt++)}const Vt=ct?ia(bt):Ie;for(R=Vt.length-1,D=ft-1;D>=0;D--){const Ot=Q+D,zt=B[Ot],Re=Ot+1<O?B[Ot+1].el:P;bt[D]===0?h(null,zt,l,Re,E,_,p,T,$):ct&&(R<0||D!==Vt[R]?M(zt,l,Re,2):R--)}}},M=(k,B,l,P,E=null)=>{const{el:_,type:p,transition:T,children:$,shapeFlag:D}=k;if(D&6){M(k.component.subTree,B,l,P);return}if(D&128){k.suspense.move(B,l,P);return}if(D&64){p.move(k,B,l,mt);return}if(p===Dt){r(_,B,l);for(let U=0;U<$.length;U++)M($[U],B,l,P);r(k.anchor,B,l);return}if(p===wn){A(k,B,l);return}if(P!==2&&D&1&&T)if(P===0)T.beforeEnter(_),r(_,B,l),Wt(()=>T.enter(_),E);else{const{leave:U,delayLeave:J,afterLeave:Z}=T,Q=()=>r(_,B,l),N=()=>{U(_,()=>{Q(),Z&&Z()})};J?J(_,Q,N):N()}else r(_,B,l)},L=(k,B,l,P=!1,E=!1)=>{const{type:_,props:p,ref:T,children:$,dynamicChildren:D,shapeFlag:O,patchFlag:U,dirs:J}=k;if(T!=null&&rs(T,null,l,k,!0),O&256){B.ctx.deactivate(k);return}const Z=O&1&&J,Q=!gn(k);let N;if(Q&&(N=p&&p.onVnodeBeforeUnmount)&&ee(N,B,k),O&6)tt(k.component,l,P);else{if(O&128){k.suspense.unmount(l,P);return}Z&&ve(k,null,B,"beforeUnmount"),O&64?k.type.remove(k,B,l,E,mt,P):D&&(_!==Dt||U>0&&U&64)?_t(D,B,l,!1,!0):(_===Dt&&U&384||!E&&O&16)&&_t($,B,l),P&&ut(k)}(Q&&(N=p&&p.onVnodeUnmounted)||Z)&&Wt(()=>{N&&ee(N,B,k),Z&&ve(k,null,B,"unmounted")},l)},ut=k=>{const{type:B,el:l,anchor:P,transition:E}=k;if(B===Dt){it(l,P);return}if(B===wn){I(k);return}const _=()=>{i(l),E&&!E.persisted&&E.afterLeave&&E.afterLeave()};if(k.shapeFlag&1&&E&&!E.persisted){const{leave:p,delayLeave:T}=E,$=()=>p(l,_);T?T(k.el,_,$):$()}else _()},it=(k,B)=>{let l;for(;k!==B;)l=v(k),i(k),k=l;i(B)},tt=(k,B,l)=>{const{bum:P,scope:E,update:_,subTree:p,um:T}=k;P&&mn(P),E.stop(),_&&(_.active=!1,L(p,k,B,l)),T&&Wt(T,B),Wt(()=>{k.isUnmounted=!0},B),B&&B.pendingBranch&&!B.isUnmounted&&k.asyncDep&&!k.asyncResolved&&k.suspenseId===B.pendingId&&(B.deps--,B.deps===0&&B.resolve())},_t=(k,B,l,P=!1,E=!1,_=0)=>{for(let p=_;p<k.length;p++)L(k[p],B,l,P,E)},kt=k=>k.shapeFlag&6?kt(k.component.subTree):k.shapeFlag&128?k.suspense.next():v(k.anchor||k.el),vt=(k,B,l)=>{k==null?B._vnode&&L(B._vnode,null,null,!0):h(B._vnode||null,k,B,null,null,null,l),js(),Lr(),B._vnode=k},mt={p:h,um:L,m:M,r:ut,mt:d,mc:V,pc:ot,pbc:G,n:kt,o:t};let et,Y;return e&&([et,Y]=e(mt)),{render:vt,hydrate:et,createApp:Yo(vt,et)}}function we({effect:t,update:e},n){t.allowRecurse=e.allowRecurse=n}function Xr(t,e,n=!1){const r=t.children,i=e.children;if(ht(r)&&ht(i))for(let s=0;s<r.length;s++){const o=r[s];let a=i[s];a.shapeFlag&1&&!a.dynamicChildren&&((a.patchFlag<=0||a.patchFlag===32)&&(a=i[s]=le(i[s]),a.el=o.el),n||Xr(o,a)),a.type===Mn&&(a.el=o.el)}}function ia(t){const e=t.slice(),n=[0];let r,i,s,o,a;const c=t.length;for(r=0;r<c;r++){const f=t[r];if(f!==0){if(i=n[n.length-1],t[i]<f){e[r]=i,n.push(r);continue}for(s=0,o=n.length-1;s<o;)a=s+o>>1,t[n[a]]<f?s=a+1:o=a;f<t[n[s]]&&(s>0&&(e[r]=n[s-1]),n[s]=r)}}for(s=n.length,o=n[s-1];s-- >0;)n[s]=o,o=e[o];return n}const oa=t=>t.__isTeleport,Dt=Symbol.for("v-fgt"),Mn=Symbol.for("v-txt"),ie=Symbol.for("v-cmt"),wn=Symbol.for("v-stc"),Ke=[];let Jt=null;function pt(t=!1){Ke.push(Jt=t?null:[])}function Qr(){Ke.pop(),Jt=Ke[Ke.length-1]||null}let Be=1;function Xs(t){Be+=t}function ti(t){return t.dynamicChildren=Be>0?Jt||Ie:null,Qr(),Be>0&&Jt&&Jt.push(t),t}function wt(t,e,n,r,i,s){return ti(y(t,e,n,r,i,s,!0))}function Tn(t,e,n,r,i){return ti($t(t,e,n,r,i,!0))}function ei(t){return t?t.__v_isVNode===!0:!1}function ce(t,e){return t.type===e.type&&t.key===e.key}const Rn="__vInternal",ni=({key:t})=>t??null,_n=({ref:t,ref_key:e,ref_for:n})=>(typeof t=="number"&&(t=""+t),t!=null?Bt(t)||Nt(t)||gt(t)?{i:qt,r:t,k:e,f:!!n}:t:null);function y(t,e=null,n=null,r=0,i=null,s=t===Dt?0:1,o=!1,a=!1){const c={__v_isVNode:!0,__v_skip:!0,type:t,props:e,key:e&&ni(e),ref:e&&_n(e),scopeId:Dn,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:s,patchFlag:r,dynamicProps:i,dynamicChildren:null,appContext:null,ctx:qt};return a?(Es(c,n),s&128&&t.normalize(c)):n&&(c.shapeFlag|=Bt(n)?8:16),Be>0&&!o&&Jt&&(c.patchFlag>0||s&6)&&c.patchFlag!==32&&Jt.push(c),c}const $t=aa;function aa(t,e=null,n=null,r=0,i=null,s=!1){if((!t||t===jo)&&(t=ie),ei(t)){const a=De(t,e,!0);return n&&Es(a,n),Be>0&&!s&&Jt&&(a.shapeFlag&6?Jt[Jt.indexOf(t)]=a:Jt.push(a)),a.patchFlag|=-2,a}if(_a(t)&&(t=t.__vccOpts),e){e=la(e);let{class:a,style:c}=e;a&&!Bt(a)&&(e.class=Pt(a)),St(c)&&(Sr(c)&&!ht(c)&&(c=Lt({},c)),e.style=en(c))}const o=Bt(t)?1:bo(t)?128:oa(t)?64:St(t)?4:gt(t)?2:0;return y(t,e,n,r,i,o,s,!0)}function la(t){return t?Sr(t)||Rn in t?Lt({},t):t:null}function De(t,e,n=!1){const{props:r,ref:i,patchFlag:s,children:o}=t,a=e?ua(r||{},e):r;return{__v_isVNode:!0,__v_skip:!0,type:t.type,props:a,key:a&&ni(a),ref:e&&e.ref?n&&i?ht(i)?i.concat(_n(e)):[i,_n(e)]:_n(e):i,scopeId:t.scopeId,slotScopeIds:t.slotScopeIds,children:o,target:t.target,targetAnchor:t.targetAnchor,staticCount:t.staticCount,shapeFlag:t.shapeFlag,patchFlag:e&&t.type!==Dt?s===-1?16:s|16:s,dynamicProps:t.dynamicProps,dynamicChildren:t.dynamicChildren,appContext:t.appContext,dirs:t.dirs,transition:t.transition,component:t.component,suspense:t.suspense,ssContent:t.ssContent&&De(t.ssContent),ssFallback:t.ssFallback&&De(t.ssFallback),el:t.el,anchor:t.anchor,ctx:t.ctx,ce:t.ce}}function Ft(t=" ",e=0){return $t(Mn,null,t,e)}function ca(t,e){const n=$t(wn,null,t);return n.staticCount=e,n}function ue(t="",e=!1){return e?(pt(),Tn(ie,null,t)):$t(ie,null,t)}function Gt(t){return t==null||typeof t=="boolean"?$t(ie):ht(t)?$t(Dt,null,t.slice()):typeof t=="object"?le(t):$t(Mn,null,String(t))}function le(t){return t.el===null&&t.patchFlag!==-1||t.memo?t:De(t)}function Es(t,e){let n=0;const{shapeFlag:r}=t;if(e==null)e=null;else if(ht(e))n=16;else if(typeof e=="object")if(r&65){const i=e.default;i&&(i._c&&(i._d=!1),Es(t,i()),i._c&&(i._d=!0));return}else{n=32;const i=e._;!i&&!(Rn in e)?e._ctx=qt:i===3&&qt&&(qt.slots._===1?e._=1:(e._=2,t.patchFlag|=1024))}else gt(e)?(e={default:e,_ctx:qt},n=32):(e=String(e),r&64?(n=16,e=[Ft(e)]):n=8);t.children=e,t.shapeFlag|=n}function ua(...t){const e={};for(let n=0;n<t.length;n++){const r=t[n];for(const i in r)if(i==="class")e.class!==r.class&&(e.class=Pt([e.class,r.class]));else if(i==="style")e.style=en([e.style,r.style]);else if(Sn(i)){const s=e[i],o=r[i];o&&s!==o&&!(ht(s)&&s.includes(o))&&(e[i]=s?[].concat(s,o):o)}else i!==""&&(e[i]=r[i])}return e}function ee(t,e,n,r=null){te(t,e,7,[n,r])}const da=Kr();let fa=0;function ha(t,e,n){const r=t.type,i=(e?e.appContext:t.appContext)||da,s={uid:fa++,vnode:t,type:r,parent:e,appContext:i,root:null,next:null,subTree:null,effect:null,update:null,scope:new Si(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:e?e.provides:Object.create(i.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:qr(r,i),emitsOptions:Mr(r,i),emit:null,emitted:null,propsDefaults:It,inheritAttrs:r.inheritAttrs,ctx:It,data:It,props:It,attrs:It,slots:It,refs:It,setupState:It,setupContext:null,attrsProxy:null,slotsProxy:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return s.ctx={_:s},s.root=e?e.root:s,s.emit=mo.bind(null,s),t.ce&&t.ce(s),s}let Rt=null;const pa=()=>Rt||qt;let Ss,Te,Qs="__VUE_INSTANCE_SETTERS__";(Te=Vn()[Qs])||(Te=Vn()[Qs]=[]),Te.push(t=>Rt=t),Ss=t=>{Te.length>1?Te.forEach(e=>e(t)):Te[0](t)};const me=t=>{Ss(t),t.scope.on()},he=()=>{Rt&&Rt.scope.off(),Ss(null)};function si(t){return t.vnode.shapeFlag&4}let Qe=!1;function ma(t,e=!1){Qe=e;const{props:n,children:r}=t.vnode,i=si(t);Xo(t,n,i,e),ea(t,r);const s=i?ga(t,e):void 0;return Qe=!1,s}function ga(t,e){const n=t.type;t.accessCache=Object.create(null),t.proxy=Ar(new Proxy(t.ctx,No));const{setup:r}=n;if(r){const i=t.setupContext=r.length>1?wa(t):null;me(t),Le();const s=fe(r,t,0,[t.props,i]);if(Ue(),he(),ds(s)){if(s.then(he,he),e)return s.then(o=>{is(t,o,e)}).catch(o=>{nn(o,t,0)});t.asyncDep=s}else is(t,s,e)}else ri(t,e)}function is(t,e,n){gt(e)?t.type.__ssrInlineRender?t.ssrRender=e:t.render=e:St(e)&&(t.setupState=zr(e)),ri(t,n)}let tr;function ri(t,e,n){const r=t.type;if(!t.render){if(!e&&tr&&!r.render){const i=r.template||Ts(t).template;if(i){const{isCustomElement:s,compilerOptions:o}=t.appContext.config,{delimiters:a,compilerOptions:c}=r,f=Lt(Lt({isCustomElement:s,delimiters:a},o),c);r.render=tr(i,f)}}t.render=r.render||Qt}me(t),Le(),Wo(t),Ue(),he()}function va(t){return t.attrsProxy||(t.attrsProxy=new Proxy(t.attrs,{get(e,n){return Zt(t,"get","$attrs"),e[n]}}))}function wa(t){const e=n=>{t.exposed=n||{}};return{get attrs(){return va(t)},slots:t.slots,emit:t.emit,expose:e}}function Fn(t){if(t.exposed)return t.exposeProxy||(t.exposeProxy=new Proxy(zr(Ar(t.exposed)),{get(e,n){if(n in e)return e[n];if(n in Ze)return Ze[n](t)},has(e,n){return n in e||n in Ze}}))}function _a(t){return gt(t)&&"__vccOpts"in t}const Ut=(t,e)=>lo(t,e,Qe),ba=Symbol.for("v-scx"),ya=()=>vn(ba),xa="3.3.4",ka="http://www.w3.org/2000/svg",be=typeof document<"u"?document:null,er=be&&be.createElement("template"),Ca={insert:(t,e,n)=>{e.insertBefore(t,n||null)},remove:t=>{const e=t.parentNode;e&&e.removeChild(t)},createElement:(t,e,n,r)=>{const i=e?be.createElementNS(ka,t):be.createElement(t,n?{is:n}:void 0);return t==="select"&&r&&r.multiple!=null&&i.setAttribute("multiple",r.multiple),i},createText:t=>be.createTextNode(t),createComment:t=>be.createComment(t),setText:(t,e)=>{t.nodeValue=e},setElementText:(t,e)=>{t.textContent=e},parentNode:t=>t.parentNode,nextSibling:t=>t.nextSibling,querySelector:t=>be.querySelector(t),setScopeId(t,e){t.setAttribute(e,"")},insertStaticContent(t,e,n,r,i,s){const o=n?n.previousSibling:e.lastChild;if(i&&(i===s||i.nextSibling))for(;e.insertBefore(i.cloneNode(!0),n),!(i===s||!(i=i.nextSibling)););else{er.innerHTML=r?`<svg>${t}</svg>`:t;const a=er.content;if(r){const c=a.firstChild;for(;c.firstChild;)a.appendChild(c.firstChild);a.removeChild(c)}e.insertBefore(a,n)}return[o?o.nextSibling:e.firstChild,n?n.previousSibling:e.lastChild]}};function Ta(t,e,n){const r=t._vtc;r&&(e=(e?[e,...r]:[...r]).join(" ")),e==null?t.removeAttribute("class"):n?t.setAttribute("class",e):t.className=e}function Ia(t,e,n){const r=t.style,i=Bt(n);if(n&&!i){if(e&&!Bt(e))for(const s in e)n[s]==null&&os(r,s,"");for(const s in n)os(r,s,n[s])}else{const s=r.display;i?e!==n&&(r.cssText=n):e&&t.removeAttribute("style"),"_vod"in t&&(r.display=s)}}const nr=/\s*!important$/;function os(t,e,n){if(ht(n))n.forEach(r=>os(t,e,r));else if(n==null&&(n=""),e.startsWith("--"))t.setProperty(e,n);else{const r=Ea(t,e);nr.test(n)?t.setProperty($e(r),n.replace(nr,""),"important"):t[r]=n}}const sr=["Webkit","Moz","ms"],Zn={};function Ea(t,e){const n=Zn[e];if(n)return n;let r=Oe(e);if(r!=="filter"&&r in t)return Zn[e]=r;r=hr(r);for(let i=0;i<sr.length;i++){const s=sr[i]+r;if(s in t)return Zn[e]=s}return e}const rr="http://www.w3.org/1999/xlink";function Sa(t,e,n,r,i){if(r&&e.startsWith("xlink:"))n==null?t.removeAttributeNS(rr,e.slice(6,e.length)):t.setAttributeNS(rr,e,n);else{const s=Ti(e);n==null||s&&!mr(n)?t.removeAttribute(e):t.setAttribute(e,s?"":n)}}function Aa(t,e,n,r,i,s,o){if(e==="innerHTML"||e==="textContent"){r&&o(r,i,s),t[e]=n??"";return}const a=t.tagName;if(e==="value"&&a!=="PROGRESS"&&!a.includes("-")){t._value=n;const f=a==="OPTION"?t.getAttribute("value"):t.value,b=n??"";f!==b&&(t.value=b),n==null&&t.removeAttribute(e);return}let c=!1;if(n===""||n==null){const f=typeof t[e];f==="boolean"?n=mr(n):n==null&&f==="string"?(n="",c=!0):f==="number"&&(n=0,c=!0)}try{t[e]=n}catch{}c&&t.removeAttribute(e)}function ii(t,e,n,r){t.addEventListener(e,n,r)}function Pa(t,e,n,r){t.removeEventListener(e,n,r)}function Oa(t,e,n,r,i=null){const s=t._vei||(t._vei={}),o=s[e];if(r&&o)o.value=r;else{const[a,c]=za(e);if(r){const f=s[e]=$a(r,i);ii(t,a,f,c)}else o&&(Pa(t,a,o,c),s[e]=void 0)}}const ir=/(?:Once|Passive|Capture)$/;function za(t){let e;if(ir.test(t)){e={};let r;for(;r=t.match(ir);)t=t.slice(0,t.length-r[0].length),e[r[0].toLowerCase()]=!0}return[t[2]===":"?t.slice(3):$e(t.slice(2)),e]}let Kn=0;const Ba=Promise.resolve(),Da=()=>Kn||(Ba.then(()=>Kn=0),Kn=Date.now());function $a(t,e){const n=r=>{if(!r._vts)r._vts=Date.now();else if(r._vts<=n.attached)return;te(La(r,n.value),e,5,[r])};return n.value=t,n.attached=Da(),n}function La(t,e){if(ht(e)){const n=t.stopImmediatePropagation;return t.stopImmediatePropagation=()=>{n.call(t),t._stopped=!0},e.map(r=>i=>!i._stopped&&r&&r(i))}else return e}const or=/^on[a-z]/,Ua=(t,e,n,r,i=!1,s,o,a,c)=>{e==="class"?Ta(t,r,i):e==="style"?Ia(t,n,r):Sn(e)?cs(e)||Oa(t,e,n,r,o):(e[0]==="."?(e=e.slice(1),!0):e[0]==="^"?(e=e.slice(1),!1):Ma(t,e,r,i))?Aa(t,e,r,s,o,a,c):(e==="true-value"?t._trueValue=r:e==="false-value"&&(t._falseValue=r),Sa(t,e,r,i))};function Ma(t,e,n,r){return r?!!(e==="innerHTML"||e==="textContent"||e in t&&or.test(e)&&gt(n)):e==="spellcheck"||e==="draggable"||e==="translate"||e==="form"||e==="list"&&t.tagName==="INPUT"||e==="type"&&t.tagName==="TEXTAREA"||or.test(e)&&Bt(n)?!1:e in t}const ar=t=>{const e=t.props["onUpdate:modelValue"]||!1;return ht(e)?n=>mn(e,n):e},Ra={deep:!0,created(t,{value:e,modifiers:{number:n}},r){const i=An(e);ii(t,"change",()=>{const s=Array.prototype.filter.call(t.options,o=>o.selected).map(o=>n?pr(In(o)):In(o));t._assign(t.multiple?i?new Set(s):s:s[0])}),t._assign=ar(r)},mounted(t,{value:e}){lr(t,e)},beforeUpdate(t,e,n){t._assign=ar(n)},updated(t,{value:e}){lr(t,e)}};function lr(t,e){const n=t.multiple;if(!(n&&!ht(e)&&!An(e))){for(let r=0,i=t.options.length;r<i;r++){const s=t.options[r],o=In(s);if(n)ht(e)?s.selected=Ei(e,o)>-1:s.selected=e.has(o);else if(On(In(s),e)){t.selectedIndex!==r&&(t.selectedIndex=r);return}}!n&&t.selectedIndex!==-1&&(t.selectedIndex=-1)}}function In(t){return"_value"in t?t._value:t.value}const Fa=["ctrl","shift","alt","meta"],ja={stop:t=>t.stopPropagation(),prevent:t=>t.preventDefault(),self:t=>t.target!==t.currentTarget,ctrl:t=>!t.ctrlKey,shift:t=>!t.shiftKey,alt:t=>!t.altKey,meta:t=>!t.metaKey,left:t=>"button"in t&&t.button!==0,middle:t=>"button"in t&&t.button!==1,right:t=>"button"in t&&t.button!==2,exact:(t,e)=>Fa.some(n=>t[`${n}Key`]&&!e.includes(n))},jn=(t,e)=>(n,...r)=>{for(let i=0;i<e.length;i++){const s=ja[e[i]];if(s&&s(n,e))return}return t(n,...r)},At={beforeMount(t,{value:e},{transition:n}){t._vod=t.style.display==="none"?"":t.style.display,n&&e?n.beforeEnter(t):je(t,e)},mounted(t,{value:e},{transition:n}){n&&e&&n.enter(t)},updated(t,{value:e,oldValue:n},{transition:r}){!e!=!n&&(r?e?(r.beforeEnter(t),je(t,!0),r.enter(t)):r.leave(t,()=>{je(t,!1)}):je(t,e))},beforeUnmount(t,{value:e}){je(t,e)}};function je(t,e){t.style.display=e?t._vod:"none"}const Na=Lt({patchProp:Ua},Ca);let cr;function Ha(){return cr||(cr=sa(Na))}const Wa=(...t)=>{const e=Ha().createApp(...t),{mount:n}=e;return e.mount=r=>{const i=Za(r);if(!i)return;const s=e._component;!gt(s)&&!s.render&&!s.template&&(s.template=i.innerHTML),i.innerHTML="";const o=n(i,!1,i instanceof SVGElement);return i instanceof Element&&(i.removeAttribute("v-cloak"),i.setAttribute("data-v-app","")),o},e};function Za(t){return Bt(t)?document.querySelector(t):t}const Ka={class:"relative flex flex-wrap justify-center w-full gap-2"},Va={class:"relative flex flex-wrap justify-center w-full gap-2"},qa=["onClick"],Ja=ge({__name:"Toolbar",props:{pluginList:{},pluginTags:{},activeCategory:{}},emits:["update-active-category"],setup(t){const e=t,n=dt(!1),r=()=>{n.value=!n.value};return(i,s)=>(pt(),wt("div",Ka,[y("button",{class:Pt(["inline-flex items-center border-2 shadow-md justify-center px-4 py-2 font-sans text-sm transition-colors duration-300 rounded-lg bg-muted-200 dark:bg-muted-800 text-muted-500 hover:bg-muted-300 dark:hover:bg-muted-700 dark:hover:text-muted-200 tw-accessibility",i.activeCategory==="all"?"border-primary-500 bg-muted-50 dark:bg-muted-700":"border-transparent "]),onClick:s[0]||(s[0]=o=>i.$emit("update-active-category","all"))}," All ",2),y("button",{class:"inline-flex w-full items-center shadow-md justify-center px-4 py-2 font-sans text-sm transition-colors duration-300 rounded-lg bg-muted-200 dark:bg-muted-800 text-muted-500 hover:bg-muted-300 dark:hover:bg-muted-700 dark:hover:text-muted-200 tw-accessibility",onClick:r}," 按分类筛选 ⇣ "),Et(y("div",Va,[(pt(!0),wt(Dt,null,Un(e.pluginTags,o=>(pt(),wt("div",{class:"plugin-item",key:o},[y("button",{class:Pt(["h-6 inline-flex items-center border-2 shadow-md justify-center flex-1 px-4 py-2 font-sans text-sm transition-colors duration-300 rounded-lg bg-muted-200 dark:bg-muted-800 text-muted-500 hover:bg-muted-300 dark:hover:bg-muted-700 dark:hover:text-muted-200 tw-accessibility",i.activeCategory===o?"border-primary-500 bg-muted-50 dark:bg-muted-700":"border-transparent"]),onClick:()=>{i.$emit("update-active-category",o)}},Tt(o),11,qa)]))),128))],512),[[At,n.value]])]))}}),ke=t=>(Rr("data-v-ca352705"),t=t(),Fr(),t),Ya={class:"relative"},Ga={class:"flex flex-col items-start h-full gap-4 p-6"},Xa={class:"relative w-full space-y-2"},Qa={class:"relative"},tl={class:"absolute z-1 top-3 left-3 inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-primary-500 text-white shadow-xl shadow-primary-500/20"},el={tooltip:"官方商城插件",class:"text-white absolute right-2 top-2 z-10"},nl=ke(()=>y("svg",{class:"fill-current w-5 h-5",xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 48 48","data-v-fc8a1590":"","data-icon":"arcticons:obsidian"},[y("path",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-linejoin":"round",d:"M17.133 40.912c3.155-6.394 3.071-10.982 1.722-14.24c-1.229-3.014-3.527-4.913-5.333-6.095a2.3 2.3 0 0 1-.167.503L9.11 30.526c-.44.975-.237 2.12.512 2.885l6.784 6.98c.214.213.466.39.726.52Zm8.581-12.973c.847.083 1.675.27 2.494.567c2.587.968 4.942 3.146 6.887 7.343c.14-.242.279-.474.428-.698a114 114 0 0 0 3.415-5.388a1.3 1.3 0 0 0-.093-1.461a28.2 28.2 0 0 1-3.322-5.445c-.894-2.14-1.024-5.481-1.033-7.1c0-.615-.196-1.22-.577-1.704l-6.747-8.561l-.112-.14c.493 1.629.465 2.931.158 4.113c-.28 1.099-.8 2.094-1.35 3.146c-.185.354-.372.717-.548 1.089a13 13 0 0 0-1.47 5.398c-.094 2.252.362 5.072 1.86 8.84z"}),y("path",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-linejoin":"round",d:"M25.704 27.939c-1.498-3.77-1.954-6.59-1.86-8.841c.092-2.234.744-3.91 1.47-5.398l.558-1.09c.54-1.05 1.052-2.047 1.34-3.145a7.3 7.3 0 0 0-.158-4.113a2.606 2.606 0 0 0-3.667-.186l-8.022 7.212c-.45.403-.746.949-.838 1.545L13.55 20.4c0 .065-.019.121-.028.186c1.806 1.173 4.095 3.072 5.333 6.078c.242.595.447 1.219.595 1.898a18.6 18.6 0 0 1 6.254-.633z"}),y("path",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-linejoin":"round",d:"M29.91 43.406c1.732.475 3.472-.912 3.714-2.699c.198-1.695.7-3.34 1.48-4.858c-1.954-4.197-4.309-6.375-6.887-7.343c-2.745-1.023-5.733-.68-8.767.056c.68 3.08.28 7.11-2.308 12.35c.289.149.615.232.94.26l4.086.307c2.215.159 5.519 1.303 7.743 1.927Z"})],-1)),sl=[nl],rl={tooltip:"社区专供插件",class:"absolute right-2 top-2 z-10"},il=ke(()=>y("svg",{class:"fill-current w-5 h-5",xmlns:"http://www.w3.org/2000/svg",version:"1.1","xmlns:xlink":"http://www.w3.org/1999/xlink","xmlns:svgjs":"http://svgjs.com/svgjs",viewBox:"0 0 512 512","xml:space":"preserve"},[y("g",null,[y("path",{d:"M395.631 98.837C358.783 45.867 309.195 16.696 256 16.696S153.217 45.867 116.369 98.837c-35.565 51.124-55.151 118.797-55.151 190.554 0 113.54 87.379 205.913 194.783 205.913s194.783-92.373 194.783-205.913c-.001-71.756-19.588-139.43-55.153-190.554z",style:{},fill:"#ffc170",class:""}),y("path",{d:"M256 495.304c107.403 0 194.783-92.373 194.783-205.913 0-71.757-19.586-139.43-55.151-190.554C358.783 45.867 309.195 16.696 256 16.696",style:{},fill:"#e1a05a","data-original":"#ffd6a0",class:""}),y("path",{d:"M0 128h55.652v33.391H0z",style:{},fill:"#a0bdd4",class:""}),y("path",{d:"M13.053 51.94h55.65v33.391h-55.65z",style:{},transform:"rotate(-160.527 40.878 68.636)",fill:"#a0bdd4",class:""}),y("path",{d:"M456.348 128H512v33.391h-55.652z",style:{},fill:"#a0bdd4",class:""}),y("path",{d:"M454.411 40.807h33.391v55.65h-33.391z",style:{},transform:"rotate(-109.469 471.111 68.636)",fill:"#a0bdd4",class:""}),y("path",{d:"m187.719 277.315 14.949-29.896-47.598-21.154-93.659 51.085c-.124 4-.194 8.013-.194 12.041 0 8.564.505 17.005 1.471 25.298l93.892-51.214 31.139 13.84zM450.63 278.997l-105.587-52.794-89.463 44.731-22.369-9.942-14.948 29.896 38.155 16.958 88.625-44.31 104.166 52.083a218.592 218.592 0 0 0 1.573-26.228c.001-3.476-.059-6.938-.152-10.394z",style:{},fill:"#f8f8f8",class:""}),y("path",{d:"m450.63 278.997-105.587-52.794-89.463 44.731.839 36.913 88.624-44.31 104.166 52.083a218.592 218.592 0 0 0 1.573-26.228 382.07 382.07 0 0 0-.152-10.395z",style:{},fill:"#fef5ea",class:""})])],-1)),ol=[il],al=["data-name"],ll=["data-name","alt","src"],cl=["src"],ul={class:"relative flex items-center h-10 overflow-hidden plugin_name"},dl={"data-pagefind-meta":"title",class:"flex items-center text-lg font-medium leading-6 plugin_name font-heading text-muted-800 dark:text-white"},fl=["href"],hl={class:"-mt-2 ml-2 px-2 rounded text-muted-100 bg-green-600 text-xs"},pl={class:"-mt-2 text-orange-500 ml-2 text-lg font-serif font-bold italic"},ml=ke(()=>y("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-v-35974737":"","data-icon":"mdi:temperature-celsius",class:"-mt-2 text-orange-500 iconify w-4 h-4 iconify--mdi"},[y("path",{fill:"currentColor",d:"M16.5 5c1.55 0 3 .47 4.19 1.28l-1.16 2.89A4.47 4.47 0 0 0 16.5 8C14 8 12 10 12 12.5s2 4.5 4.5 4.5c1.03 0 1.97-.34 2.73-.92l1.14 2.85A7.47 7.47 0 0 1 16.5 20A7.5 7.5 0 0 1 9 12.5A7.5 7.5 0 0 1 16.5 5M6 3a3 3 0 0 1 3 3a3 3 0 0 1-3 3a3 3 0 0 1-3-3a3 3 0 0 1 3-3m0 2a1 1 0 0 0-1 1a1 1 0 0 0 1 1a1 1 0 0 0 1-1a1 1 0 0 0-1-1Z"})],-1)),gl={class:"flex flex-wrap items-center leading-6 text-muted-600 dark:text-muted-400"},vl=["src"],wl=["src"],_l=["href"],bl=ke(()=>y("span",{class:"text-white font-sans text-xs py-1 px-3 m-1 rounded-lg bg-yellow-500"}," 教程 ",-1)),yl=[bl],xl=["href"],kl=ke(()=>y("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 32 32","data-v-5df2a037":"","data-icon":"la:readme",class:"text-green-500 block mx-auto iconify w-6 h-6 iconify--la"},[y("path",{fill:"currentColor",d:"M5 6C3.346 6 2 7.346 2 9v12c0 1.654 1.346 3 3 3l6.184-.02c.99 0 1.949.31 2.773.86L16 26.2l2.043-1.361a4.988 4.988 0 0 1 2.773-.84H27c1.654 0 3-1.346 3-3V9c0-1.654-1.346-3-3-3h-6.184c-1.386 0-2.73.408-3.882 1.176L16 7.799l-.934-.623A6.978 6.978 0 0 0 11.184 6H5zm0 2h6.184c.99 0 1.949.29 2.773.84L16 10.2l2.043-1.361A4.988 4.988 0 0 1 20.816 8H27c.552 0 1 .449 1 1v12c0 .551-.448 1-1 1h-6.184c-1.386 0-2.73.408-3.882 1.176l-.934.623l-.934-.623A6.978 6.978 0 0 0 11.184 22H5c-.552 0-1-.449-1-1V9c0-.551.448-1 1-1zm1 4v2h8v-2H6zm12 0v2h8v-2h-8zM6 16v2h8v-2H6zm12 0v2h8v-2h-8z"})],-1)),Cl=[kl],Tl={class:"plugin_desc text-base mt-auto min-h-[3rem] text-muted-600 dark:text-muted-400 leading-6"},Il={class:"w-full mt-auto space-y-6"},El={class:"relative flex items-center justify-start w-full"},Sl=["src","onerror"],Al=["href"],Pl={class:"pl-2"},Ol=["tooltip"],zl={class:"font-sans text-sm text-muted-400"},Bl={class:"block ml-auto font-sans text-sm text-muted-400"},Dl=ke(()=>y("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round",class:"svg-icon lucide-download"},[y("path",{d:"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}),y("polyline",{points:"7 10 12 15 17 10"}),y("line",{x1:"12",y1:"15",x2:"12",y2:"3"})],-1)),$l=ke(()=>y("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 20 20","data-v-5ade68da":"","data-icon":"dashicons:update",class:"block w-4 h-4 mx-auto iconify iconify--dashicons"},[y("path",{fill:"currentColor",d:"M10.2 3.28c3.53 0 6.43 2.61 6.92 6h2.08l-3.5 4l-3.5-4h2.32a4.439 4.439 0 0 0-4.32-3.45c-1.45 0-2.73.71-3.54 1.78L4.95 5.66a6.965 6.965 0 0 1 5.25-2.38zm-.4 13.44c-3.52 0-6.43-2.61-6.92-6H.8l3.5-4c1.17 1.33 2.33 2.67 3.5 4H5.48a4.439 4.439 0 0 0 4.32 3.45c1.45 0 2.73-.71 3.54-1.78l1.71 1.95a6.95 6.95 0 0 1-5.25 2.38z"})],-1)),Ll=["tooltip"],Ul={xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Ml=["fill"],Rl=ge({__name:"PluginCard",props:{app:{},pluginInfo:{},isLogin:{type:Boolean}},emits:["download-update-plugin"],setup(t){const e=t,n=e.isLogin,r=dt(!1),i=dt(""),s=dt("rgba(255, 51, 68, 0.8)");function o(){return e.pluginInfo.authorAvatar&&e.pluginInfo.authorAvatar.length>0?e.pluginInfo.authorAvatar:u(e.pluginInfo.author)}let a=[];e.pluginInfo.tags&&e.pluginInfo.tags.length>0&&(a=e.pluginInfo.tags.split(","));function c(m){return m>=1e6?(m/1e6).toFixed(0)+"M":m>=1e3?(m/1e3).toFixed(0)+"K":m.toString()}function f(m){if(m){const w=new Date(m),C=new Date,A=24*60*60*1e3,I=Math.round(Math.abs((C.getTime()-w.getTime())/A)),z=Math.round(I/30),K=Math.round(I/365);return I<=30?`${I}天前`:z<=12?`${z}月前`:`${K}年前`}else return"未知"}const b=()=>i.value=="未启用"?"当前插件未启用，点击启用":i.value=="已启用"?"当前插件已启动，点击禁用":"未成功启用。请查看控制台错误信息。",g=async m=>{i.value=="已启用"?(await e.app.plugins.disablePluginAndSave(m),i.value="未启用",s.value="rgba(255, 51, 68, 0.8)"):await e.app.plugins.enablePluginAndSave(m)?(i.value="已启用",s.value="#2aa330"):i.value="未成功"};Array.from(app.plugins.enabledPlugins).indexOf(e.pluginInfo.id)!=-1&&e.pluginInfo.isInstalled&&(i.value="已启用",s.value="#2aa330"),Array.from(app.plugins.enabledPlugins).indexOf(e.pluginInfo.id)==-1&&e.pluginInfo.isInstalled&&(i.value="未启用",s.value="rgba(255, 51, 68, 0.8)");function v(m){return(m.match(/\b\w/g)||[]).join("").toUpperCase()}function u(m){let w="";if(m){const C=v(m);/^[a-zA-Z]+$/.test(C)?w=`https://dummyimage.com/100x100/555/fff&text=${C.toUpperCase()}`:w=`https://dummyimage.com/100x100/555/ffff&text=${encodeURIComponent(C)}`}else w="https://cdn.pkmer.cn/covers/logo.png!nomark";return w}const x=()=>`background-image:url(${`https://pkmer.cn/img/cover/${Math.floor(Math.random()*11)}.jpg`});`,h=()=>{e.app.setting.open(),e.app.setting.openTabById("pkmer")};return(m,w)=>(pt(),wt("div",Ya,[y("div",Ga,[y("div",Xa,[y("div",Qa,[y("span",tl,Tt(Mt(a)[0]),1),Et(y("view",el,sl,512),[[At,m.pluginInfo.source=="official"]]),Et(y("view",rl,ol,512),[[At,m.pluginInfo.source=="community"]]),y("span",{"data-name":m.pluginInfo.banner?"":m.pluginInfo.name,class:"noimg h-40 md:h-52",style:en(x())},[y("img",{"data-name":m.pluginInfo.name,alt:m.pluginInfo.name,class:"border-0 absolute rounded-lg w-[200px] md:w-[300px] max-h-[148px] object-contain cursor-pointer",width:"348",height:"208",src:m.pluginInfo.banner?m.pluginInfo.banner.replace("!pkmer","!nomark"):"",loading:"lazy",decoding:"async",onClick:w[0]||(w[0]=C=>r.value=!0)},null,8,ll)],12,al),r.value?(pt(),wt("div",{key:0,class:"overlay",onClick:w[2]||(w[2]=C=>r.value=!1)},[y("img",{src:m.pluginInfo.banner?.replace("!nomark","!pkmer").replace("gif!pkmer","gif"),alt:"原图",onClick:w[1]||(w[1]=jn(()=>{},["stop"]))},null,8,cl)])):ue("",!0)]),y("div",ul,[y("h3",dl,[y("a",{href:m.pluginInfo.contentUrl?m.pluginInfo.contentUrl:m.pluginInfo.readme_zh?m.pluginInfo.readme_zh:"#"},Tt(m.pluginInfo.name),9,fl),y("span",hl,Tt(m.pluginInfo.version),1),y("span",pl,Tt(c(m.pluginInfo.pkmerDownloadCount)),1),ml])]),y("p",gl,[y("img",{class:"h-full",alt:"GitHub stars",src:`https://img.shields.io/github/stars/${m.pluginInfo.repo}?style=plastic&color=4F46E5&label=关注量`},null,8,vl),y("img",{class:"h-full ml-2",alt:"下载数量",src:`https://img.shields.io/badge/下载总数-${c(m.pluginInfo.downloadCount)}-yellow`},null,8,wl),Et(y("a",{class:"ml-2",href:m.pluginInfo.contentUrl?m.pluginInfo.contentUrl:"javascript:void(0)"},yl,8,_l),[[At,m.pluginInfo.contentUrl]]),Et(y("a",{class:"ml-2",href:m.pluginInfo.readme_zh?m.pluginInfo.readme_zh:"javascript:void(0)",tooltip:"Readme文档"},Cl,8,xl),[[At,m.pluginInfo.readme_zh]])]),y("p",Tl,Tt(m.pluginInfo.chineseDescription?.replace("【机翻】","")||m.pluginInfo.description),1)]),y("div",Il,[y("div",El,[y("img",{class:"w-12 mask mask-blob",src:o(),onerror:`javascript:this.src='${u(m.pluginInfo.author)}'`,alt:"avatar"},null,8,Sl),y("a",{href:"https://github.com/"+m.pluginInfo.repo},[y("div",Pl,[y("h3",{class:"whitespace-nowrap text-ellipsis overflow-hidden max-w-[140px] font-heading font-medium text-muted-800 dark:text-muted-50",tooltip:m.pluginInfo.author},Tt(m.pluginInfo.author),9,Ol),y("p",zl,Tt(f(m.pluginInfo.pluginUpdatedTime)),1)])],8,Al),y("div",Bl,[Et(y("button",{onClick:h,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility"}," 请登录 ",512),[[At,!Mt(n)]]),Et(y("div",null,[m.pluginInfo.isInstalled?m.pluginInfo.isInstalled&&m.pluginInfo.isOutdated?(pt(),wt("button",{key:1,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility",onClick:w[4]||(w[4]=C=>m.$emit("download-update-plugin","update",m.pluginInfo.id,m.pluginInfo.version,m.pluginInfo.source))},[$l,Ft(" 更新 ")])):(pt(),wt("button",{key:2,onClick:w[5]||(w[5]=C=>g(m.pluginInfo.id)),tooltip:b(),class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility"},[(pt(),wt("svg",Ul,[y("path",{fill:s.value,d:"M8 4c.367 0 .721.048 1.063.145a3.943 3.943 0 0 1 1.762 1.031a3.944 3.944 0 0 1 1.03 1.762c.097.34.145.695.145 1.062c0 .367-.048.721-.145 1.063a3.94 3.94 0 0 1-1.03 1.765a4.017 4.017 0 0 1-1.762 1.031C8.72 11.953 8.367 12 8 12s-.721-.047-1.063-.14a4.056 4.056 0 0 1-1.765-1.032A4.055 4.055 0 0 1 4.14 9.062A3.992 3.992 0 0 1 4 8c0-.367.047-.721.14-1.063a4.02 4.02 0 0 1 .407-.953A4.089 4.089 0 0 1 5.98 4.546a3.94 3.94 0 0 1 .957-.401A3.89 3.89 0 0 1 8 4z"},null,8,Ml)])),Ft(" 已安装 ")],8,Ll)):Et((pt(),wt("button",{key:0,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility",onClick:w[3]||(w[3]=C=>m.$emit("download-update-plugin","download",m.pluginInfo.id,m.pluginInfo.version,m.pluginInfo.source))},[Dl,Ft(" 下载 ")],512)),[[At,Mt(n)]])],512),[[At,Mt(n)]])])])])])]))}});const oi=(t,e)=>{const n=t.__vccOpts||t;for(const[r,i]of e)n[r]=i;return n},Fl=oi(Rl,[["__scopeId","data-v-ca352705"]]),Me=t=>(Rr("data-v-1a6e40f1"),t=t(),Fr(),t),jl={class:"relative"},Nl={class:"h-full flex flex-col items-start gap-4 p-6"},Hl={class:"relative w-full space-y-2"},Wl={class:"relative"},Zl={class:"mark"},Kl=Me(()=>y("span",{class:"learn"},"Tips ",-1)),Vl=[Kl],ql=["data-name"],Jl=["src","alt"],Yl=["src"],Gl={class:"plugin_name relative flex items-center h-10 overflow-hidden"},Xl={"data-pagefind-meta":"title",class:"flex items-center font-heading text-lg font-medium text-muted-800 dark:text-white leading-6"},Ql=["src"],tc={class:"-mt-2 text-orange-500 ml-2 text-lg font-serif font-bold italic"},ec=Me(()=>y("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-v-35974737":"","data-icon":"mdi:temperature-celsius",class:"-mt-2 text-orange-500 iconify w-4 h-4 iconify--mdi"},[y("path",{fill:"currentColor",d:"M16.5 5c1.55 0 3 .47 4.19 1.28l-1.16 2.89A4.47 4.47 0 0 0 16.5 8C14 8 12 10 12 12.5s2 4.5 4.5 4.5c1.03 0 1.97-.34 2.73-.92l1.14 2.85A7.47 7.47 0 0 1 16.5 20A7.5 7.5 0 0 1 9 12.5A7.5 7.5 0 0 1 16.5 5M6 3a3 3 0 0 1 3 3a3 3 0 0 1-3 3a3 3 0 0 1-3-3a3 3 0 0 1 3-3m0 2a1 1 0 0 0-1 1a1 1 0 0 0 1 1a1 1 0 0 0 1-1a1 1 0 0 0-1-1Z"})],-1)),nc={class:"flex items-center flex-wrap leading-6 text-muted-600 dark:text-muted-400"},sc=["src"],rc=["src"],ic=["href"],oc=Me(()=>y("span",{class:"text-white font-sans text-xs py-1 px-3 m-1 rounded-lg bg-yellow-500"}," 教程 ",-1)),ac=[oc],lc={class:"w-full mt-auto space-y-6"},cc={class:"flex items-center justify-start w-full relative"},uc=["src","onerror"],dc=["href"],fc={class:"pl-2"},hc=["tooltip"],pc={class:"block ml-auto font-sans text-sm text-muted-400"},mc=Me(()=>y("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round",class:"svg-icon lucide-download"},[y("path",{d:"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}),y("polyline",{points:"7 10 12 15 17 10"}),y("line",{x1:"12",y1:"15",x2:"12",y2:"3"})],-1)),gc=Me(()=>y("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 20 20","data-v-5ade68da":"","data-icon":"dashicons:update",class:"block w-4 h-4 mx-auto iconify iconify--dashicons"},[y("path",{fill:"currentColor",d:"M10.2 3.28c3.53 0 6.43 2.61 6.92 6h2.08l-3.5 4l-3.5-4h2.32a4.439 4.439 0 0 0-4.32-3.45c-1.45 0-2.73.71-3.54 1.78L4.95 5.66a6.965 6.965 0 0 1 5.25-2.38zm-.4 13.44c-3.52 0-6.43-2.61-6.92-6H.8l3.5-4c1.17 1.33 2.33 2.67 3.5 4H5.48a4.439 4.439 0 0 0 4.32 3.45c1.45 0 2.73-.71 3.54-1.78l1.71 1.95a6.95 6.95 0 0 1-5.25 2.38z"})],-1)),vc=Me(()=>y("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 48 48","data-v-5ade68da":"","data-icon":"icon-park-outline:link-cloud-sucess",class:"block w-4 h-4 mx-auto iconify iconify--icon-park-outline"},[y("g",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"4"},[y("path",{d:"M12 33c-3.333 0-8-1.5-8-7.5c0-7 7-8.5 9-8.5c1-3.5 3-9 11-9c7 0 10 4 11 7.5c0 0 9 1 9 9.5c0 6-4 8-8 8"}),y("path",{d:"m18 33l6 5l8-10"})])],-1)),wc=ge({__name:"ThemeCard",props:{app:{},themeInfo:{},isLogin:{type:Boolean}},emits:["download-update-theme"],setup(t){const e=t,n=e.isLogin;function r(){return e.themeInfo.authorAvatar&&e.themeInfo.authorAvatar.length>0?e.themeInfo.authorAvatar:c(e.themeInfo.author)}const i=dt(!1);let s=[];e.themeInfo.tags&&e.themeInfo.tags.length>0&&(s=e.themeInfo.tags.split(","));function o(v){return v>=1e6?(v/1e6).toFixed(0)+"M":v>=1e3?(v/1e3).toFixed(0)+"K":v.toString()}function a(v){return(v.match(/\b\w/g)||[]).join("").toUpperCase()}function c(v){let u="";if(v){const x=a(v);/^[a-zA-Z]+$/.test(x)?u=`https://dummyimage.com/100x100/555/fff&text=${x.toUpperCase()}`:u=`https://dummyimage.com/100x100/555/ffff&text=${encodeURIComponent(x)}`}else u="https://cdn.pkmer.cn/covers/logo.png!nomark";return u}const f=async v=>{await e.app.customCss.setTheme(v)},b=()=>`background-image:url(${`https://pkmer.cn/img/cover/${Math.floor(Math.random()*11)}.jpg`});`,g=()=>{e.app.setting.open(),e.app.setting.openTabById("pkmer")};return(v,u)=>(pt(),wt("div",jl,[y("div",Nl,[y("div",Hl,[y("div",Wl,[Et(y("span",{class:"absolute top-3 left-3 inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-primary-500 text-white shadow-xl shadow-primary-500/20"},Tt(Mt(s)[0]),513),[[At,Mt(s)[0]]]),Et(y("view",Zl,Vl,512),[[At,v.themeInfo.contentUrl]]),Et(y("div",{class:"noimg h-40 md:h-52","data-name":v.themeInfo.name,style:en(b())},null,12,ql),[[At,!v.themeInfo.banner]]),Et(y("img",{class:"w-full h-52 object-contain aspect-video rounded-xl cursor-pointer",src:v.themeInfo.banner?.replace("gif!pkmer","gif").replace("!pkmer","!nomark"),alt:v.themeInfo.name,width:"348",height:"208",onerror:"javascript:this.src='https://cdn.pkmer.cn/covers/pkmer2.png!nomark';this.οnerrοr=null;",onClick:u[0]||(u[0]=x=>i.value=!0)},null,8,Jl),[[At,v.themeInfo.banner]]),i.value?(pt(),wt("div",{key:0,class:"overlay",onClick:u[2]||(u[2]=x=>i.value=!1)},[y("img",{src:v.themeInfo.banner?.replace("!nomark","!pkmer"),alt:"原图",onClick:u[1]||(u[1]=jn(()=>{},["stop"]))},null,8,Yl)])):ue("",!0)]),y("div",Gl,[y("h3",Xl,[Ft(Tt(v.themeInfo.name)+" ",1),y("img",{class:"-mt-2 ml-2",alt:"version",src:`https://img.shields.io/badge/${v.themeInfo.version}-brightgreen`},null,8,Ql),y("span",tc,Tt(o(v.themeInfo.pkmerDownloadCount)),1),ec])]),y("p",nc,[y("img",{class:"h-ful",alt:"GitHub stars",src:`https://img.shields.io/github/stars/${v.themeInfo.repo}?style=plastic&color=4F46E5&label=关注量`},null,8,sc),y("img",{class:"h-ful ml-2",alt:"下载数量",src:`https://img.shields.io/badge/下载总数-${o(v.themeInfo.downloadCount)}-yellow`},null,8,rc),y("a",{class:Pt(["ml-2",{visible:v.themeInfo.contentUrl,invisible:!v.themeInfo.contentUrl}]),href:v.themeInfo.contentUrl?v.themeInfo.contentUrl:"javascript:void(0)"},ac,10,ic)]),Et(y("p",{class:"plugin_desc text-base mt-auto min-h-[3rem] text-muted-600 dark:text-muted-400 leading-6"},Tt(v.themeInfo.chineseDescription?.replace("【机翻】","")||v.themeInfo.description),513),[[At,v.themeInfo.description]])]),y("div",lc,[y("div",cc,[y("img",{class:"w-12 mask mask-blob",src:r(),onerror:`javascript:this.src='${c(v.themeInfo.author)}'`,alt:"avatar"},null,8,uc),y("a",{href:"https://github.com/"+v.themeInfo.repo},[y("div",fc,[y("h3",{class:"whitespace-nowrap text-ellipsis overflow-hidden max-w-[140px] font-heading font-medium text-muted-800 dark:text-muted-50",tooltip:v.themeInfo.author},Tt(v.themeInfo.author),9,hc)])],8,dc),y("div",pc,[Et(y("button",{onClick:g,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility"}," 请登录 ",512),[[At,!Mt(n)]]),Et(y("div",null,[v.themeInfo.isInstalled?v.themeInfo.isInstalled&&v.themeInfo.isOutdated?(pt(),wt("button",{key:1,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility",onClick:u[4]||(u[4]=x=>v.$emit("download-update-theme","update",v.themeInfo.name,v.themeInfo.version))},[gc,Ft(" 更新 ")])):(pt(),wt("button",{key:2,onClick:u[5]||(u[5]=x=>f(v.themeInfo.name)),tooltip:"主题已安装，应用当前主题",flow:"down",class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility"},[vc,Ft(" 应用 ")])):Et((pt(),wt("button",{key:0,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility",onClick:u[3]||(u[3]=x=>v.$emit("download-update-theme","download",v.themeInfo.name,v.themeInfo.version))},[mc,Ft(" 下载 ")],512)),[[At,Mt(n)]])],512),[[At,Mt(n)]])])])])])]))}});const ai=oi(wc,[["__scopeId","data-v-1a6e40f1"]]),Kt="https://api.pkmer.cn/api/v1/download/obsidian";class Ce{token;constructor(e){this.token=e}fetchWithToken(e,n){return fetch(e,{...n,headers:{Authorization:"Bearer "+this.token}})}isTokenExpired(e){return Math.floor(Date.now()/1e3)>e.exp}async isUserLogin(){const e=this.token;if(!e)return!1;try{const n=e.split(".");if(n.length<2||!n[1])return console.error("Pkmer Token is malformed: does not contain enough parts."),!1;const i=n[1].replace(/-/g,"+").replace(/_/g,"/"),s=window.atob(i);if(!s)return console.error("Pkmer Token is malformed: payload could not be base64 decoded."),!1;const o=JSON.parse(decodeURIComponent(escape(s)));return this.isTokenExpired(o)?(console.log("Pkmer Token has expired. Please log in again to get a new token."),!1):!0}catch(n){return console.error("Error processing Pkmer Token (likely malformed or corrupted):",n),!1}}async getPkmerDocs(){const e=await lt.requestUrl("https://pkmer.cn/getPost.json");return JSON.parse(e.text).map(r=>({slug:r.slug.split("/").pop(),uid:r.uid,authorAvatar:r.authorAvatar,description:r.description,tags:Array.isArray(r.tags)?r.tags.join(", "):r.tags}))}async getDownloadUrl(e,n){return e=="obsidian-pkmer"?`https://pkmer.cn/_release/obsidian-pkmer.zip?v=${n}`:await(await this.fetchWithToken(Kt+"/getPluginDownloadUrl/"+e+"/"+n,{method:"GET"})).text()}async getDownloadCount(){const e=await this.fetchWithToken(Kt+"/getPluginDownloadCount");return parseInt(await e.text())+1}async getTop20Plugins(){const e=localStorage.getItem("top20Plugins"),n=localStorage.getItem("top20PluginsExpiry"),r=new Date().getTime();if(e&&n&&r<+n)return JSON.parse(e);{const s=await(await this.fetchWithToken(Kt+"/getTop20Plugins")).json();return localStorage.setItem("top20Plugins",JSON.stringify(s)),localStorage.setItem("top20PluginsExpiry",String(r+8*60*60*1e3)),s}}async searchPlugins(e){return await(await this.fetchWithToken(Kt+"/searchPlugins?keyword="+e+"&limit=10",{method:"GET"})).json()}async getPluginListPaginated(e=1,n=24,r="downloadCount",i="DESC"){try{const o=await(await this.fetchWithToken(`${Kt}/getPluginsPaginated?page=${e}&limit=${n}&sortBy=${r}&sortOrder=${i}`,{method:"GET"})).json();return{plugins:o.data,total:o.meta.total,totalPages:o.meta.totalPages}}catch(s){throw console.error("Error fetching paginated plugin list:",s),s}}async searchPluginsPaginated(e,n=1,r=24,i="downloadCount",s="DESC"){try{const a=await(await this.fetchWithToken(`${Kt}/searchPluginsPaginated?searchText=${encodeURIComponent(e)}&page=${n}&limit=${r}&sortBy=${i}&sortOrder=${s}`,{method:"GET"})).json();return{plugins:a.data,total:a.meta.total,totalPages:a.meta.totalPages}}catch(o){throw console.error("Error searching plugins with pagination:",o),o}}async getTop20Themes(){const e=localStorage.getItem("top20Themes"),n=localStorage.getItem("top20ThemesExpiry"),r=new Date().getTime();if(e&&n&&r<+n)return JSON.parse(e);{const s=await(await this.fetchWithToken(Kt+"/getTop20Themes")).json();return localStorage.setItem("top20Themes",JSON.stringify(s)),localStorage.setItem("top20ThemesExpiry",String(r+8*60*60*1e3)),s}}async getThemeList(e=1*60*60*1e3){const n=localStorage.getItem("themeList"),r=localStorage.getItem("themeListExpiry"),i=new Date().getTime();if(n&&r&&i<+r)return JSON.parse(n);try{const o=await(await this.fetchWithToken(Kt+"/getAllThemes",{method:"GET"})).json();return localStorage.setItem("themeList",JSON.stringify(o)),localStorage.setItem("themeListExpiry",String(i+e)),o}catch(s){throw console.error("Error fetching theme list:",s),s}}async getThemeListPaginated(e=1,n=24,r="downloadCount",i="DESC"){try{const o=await(await this.fetchWithToken(`${Kt}/getThemesPaginated?page=${e}&limit=${n}&sortBy=${r}&sortOrder=${i}`,{method:"GET"})).json();return{themes:o.data,total:o.meta.total,totalPages:o.meta.totalPages}}catch(s){throw console.error("Error fetching paginated theme list:",s),s}}async searchThemesPaginated(e,n=1,r=24,i="downloadCount",s="DESC"){try{const a=await(await this.fetchWithToken(`${Kt}/searchThemesPaginated?searchText=${encodeURIComponent(e)}&page=${n}&limit=${r}&sortBy=${i}&sortOrder=${s}`,{method:"GET"})).json();return{themes:a.data,total:a.meta.total,totalPages:a.meta.totalPages}}catch(o){throw console.error("Error searching themes with pagination:",o),o}}async getThemeDownloadUrl(e,n){return await(await this.fetchWithToken(Kt+"/getThemeDownloadUrl/"+e+"/"+n,{method:"GET"})).text()}async getPkmerVersion(){const e=Math.random(),n=await lt.requestUrl(`https://pkmer.cn/_release/manifest.json?_=${e}`);return JSON.parse(n.text).version}async getPluginTags(){try{return await(await this.fetchWithToken(`${Kt}/getPluginTags`,{method:"GET"})).json()}catch(e){return console.error("Error fetching plugin tags:",e),[]}}async getInstalledPluginsPaginated(e,n=1,r=24,i="downloadCount",s="DESC"){if(!e?.length)throw new Error("插件ID列表不能为空");try{const o=await this.fetchWithToken(`${Kt}/getInstalledPluginsPaginated?page=${n}&pageSize=${r}&sortBy=${i}&sortOrder=${s}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({pluginIds:e})}),a=await o.json();if(!o.ok)throw new Error(a.message||"请求失败");return{plugins:a?.data,total:a.meta?.total||0,totalPages:a.meta?.totalPages||1}}catch(o){throw console.error("Error fetching installed plugins:",o),o}}}var fn=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function hn(t){throw new Error('Could not dynamically require "'+t+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var li={exports:{}};/*!

JSZip v3.10.1 - A JavaScript class for generating and reading zip files
<http://stuartk.com/jszip>

(c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>
Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/main/LICENSE.markdown.

JSZip uses the library pako released under the MIT license :
https://github.com/nodeca/pako/blob/main/LICENSE
*/(function(t,e){(function(n){t.exports=n()})(function(){return function n(r,i,s){function o(f,b){if(!i[f]){if(!r[f]){var g=typeof hn=="function"&&hn;if(!b&&g)return g(f,!0);if(a)return a(f,!0);var v=new Error("Cannot find module '"+f+"'");throw v.code="MODULE_NOT_FOUND",v}var u=i[f]={exports:{}};r[f][0].call(u.exports,function(x){var h=r[f][1][x];return o(h||x)},u,u.exports,n,r,i,s)}return i[f].exports}for(var a=typeof hn=="function"&&hn,c=0;c<s.length;c++)o(s[c]);return o}({1:[function(n,r,i){var s=n("./utils"),o=n("./support"),a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";i.encode=function(c){for(var f,b,g,v,u,x,h,m=[],w=0,C=c.length,A=C,I=s.getTypeOf(c)!=="string";w<c.length;)A=C-w,g=I?(f=c[w++],b=w<C?c[w++]:0,w<C?c[w++]:0):(f=c.charCodeAt(w++),b=w<C?c.charCodeAt(w++):0,w<C?c.charCodeAt(w++):0),v=f>>2,u=(3&f)<<4|b>>4,x=1<A?(15&b)<<2|g>>6:64,h=2<A?63&g:64,m.push(a.charAt(v)+a.charAt(u)+a.charAt(x)+a.charAt(h));return m.join("")},i.decode=function(c){var f,b,g,v,u,x,h=0,m=0,w="data:";if(c.substr(0,w.length)===w)throw new Error("Invalid base64 input, it looks like a data url.");var C,A=3*(c=c.replace(/[^A-Za-z0-9+/=]/g,"")).length/4;if(c.charAt(c.length-1)===a.charAt(64)&&A--,c.charAt(c.length-2)===a.charAt(64)&&A--,A%1!=0)throw new Error("Invalid base64 input, bad content length.");for(C=o.uint8array?new Uint8Array(0|A):new Array(0|A);h<c.length;)f=a.indexOf(c.charAt(h++))<<2|(v=a.indexOf(c.charAt(h++)))>>4,b=(15&v)<<4|(u=a.indexOf(c.charAt(h++)))>>2,g=(3&u)<<6|(x=a.indexOf(c.charAt(h++))),C[m++]=f,u!==64&&(C[m++]=b),x!==64&&(C[m++]=g);return C}},{"./support":30,"./utils":32}],2:[function(n,r,i){var s=n("./external"),o=n("./stream/DataWorker"),a=n("./stream/Crc32Probe"),c=n("./stream/DataLengthProbe");function f(b,g,v,u,x){this.compressedSize=b,this.uncompressedSize=g,this.crc32=v,this.compression=u,this.compressedContent=x}f.prototype={getContentWorker:function(){var b=new o(s.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new c("data_length")),g=this;return b.on("end",function(){if(this.streamInfo.data_length!==g.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")}),b},getCompressedWorker:function(){return new o(s.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},f.createWorkerFrom=function(b,g,v){return b.pipe(new a).pipe(new c("uncompressedSize")).pipe(g.compressWorker(v)).pipe(new c("compressedSize")).withStreamInfo("compression",g)},r.exports=f},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(n,r,i){var s=n("./stream/GenericWorker");i.STORE={magic:"\0\0",compressWorker:function(){return new s("STORE compression")},uncompressWorker:function(){return new s("STORE decompression")}},i.DEFLATE=n("./flate")},{"./flate":7,"./stream/GenericWorker":28}],4:[function(n,r,i){var s=n("./utils"),o=function(){for(var a,c=[],f=0;f<256;f++){a=f;for(var b=0;b<8;b++)a=1&a?3988292384^a>>>1:a>>>1;c[f]=a}return c}();r.exports=function(a,c){return a!==void 0&&a.length?s.getTypeOf(a)!=="string"?function(f,b,g,v){var u=o,x=v+g;f^=-1;for(var h=v;h<x;h++)f=f>>>8^u[255&(f^b[h])];return-1^f}(0|c,a,a.length,0):function(f,b,g,v){var u=o,x=v+g;f^=-1;for(var h=v;h<x;h++)f=f>>>8^u[255&(f^b.charCodeAt(h))];return-1^f}(0|c,a,a.length,0):0}},{"./utils":32}],5:[function(n,r,i){i.base64=!1,i.binary=!1,i.dir=!1,i.createFolders=!0,i.date=null,i.compression=null,i.compressionOptions=null,i.comment=null,i.unixPermissions=null,i.dosPermissions=null},{}],6:[function(n,r,i){var s=null;s=typeof Promise<"u"?Promise:n("lie"),r.exports={Promise:s}},{lie:37}],7:[function(n,r,i){var s=typeof Uint8Array<"u"&&typeof Uint16Array<"u"&&typeof Uint32Array<"u",o=n("pako"),a=n("./utils"),c=n("./stream/GenericWorker"),f=s?"uint8array":"array";function b(g,v){c.call(this,"FlateWorker/"+g),this._pako=null,this._pakoAction=g,this._pakoOptions=v,this.meta={}}i.magic="\b\0",a.inherits(b,c),b.prototype.processChunk=function(g){this.meta=g.meta,this._pako===null&&this._createPako(),this._pako.push(a.transformTo(f,g.data),!1)},b.prototype.flush=function(){c.prototype.flush.call(this),this._pako===null&&this._createPako(),this._pako.push([],!0)},b.prototype.cleanUp=function(){c.prototype.cleanUp.call(this),this._pako=null},b.prototype._createPako=function(){this._pako=new o[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var g=this;this._pako.onData=function(v){g.push({data:v,meta:g.meta})}},i.compressWorker=function(g){return new b("Deflate",g)},i.uncompressWorker=function(){return new b("Inflate",{})}},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(n,r,i){function s(u,x){var h,m="";for(h=0;h<x;h++)m+=String.fromCharCode(255&u),u>>>=8;return m}function o(u,x,h,m,w,C){var A,I,z=u.file,K=u.compression,j=C!==f.utf8encode,V=a.transformTo("string",C(z.name)),F=a.transformTo("string",f.utf8encode(z.name)),G=z.comment,st=a.transformTo("string",C(G)),S=a.transformTo("string",f.utf8encode(G)),W=F.length!==z.name.length,d=S.length!==G.length,q="",at="",H="",ot=z.dir,X=z.date,rt={crc32:0,compressedSize:0,uncompressedSize:0};x&&!h||(rt.crc32=u.crc32,rt.compressedSize=u.compressedSize,rt.uncompressedSize=u.uncompressedSize);var M=0;x&&(M|=8),j||!W&&!d||(M|=2048);var L=0,ut=0;ot&&(L|=16),w==="UNIX"?(ut=798,L|=function(tt,_t){var kt=tt;return tt||(kt=_t?16893:33204),(65535&kt)<<16}(z.unixPermissions,ot)):(ut=20,L|=function(tt){return 63&(tt||0)}(z.dosPermissions)),A=X.getUTCHours(),A<<=6,A|=X.getUTCMinutes(),A<<=5,A|=X.getUTCSeconds()/2,I=X.getUTCFullYear()-1980,I<<=4,I|=X.getUTCMonth()+1,I<<=5,I|=X.getUTCDate(),W&&(at=s(1,1)+s(b(V),4)+F,q+="up"+s(at.length,2)+at),d&&(H=s(1,1)+s(b(st),4)+S,q+="uc"+s(H.length,2)+H);var it="";return it+=`
\0`,it+=s(M,2),it+=K.magic,it+=s(A,2),it+=s(I,2),it+=s(rt.crc32,4),it+=s(rt.compressedSize,4),it+=s(rt.uncompressedSize,4),it+=s(V.length,2),it+=s(q.length,2),{fileRecord:g.LOCAL_FILE_HEADER+it+V+q,dirRecord:g.CENTRAL_FILE_HEADER+s(ut,2)+it+s(st.length,2)+"\0\0\0\0"+s(L,4)+s(m,4)+V+q+st}}var a=n("../utils"),c=n("../stream/GenericWorker"),f=n("../utf8"),b=n("../crc32"),g=n("../signature");function v(u,x,h,m){c.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=x,this.zipPlatform=h,this.encodeFileName=m,this.streamFiles=u,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}a.inherits(v,c),v.prototype.push=function(u){var x=u.meta.percent||0,h=this.entriesCount,m=this._sources.length;this.accumulate?this.contentBuffer.push(u):(this.bytesWritten+=u.data.length,c.prototype.push.call(this,{data:u.data,meta:{currentFile:this.currentFile,percent:h?(x+100*(h-m-1))/h:100}}))},v.prototype.openedSource=function(u){this.currentSourceOffset=this.bytesWritten,this.currentFile=u.file.name;var x=this.streamFiles&&!u.file.dir;if(x){var h=o(u,x,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:h.fileRecord,meta:{percent:0}})}else this.accumulate=!0},v.prototype.closedSource=function(u){this.accumulate=!1;var x=this.streamFiles&&!u.file.dir,h=o(u,x,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(h.dirRecord),x)this.push({data:function(m){return g.DATA_DESCRIPTOR+s(m.crc32,4)+s(m.compressedSize,4)+s(m.uncompressedSize,4)}(u),meta:{percent:100}});else for(this.push({data:h.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},v.prototype.flush=function(){for(var u=this.bytesWritten,x=0;x<this.dirRecords.length;x++)this.push({data:this.dirRecords[x],meta:{percent:100}});var h=this.bytesWritten-u,m=function(w,C,A,I,z){var K=a.transformTo("string",z(I));return g.CENTRAL_DIRECTORY_END+"\0\0\0\0"+s(w,2)+s(w,2)+s(C,4)+s(A,4)+s(K.length,2)+K}(this.dirRecords.length,h,u,this.zipComment,this.encodeFileName);this.push({data:m,meta:{percent:100}})},v.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},v.prototype.registerPrevious=function(u){this._sources.push(u);var x=this;return u.on("data",function(h){x.processChunk(h)}),u.on("end",function(){x.closedSource(x.previous.streamInfo),x._sources.length?x.prepareNextSource():x.end()}),u.on("error",function(h){x.error(h)}),this},v.prototype.resume=function(){return!!c.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},v.prototype.error=function(u){var x=this._sources;if(!c.prototype.error.call(this,u))return!1;for(var h=0;h<x.length;h++)try{x[h].error(u)}catch{}return!0},v.prototype.lock=function(){c.prototype.lock.call(this);for(var u=this._sources,x=0;x<u.length;x++)u[x].lock()},r.exports=v},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(n,r,i){var s=n("../compressions"),o=n("./ZipFileWorker");i.generateWorker=function(a,c,f){var b=new o(c.streamFiles,f,c.platform,c.encodeFileName),g=0;try{a.forEach(function(v,u){g++;var x=function(C,A){var I=C||A,z=s[I];if(!z)throw new Error(I+" is not a valid compression method !");return z}(u.options.compression,c.compression),h=u.options.compressionOptions||c.compressionOptions||{},m=u.dir,w=u.date;u._compressWorker(x,h).withStreamInfo("file",{name:v,dir:m,date:w,comment:u.comment||"",unixPermissions:u.unixPermissions,dosPermissions:u.dosPermissions}).pipe(b)}),b.entriesCount=g}catch(v){b.error(v)}return b}},{"../compressions":3,"./ZipFileWorker":8}],10:[function(n,r,i){function s(){if(!(this instanceof s))return new s;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files=Object.create(null),this.comment=null,this.root="",this.clone=function(){var o=new s;for(var a in this)typeof this[a]!="function"&&(o[a]=this[a]);return o}}(s.prototype=n("./object")).loadAsync=n("./load"),s.support=n("./support"),s.defaults=n("./defaults"),s.version="3.10.1",s.loadAsync=function(o,a){return new s().loadAsync(o,a)},s.external=n("./external"),r.exports=s},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(n,r,i){var s=n("./utils"),o=n("./external"),a=n("./utf8"),c=n("./zipEntries"),f=n("./stream/Crc32Probe"),b=n("./nodejsUtils");function g(v){return new o.Promise(function(u,x){var h=v.decompressed.getContentWorker().pipe(new f);h.on("error",function(m){x(m)}).on("end",function(){h.streamInfo.crc32!==v.decompressed.crc32?x(new Error("Corrupted zip : CRC32 mismatch")):u()}).resume()})}r.exports=function(v,u){var x=this;return u=s.extend(u||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:a.utf8decode}),b.isNode&&b.isStream(v)?o.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):s.prepareContent("the loaded zip file",v,!0,u.optimizedBinaryString,u.base64).then(function(h){var m=new c(u);return m.load(h),m}).then(function(h){var m=[o.Promise.resolve(h)],w=h.files;if(u.checkCRC32)for(var C=0;C<w.length;C++)m.push(g(w[C]));return o.Promise.all(m)}).then(function(h){for(var m=h.shift(),w=m.files,C=0;C<w.length;C++){var A=w[C],I=A.fileNameStr,z=s.resolve(A.fileNameStr);x.file(z,A.decompressed,{binary:!0,optimizedBinaryString:!0,date:A.date,dir:A.dir,comment:A.fileCommentStr.length?A.fileCommentStr:null,unixPermissions:A.unixPermissions,dosPermissions:A.dosPermissions,createFolders:u.createFolders}),A.dir||(x.file(z).unsafeOriginalName=I)}return m.zipComment.length&&(x.comment=m.zipComment),x})}},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(n,r,i){var s=n("../utils"),o=n("../stream/GenericWorker");function a(c,f){o.call(this,"Nodejs stream input adapter for "+c),this._upstreamEnded=!1,this._bindStream(f)}s.inherits(a,o),a.prototype._bindStream=function(c){var f=this;(this._stream=c).pause(),c.on("data",function(b){f.push({data:b,meta:{percent:0}})}).on("error",function(b){f.isPaused?this.generatedError=b:f.error(b)}).on("end",function(){f.isPaused?f._upstreamEnded=!0:f.end()})},a.prototype.pause=function(){return!!o.prototype.pause.call(this)&&(this._stream.pause(),!0)},a.prototype.resume=function(){return!!o.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},r.exports=a},{"../stream/GenericWorker":28,"../utils":32}],13:[function(n,r,i){var s=n("readable-stream").Readable;function o(a,c,f){s.call(this,c),this._helper=a;var b=this;a.on("data",function(g,v){b.push(g)||b._helper.pause(),f&&f(v)}).on("error",function(g){b.emit("error",g)}).on("end",function(){b.push(null)})}n("../utils").inherits(o,s),o.prototype._read=function(){this._helper.resume()},r.exports=o},{"../utils":32,"readable-stream":16}],14:[function(n,r,i){r.exports={isNode:typeof Buffer<"u",newBufferFrom:function(s,o){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(s,o);if(typeof s=="number")throw new Error('The "data" argument must not be a number');return new Buffer(s,o)},allocBuffer:function(s){if(Buffer.alloc)return Buffer.alloc(s);var o=new Buffer(s);return o.fill(0),o},isBuffer:function(s){return Buffer.isBuffer(s)},isStream:function(s){return s&&typeof s.on=="function"&&typeof s.pause=="function"&&typeof s.resume=="function"}}},{}],15:[function(n,r,i){function s(z,K,j){var V,F=a.getTypeOf(K),G=a.extend(j||{},b);G.date=G.date||new Date,G.compression!==null&&(G.compression=G.compression.toUpperCase()),typeof G.unixPermissions=="string"&&(G.unixPermissions=parseInt(G.unixPermissions,8)),G.unixPermissions&&16384&G.unixPermissions&&(G.dir=!0),G.dosPermissions&&16&G.dosPermissions&&(G.dir=!0),G.dir&&(z=w(z)),G.createFolders&&(V=m(z))&&C.call(this,V,!0);var st=F==="string"&&G.binary===!1&&G.base64===!1;j&&j.binary!==void 0||(G.binary=!st),(K instanceof g&&K.uncompressedSize===0||G.dir||!K||K.length===0)&&(G.base64=!1,G.binary=!0,K="",G.compression="STORE",F="string");var S=null;S=K instanceof g||K instanceof c?K:x.isNode&&x.isStream(K)?new h(z,K):a.prepareContent(z,K,G.binary,G.optimizedBinaryString,G.base64);var W=new v(z,S,G);this.files[z]=W}var o=n("./utf8"),a=n("./utils"),c=n("./stream/GenericWorker"),f=n("./stream/StreamHelper"),b=n("./defaults"),g=n("./compressedObject"),v=n("./zipObject"),u=n("./generate"),x=n("./nodejsUtils"),h=n("./nodejs/NodejsStreamInputAdapter"),m=function(z){z.slice(-1)==="/"&&(z=z.substring(0,z.length-1));var K=z.lastIndexOf("/");return 0<K?z.substring(0,K):""},w=function(z){return z.slice(-1)!=="/"&&(z+="/"),z},C=function(z,K){return K=K!==void 0?K:b.createFolders,z=w(z),this.files[z]||s.call(this,z,null,{dir:!0,createFolders:K}),this.files[z]};function A(z){return Object.prototype.toString.call(z)==="[object RegExp]"}var I={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(z){var K,j,V;for(K in this.files)V=this.files[K],(j=K.slice(this.root.length,K.length))&&K.slice(0,this.root.length)===this.root&&z(j,V)},filter:function(z){var K=[];return this.forEach(function(j,V){z(j,V)&&K.push(V)}),K},file:function(z,K,j){if(arguments.length!==1)return z=this.root+z,s.call(this,z,K,j),this;if(A(z)){var V=z;return this.filter(function(G,st){return!st.dir&&V.test(G)})}var F=this.files[this.root+z];return F&&!F.dir?F:null},folder:function(z){if(!z)return this;if(A(z))return this.filter(function(F,G){return G.dir&&z.test(F)});var K=this.root+z,j=C.call(this,K),V=this.clone();return V.root=j.name,V},remove:function(z){z=this.root+z;var K=this.files[z];if(K||(z.slice(-1)!=="/"&&(z+="/"),K=this.files[z]),K&&!K.dir)delete this.files[z];else for(var j=this.filter(function(F,G){return G.name.slice(0,z.length)===z}),V=0;V<j.length;V++)delete this.files[j[V].name];return this},generate:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(z){var K,j={};try{if((j=a.extend(z||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:o.utf8encode})).type=j.type.toLowerCase(),j.compression=j.compression.toUpperCase(),j.type==="binarystring"&&(j.type="string"),!j.type)throw new Error("No output type specified.");a.checkSupport(j.type),j.platform!=="darwin"&&j.platform!=="freebsd"&&j.platform!=="linux"&&j.platform!=="sunos"||(j.platform="UNIX"),j.platform==="win32"&&(j.platform="DOS");var V=j.comment||this.comment||"";K=u.generateWorker(this,j,V)}catch(F){(K=new c("error")).error(F)}return new f(K,j.type||"string",j.mimeType)},generateAsync:function(z,K){return this.generateInternalStream(z).accumulate(K)},generateNodeStream:function(z,K){return(z=z||{}).type||(z.type="nodebuffer"),this.generateInternalStream(z).toNodejsStream(K)}};r.exports=I},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(n,r,i){r.exports=n("stream")},{stream:void 0}],17:[function(n,r,i){var s=n("./DataReader");function o(a){s.call(this,a);for(var c=0;c<this.data.length;c++)a[c]=255&a[c]}n("../utils").inherits(o,s),o.prototype.byteAt=function(a){return this.data[this.zero+a]},o.prototype.lastIndexOfSignature=function(a){for(var c=a.charCodeAt(0),f=a.charCodeAt(1),b=a.charCodeAt(2),g=a.charCodeAt(3),v=this.length-4;0<=v;--v)if(this.data[v]===c&&this.data[v+1]===f&&this.data[v+2]===b&&this.data[v+3]===g)return v-this.zero;return-1},o.prototype.readAndCheckSignature=function(a){var c=a.charCodeAt(0),f=a.charCodeAt(1),b=a.charCodeAt(2),g=a.charCodeAt(3),v=this.readData(4);return c===v[0]&&f===v[1]&&b===v[2]&&g===v[3]},o.prototype.readData=function(a){if(this.checkOffset(a),a===0)return[];var c=this.data.slice(this.zero+this.index,this.zero+this.index+a);return this.index+=a,c},r.exports=o},{"../utils":32,"./DataReader":18}],18:[function(n,r,i){var s=n("../utils");function o(a){this.data=a,this.length=a.length,this.index=0,this.zero=0}o.prototype={checkOffset:function(a){this.checkIndex(this.index+a)},checkIndex:function(a){if(this.length<this.zero+a||a<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+a+"). Corrupted zip ?")},setIndex:function(a){this.checkIndex(a),this.index=a},skip:function(a){this.setIndex(this.index+a)},byteAt:function(){},readInt:function(a){var c,f=0;for(this.checkOffset(a),c=this.index+a-1;c>=this.index;c--)f=(f<<8)+this.byteAt(c);return this.index+=a,f},readString:function(a){return s.transformTo("string",this.readData(a))},readData:function(){},lastIndexOfSignature:function(){},readAndCheckSignature:function(){},readDate:function(){var a=this.readInt(4);return new Date(Date.UTC(1980+(a>>25&127),(a>>21&15)-1,a>>16&31,a>>11&31,a>>5&63,(31&a)<<1))}},r.exports=o},{"../utils":32}],19:[function(n,r,i){var s=n("./Uint8ArrayReader");function o(a){s.call(this,a)}n("../utils").inherits(o,s),o.prototype.readData=function(a){this.checkOffset(a);var c=this.data.slice(this.zero+this.index,this.zero+this.index+a);return this.index+=a,c},r.exports=o},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(n,r,i){var s=n("./DataReader");function o(a){s.call(this,a)}n("../utils").inherits(o,s),o.prototype.byteAt=function(a){return this.data.charCodeAt(this.zero+a)},o.prototype.lastIndexOfSignature=function(a){return this.data.lastIndexOf(a)-this.zero},o.prototype.readAndCheckSignature=function(a){return a===this.readData(4)},o.prototype.readData=function(a){this.checkOffset(a);var c=this.data.slice(this.zero+this.index,this.zero+this.index+a);return this.index+=a,c},r.exports=o},{"../utils":32,"./DataReader":18}],21:[function(n,r,i){var s=n("./ArrayReader");function o(a){s.call(this,a)}n("../utils").inherits(o,s),o.prototype.readData=function(a){if(this.checkOffset(a),a===0)return new Uint8Array(0);var c=this.data.subarray(this.zero+this.index,this.zero+this.index+a);return this.index+=a,c},r.exports=o},{"../utils":32,"./ArrayReader":17}],22:[function(n,r,i){var s=n("../utils"),o=n("../support"),a=n("./ArrayReader"),c=n("./StringReader"),f=n("./NodeBufferReader"),b=n("./Uint8ArrayReader");r.exports=function(g){var v=s.getTypeOf(g);return s.checkSupport(v),v!=="string"||o.uint8array?v==="nodebuffer"?new f(g):o.uint8array?new b(s.transformTo("uint8array",g)):new a(s.transformTo("array",g)):new c(g)}},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(n,r,i){i.LOCAL_FILE_HEADER="PK",i.CENTRAL_FILE_HEADER="PK",i.CENTRAL_DIRECTORY_END="PK",i.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK\x07",i.ZIP64_CENTRAL_DIRECTORY_END="PK",i.DATA_DESCRIPTOR="PK\x07\b"},{}],24:[function(n,r,i){var s=n("./GenericWorker"),o=n("../utils");function a(c){s.call(this,"ConvertWorker to "+c),this.destType=c}o.inherits(a,s),a.prototype.processChunk=function(c){this.push({data:o.transformTo(this.destType,c.data),meta:c.meta})},r.exports=a},{"../utils":32,"./GenericWorker":28}],25:[function(n,r,i){var s=n("./GenericWorker"),o=n("../crc32");function a(){s.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}n("../utils").inherits(a,s),a.prototype.processChunk=function(c){this.streamInfo.crc32=o(c.data,this.streamInfo.crc32||0),this.push(c)},r.exports=a},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(n,r,i){var s=n("../utils"),o=n("./GenericWorker");function a(c){o.call(this,"DataLengthProbe for "+c),this.propName=c,this.withStreamInfo(c,0)}s.inherits(a,o),a.prototype.processChunk=function(c){if(c){var f=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=f+c.data.length}o.prototype.processChunk.call(this,c)},r.exports=a},{"../utils":32,"./GenericWorker":28}],27:[function(n,r,i){var s=n("../utils"),o=n("./GenericWorker");function a(c){o.call(this,"DataWorker");var f=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,c.then(function(b){f.dataIsReady=!0,f.data=b,f.max=b&&b.length||0,f.type=s.getTypeOf(b),f.isPaused||f._tickAndRepeat()},function(b){f.error(b)})}s.inherits(a,o),a.prototype.cleanUp=function(){o.prototype.cleanUp.call(this),this.data=null},a.prototype.resume=function(){return!!o.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,s.delay(this._tickAndRepeat,[],this)),!0)},a.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(s.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},a.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var c=null,f=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":c=this.data.substring(this.index,f);break;case"uint8array":c=this.data.subarray(this.index,f);break;case"array":case"nodebuffer":c=this.data.slice(this.index,f)}return this.index=f,this.push({data:c,meta:{percent:this.max?this.index/this.max*100:0}})},r.exports=a},{"../utils":32,"./GenericWorker":28}],28:[function(n,r,i){function s(o){this.name=o||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}s.prototype={push:function(o){this.emit("data",o)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(o){this.emit("error",o)}return!0},error:function(o){return!this.isFinished&&(this.isPaused?this.generatedError=o:(this.isFinished=!0,this.emit("error",o),this.previous&&this.previous.error(o),this.cleanUp()),!0)},on:function(o,a){return this._listeners[o].push(a),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(o,a){if(this._listeners[o])for(var c=0;c<this._listeners[o].length;c++)this._listeners[o][c].call(this,a)},pipe:function(o){return o.registerPrevious(this)},registerPrevious:function(o){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=o.streamInfo,this.mergeStreamInfo(),this.previous=o;var a=this;return o.on("data",function(c){a.processChunk(c)}),o.on("end",function(){a.end()}),o.on("error",function(c){a.error(c)}),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var o=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),o=!0),this.previous&&this.previous.resume(),!o},flush:function(){},processChunk:function(o){this.push(o)},withStreamInfo:function(o,a){return this.extraStreamInfo[o]=a,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var o in this.extraStreamInfo)Object.prototype.hasOwnProperty.call(this.extraStreamInfo,o)&&(this.streamInfo[o]=this.extraStreamInfo[o])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var o="Worker "+this.name;return this.previous?this.previous+" -> "+o:o}},r.exports=s},{}],29:[function(n,r,i){var s=n("../utils"),o=n("./ConvertWorker"),a=n("./GenericWorker"),c=n("../base64"),f=n("../support"),b=n("../external"),g=null;if(f.nodestream)try{g=n("../nodejs/NodejsStreamOutputAdapter")}catch{}function v(x,h){return new b.Promise(function(m,w){var C=[],A=x._internalType,I=x._outputType,z=x._mimeType;x.on("data",function(K,j){C.push(K),h&&h(j)}).on("error",function(K){C=[],w(K)}).on("end",function(){try{var K=function(j,V,F){switch(j){case"blob":return s.newBlob(s.transformTo("arraybuffer",V),F);case"base64":return c.encode(V);default:return s.transformTo(j,V)}}(I,function(j,V){var F,G=0,st=null,S=0;for(F=0;F<V.length;F++)S+=V[F].length;switch(j){case"string":return V.join("");case"array":return Array.prototype.concat.apply([],V);case"uint8array":for(st=new Uint8Array(S),F=0;F<V.length;F++)st.set(V[F],G),G+=V[F].length;return st;case"nodebuffer":return Buffer.concat(V);default:throw new Error("concat : unsupported type '"+j+"'")}}(A,C),z);m(K)}catch(j){w(j)}C=[]}).resume()})}function u(x,h,m){var w=h;switch(h){case"blob":case"arraybuffer":w="uint8array";break;case"base64":w="string"}try{this._internalType=w,this._outputType=h,this._mimeType=m,s.checkSupport(w),this._worker=x.pipe(new o(w)),x.lock()}catch(C){this._worker=new a("error"),this._worker.error(C)}}u.prototype={accumulate:function(x){return v(this,x)},on:function(x,h){var m=this;return x==="data"?this._worker.on(x,function(w){h.call(m,w.data,w.meta)}):this._worker.on(x,function(){s.delay(h,arguments,m)}),this},resume:function(){return s.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(x){if(s.checkSupport("nodestream"),this._outputType!=="nodebuffer")throw new Error(this._outputType+" is not supported by this method");return new g(this,{objectMode:this._outputType!=="nodebuffer"},x)}},r.exports=u},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(n,r,i){if(i.base64=!0,i.array=!0,i.string=!0,i.arraybuffer=typeof ArrayBuffer<"u"&&typeof Uint8Array<"u",i.nodebuffer=typeof Buffer<"u",i.uint8array=typeof Uint8Array<"u",typeof ArrayBuffer>"u")i.blob=!1;else{var s=new ArrayBuffer(0);try{i.blob=new Blob([s],{type:"application/zip"}).size===0}catch{try{var o=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);o.append(s),i.blob=o.getBlob("application/zip").size===0}catch{i.blob=!1}}}try{i.nodestream=!!n("readable-stream").Readable}catch{i.nodestream=!1}},{"readable-stream":16}],31:[function(n,r,i){for(var s=n("./utils"),o=n("./support"),a=n("./nodejsUtils"),c=n("./stream/GenericWorker"),f=new Array(256),b=0;b<256;b++)f[b]=252<=b?6:248<=b?5:240<=b?4:224<=b?3:192<=b?2:1;f[254]=f[254]=1;function g(){c.call(this,"utf-8 decode"),this.leftOver=null}function v(){c.call(this,"utf-8 encode")}i.utf8encode=function(u){return o.nodebuffer?a.newBufferFrom(u,"utf-8"):function(x){var h,m,w,C,A,I=x.length,z=0;for(C=0;C<I;C++)(64512&(m=x.charCodeAt(C)))==55296&&C+1<I&&(64512&(w=x.charCodeAt(C+1)))==56320&&(m=65536+(m-55296<<10)+(w-56320),C++),z+=m<128?1:m<2048?2:m<65536?3:4;for(h=o.uint8array?new Uint8Array(z):new Array(z),C=A=0;A<z;C++)(64512&(m=x.charCodeAt(C)))==55296&&C+1<I&&(64512&(w=x.charCodeAt(C+1)))==56320&&(m=65536+(m-55296<<10)+(w-56320),C++),m<128?h[A++]=m:(m<2048?h[A++]=192|m>>>6:(m<65536?h[A++]=224|m>>>12:(h[A++]=240|m>>>18,h[A++]=128|m>>>12&63),h[A++]=128|m>>>6&63),h[A++]=128|63&m);return h}(u)},i.utf8decode=function(u){return o.nodebuffer?s.transformTo("nodebuffer",u).toString("utf-8"):function(x){var h,m,w,C,A=x.length,I=new Array(2*A);for(h=m=0;h<A;)if((w=x[h++])<128)I[m++]=w;else if(4<(C=f[w]))I[m++]=65533,h+=C-1;else{for(w&=C===2?31:C===3?15:7;1<C&&h<A;)w=w<<6|63&x[h++],C--;1<C?I[m++]=65533:w<65536?I[m++]=w:(w-=65536,I[m++]=55296|w>>10&1023,I[m++]=56320|1023&w)}return I.length!==m&&(I.subarray?I=I.subarray(0,m):I.length=m),s.applyFromCharCode(I)}(u=s.transformTo(o.uint8array?"uint8array":"array",u))},s.inherits(g,c),g.prototype.processChunk=function(u){var x=s.transformTo(o.uint8array?"uint8array":"array",u.data);if(this.leftOver&&this.leftOver.length){if(o.uint8array){var h=x;(x=new Uint8Array(h.length+this.leftOver.length)).set(this.leftOver,0),x.set(h,this.leftOver.length)}else x=this.leftOver.concat(x);this.leftOver=null}var m=function(C,A){var I;for((A=A||C.length)>C.length&&(A=C.length),I=A-1;0<=I&&(192&C[I])==128;)I--;return I<0||I===0?A:I+f[C[I]]>A?I:A}(x),w=x;m!==x.length&&(o.uint8array?(w=x.subarray(0,m),this.leftOver=x.subarray(m,x.length)):(w=x.slice(0,m),this.leftOver=x.slice(m,x.length))),this.push({data:i.utf8decode(w),meta:u.meta})},g.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:i.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},i.Utf8DecodeWorker=g,s.inherits(v,c),v.prototype.processChunk=function(u){this.push({data:i.utf8encode(u.data),meta:u.meta})},i.Utf8EncodeWorker=v},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(n,r,i){var s=n("./support"),o=n("./base64"),a=n("./nodejsUtils"),c=n("./external");function f(h){return h}function b(h,m){for(var w=0;w<h.length;++w)m[w]=255&h.charCodeAt(w);return m}n("setimmediate"),i.newBlob=function(h,m){i.checkSupport("blob");try{return new Blob([h],{type:m})}catch{try{var w=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return w.append(h),w.getBlob(m)}catch{throw new Error("Bug : can't construct the Blob.")}}};var g={stringifyByChunk:function(h,m,w){var C=[],A=0,I=h.length;if(I<=w)return String.fromCharCode.apply(null,h);for(;A<I;)m==="array"||m==="nodebuffer"?C.push(String.fromCharCode.apply(null,h.slice(A,Math.min(A+w,I)))):C.push(String.fromCharCode.apply(null,h.subarray(A,Math.min(A+w,I)))),A+=w;return C.join("")},stringifyByChar:function(h){for(var m="",w=0;w<h.length;w++)m+=String.fromCharCode(h[w]);return m},applyCanBeUsed:{uint8array:function(){try{return s.uint8array&&String.fromCharCode.apply(null,new Uint8Array(1)).length===1}catch{return!1}}(),nodebuffer:function(){try{return s.nodebuffer&&String.fromCharCode.apply(null,a.allocBuffer(1)).length===1}catch{return!1}}()}};function v(h){var m=65536,w=i.getTypeOf(h),C=!0;if(w==="uint8array"?C=g.applyCanBeUsed.uint8array:w==="nodebuffer"&&(C=g.applyCanBeUsed.nodebuffer),C)for(;1<m;)try{return g.stringifyByChunk(h,w,m)}catch{m=Math.floor(m/2)}return g.stringifyByChar(h)}function u(h,m){for(var w=0;w<h.length;w++)m[w]=h[w];return m}i.applyFromCharCode=v;var x={};x.string={string:f,array:function(h){return b(h,new Array(h.length))},arraybuffer:function(h){return x.string.uint8array(h).buffer},uint8array:function(h){return b(h,new Uint8Array(h.length))},nodebuffer:function(h){return b(h,a.allocBuffer(h.length))}},x.array={string:v,array:f,arraybuffer:function(h){return new Uint8Array(h).buffer},uint8array:function(h){return new Uint8Array(h)},nodebuffer:function(h){return a.newBufferFrom(h)}},x.arraybuffer={string:function(h){return v(new Uint8Array(h))},array:function(h){return u(new Uint8Array(h),new Array(h.byteLength))},arraybuffer:f,uint8array:function(h){return new Uint8Array(h)},nodebuffer:function(h){return a.newBufferFrom(new Uint8Array(h))}},x.uint8array={string:v,array:function(h){return u(h,new Array(h.length))},arraybuffer:function(h){return h.buffer},uint8array:f,nodebuffer:function(h){return a.newBufferFrom(h)}},x.nodebuffer={string:v,array:function(h){return u(h,new Array(h.length))},arraybuffer:function(h){return x.nodebuffer.uint8array(h).buffer},uint8array:function(h){return u(h,new Uint8Array(h.length))},nodebuffer:f},i.transformTo=function(h,m){if(m=m||"",!h)return m;i.checkSupport(h);var w=i.getTypeOf(m);return x[w][h](m)},i.resolve=function(h){for(var m=h.split("/"),w=[],C=0;C<m.length;C++){var A=m[C];A==="."||A===""&&C!==0&&C!==m.length-1||(A===".."?w.pop():w.push(A))}return w.join("/")},i.getTypeOf=function(h){return typeof h=="string"?"string":Object.prototype.toString.call(h)==="[object Array]"?"array":s.nodebuffer&&a.isBuffer(h)?"nodebuffer":s.uint8array&&h instanceof Uint8Array?"uint8array":s.arraybuffer&&h instanceof ArrayBuffer?"arraybuffer":void 0},i.checkSupport=function(h){if(!s[h.toLowerCase()])throw new Error(h+" is not supported by this platform")},i.MAX_VALUE_16BITS=65535,i.MAX_VALUE_32BITS=-1,i.pretty=function(h){var m,w,C="";for(w=0;w<(h||"").length;w++)C+="\\x"+((m=h.charCodeAt(w))<16?"0":"")+m.toString(16).toUpperCase();return C},i.delay=function(h,m,w){setImmediate(function(){h.apply(w||null,m||[])})},i.inherits=function(h,m){function w(){}w.prototype=m.prototype,h.prototype=new w},i.extend=function(){var h,m,w={};for(h=0;h<arguments.length;h++)for(m in arguments[h])Object.prototype.hasOwnProperty.call(arguments[h],m)&&w[m]===void 0&&(w[m]=arguments[h][m]);return w},i.prepareContent=function(h,m,w,C,A){return c.Promise.resolve(m).then(function(I){return s.blob&&(I instanceof Blob||["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(I))!==-1)&&typeof FileReader<"u"?new c.Promise(function(z,K){var j=new FileReader;j.onload=function(V){z(V.target.result)},j.onerror=function(V){K(V.target.error)},j.readAsArrayBuffer(I)}):I}).then(function(I){var z=i.getTypeOf(I);return z?(z==="arraybuffer"?I=i.transformTo("uint8array",I):z==="string"&&(A?I=o.decode(I):w&&C!==!0&&(I=function(K){return b(K,s.uint8array?new Uint8Array(K.length):new Array(K.length))}(I))),I):c.Promise.reject(new Error("Can't read the data of '"+h+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))})}},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,setimmediate:54}],33:[function(n,r,i){var s=n("./reader/readerFor"),o=n("./utils"),a=n("./signature"),c=n("./zipEntry"),f=n("./support");function b(g){this.files=[],this.loadOptions=g}b.prototype={checkSignature:function(g){if(!this.reader.readAndCheckSignature(g)){this.reader.index-=4;var v=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+o.pretty(v)+", expected "+o.pretty(g)+")")}},isSignature:function(g,v){var u=this.reader.index;this.reader.setIndex(g);var x=this.reader.readString(4)===v;return this.reader.setIndex(u),x},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var g=this.reader.readData(this.zipCommentLength),v=f.uint8array?"uint8array":"array",u=o.transformTo(v,g);this.zipComment=this.loadOptions.decodeFileName(u)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var g,v,u,x=this.zip64EndOfCentralSize-44;0<x;)g=this.reader.readInt(2),v=this.reader.readInt(4),u=this.reader.readData(v),this.zip64ExtensibleData[g]={id:g,length:v,value:u}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var g,v;for(g=0;g<this.files.length;g++)v=this.files[g],this.reader.setIndex(v.localHeaderOffset),this.checkSignature(a.LOCAL_FILE_HEADER),v.readLocalPart(this.reader),v.handleUTF8(),v.processAttributes()},readCentralDir:function(){var g;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(a.CENTRAL_FILE_HEADER);)(g=new c({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(g);if(this.centralDirRecords!==this.files.length&&this.centralDirRecords!==0&&this.files.length===0)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var g=this.reader.lastIndexOfSignature(a.CENTRAL_DIRECTORY_END);if(g<0)throw this.isSignature(0,a.LOCAL_FILE_HEADER)?new Error("Corrupted zip: can't find end of central directory"):new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");this.reader.setIndex(g);var v=g;if(this.checkSignature(a.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===o.MAX_VALUE_16BITS||this.diskWithCentralDirStart===o.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===o.MAX_VALUE_16BITS||this.centralDirRecords===o.MAX_VALUE_16BITS||this.centralDirSize===o.MAX_VALUE_32BITS||this.centralDirOffset===o.MAX_VALUE_32BITS){if(this.zip64=!0,(g=this.reader.lastIndexOfSignature(a.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(g),this.checkSignature(a.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,a.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(a.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(a.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var u=this.centralDirOffset+this.centralDirSize;this.zip64&&(u+=20,u+=12+this.zip64EndOfCentralSize);var x=v-u;if(0<x)this.isSignature(v,a.CENTRAL_FILE_HEADER)||(this.reader.zero=x);else if(x<0)throw new Error("Corrupted zip: missing "+Math.abs(x)+" bytes.")},prepareReader:function(g){this.reader=s(g)},load:function(g){this.prepareReader(g),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},r.exports=b},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utils":32,"./zipEntry":34}],34:[function(n,r,i){var s=n("./reader/readerFor"),o=n("./utils"),a=n("./compressedObject"),c=n("./crc32"),f=n("./utf8"),b=n("./compressions"),g=n("./support");function v(u,x){this.options=u,this.loadOptions=x}v.prototype={isEncrypted:function(){return(1&this.bitFlag)==1},useUTF8:function(){return(2048&this.bitFlag)==2048},readLocalPart:function(u){var x,h;if(u.skip(22),this.fileNameLength=u.readInt(2),h=u.readInt(2),this.fileName=u.readData(this.fileNameLength),u.skip(h),this.compressedSize===-1||this.uncompressedSize===-1)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if((x=function(m){for(var w in b)if(Object.prototype.hasOwnProperty.call(b,w)&&b[w].magic===m)return b[w];return null}(this.compressionMethod))===null)throw new Error("Corrupted zip : compression "+o.pretty(this.compressionMethod)+" unknown (inner file : "+o.transformTo("string",this.fileName)+")");this.decompressed=new a(this.compressedSize,this.uncompressedSize,this.crc32,x,u.readData(this.compressedSize))},readCentralPart:function(u){this.versionMadeBy=u.readInt(2),u.skip(2),this.bitFlag=u.readInt(2),this.compressionMethod=u.readString(2),this.date=u.readDate(),this.crc32=u.readInt(4),this.compressedSize=u.readInt(4),this.uncompressedSize=u.readInt(4);var x=u.readInt(2);if(this.extraFieldsLength=u.readInt(2),this.fileCommentLength=u.readInt(2),this.diskNumberStart=u.readInt(2),this.internalFileAttributes=u.readInt(2),this.externalFileAttributes=u.readInt(4),this.localHeaderOffset=u.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");u.skip(x),this.readExtraFields(u),this.parseZIP64ExtraField(u),this.fileComment=u.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var u=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),u==0&&(this.dosPermissions=63&this.externalFileAttributes),u==3&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||this.fileNameStr.slice(-1)!=="/"||(this.dir=!0)},parseZIP64ExtraField:function(){if(this.extraFields[1]){var u=s(this.extraFields[1].value);this.uncompressedSize===o.MAX_VALUE_32BITS&&(this.uncompressedSize=u.readInt(8)),this.compressedSize===o.MAX_VALUE_32BITS&&(this.compressedSize=u.readInt(8)),this.localHeaderOffset===o.MAX_VALUE_32BITS&&(this.localHeaderOffset=u.readInt(8)),this.diskNumberStart===o.MAX_VALUE_32BITS&&(this.diskNumberStart=u.readInt(4))}},readExtraFields:function(u){var x,h,m,w=u.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});u.index+4<w;)x=u.readInt(2),h=u.readInt(2),m=u.readData(h),this.extraFields[x]={id:x,length:h,value:m};u.setIndex(w)},handleUTF8:function(){var u=g.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=f.utf8decode(this.fileName),this.fileCommentStr=f.utf8decode(this.fileComment);else{var x=this.findExtraFieldUnicodePath();if(x!==null)this.fileNameStr=x;else{var h=o.transformTo(u,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(h)}var m=this.findExtraFieldUnicodeComment();if(m!==null)this.fileCommentStr=m;else{var w=o.transformTo(u,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(w)}}},findExtraFieldUnicodePath:function(){var u=this.extraFields[28789];if(u){var x=s(u.value);return x.readInt(1)!==1||c(this.fileName)!==x.readInt(4)?null:f.utf8decode(x.readData(u.length-5))}return null},findExtraFieldUnicodeComment:function(){var u=this.extraFields[25461];if(u){var x=s(u.value);return x.readInt(1)!==1||c(this.fileComment)!==x.readInt(4)?null:f.utf8decode(x.readData(u.length-5))}return null}},r.exports=v},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(n,r,i){function s(x,h,m){this.name=x,this.dir=m.dir,this.date=m.date,this.comment=m.comment,this.unixPermissions=m.unixPermissions,this.dosPermissions=m.dosPermissions,this._data=h,this._dataBinary=m.binary,this.options={compression:m.compression,compressionOptions:m.compressionOptions}}var o=n("./stream/StreamHelper"),a=n("./stream/DataWorker"),c=n("./utf8"),f=n("./compressedObject"),b=n("./stream/GenericWorker");s.prototype={internalStream:function(x){var h=null,m="string";try{if(!x)throw new Error("No output type specified.");var w=(m=x.toLowerCase())==="string"||m==="text";m!=="binarystring"&&m!=="text"||(m="string"),h=this._decompressWorker();var C=!this._dataBinary;C&&!w&&(h=h.pipe(new c.Utf8EncodeWorker)),!C&&w&&(h=h.pipe(new c.Utf8DecodeWorker))}catch(A){(h=new b("error")).error(A)}return new o(h,m,"")},async:function(x,h){return this.internalStream(x).accumulate(h)},nodeStream:function(x,h){return this.internalStream(x||"nodebuffer").toNodejsStream(h)},_compressWorker:function(x,h){if(this._data instanceof f&&this._data.compression.magic===x.magic)return this._data.getCompressedWorker();var m=this._decompressWorker();return this._dataBinary||(m=m.pipe(new c.Utf8EncodeWorker)),f.createWorkerFrom(m,x,h)},_decompressWorker:function(){return this._data instanceof f?this._data.getContentWorker():this._data instanceof b?this._data:new a(this._data)}};for(var g=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],v=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},u=0;u<g.length;u++)s.prototype[g[u]]=v;r.exports=s},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(n,r,i){(function(s){var o,a,c=s.MutationObserver||s.WebKitMutationObserver;if(c){var f=0,b=new c(x),g=s.document.createTextNode("");b.observe(g,{characterData:!0}),o=function(){g.data=f=++f%2}}else if(s.setImmediate||s.MessageChannel===void 0)o="document"in s&&"onreadystatechange"in s.document.createElement("script")?function(){var h=s.document.createElement("script");h.onreadystatechange=function(){x(),h.onreadystatechange=null,h.parentNode.removeChild(h),h=null},s.document.documentElement.appendChild(h)}:function(){setTimeout(x,0)};else{var v=new s.MessageChannel;v.port1.onmessage=x,o=function(){v.port2.postMessage(0)}}var u=[];function x(){var h,m;a=!0;for(var w=u.length;w;){for(m=u,u=[],h=-1;++h<w;)m[h]();w=u.length}a=!1}r.exports=function(h){u.push(h)!==1||a||o()}}).call(this,typeof fn<"u"?fn:typeof self<"u"?self:typeof window<"u"?window:{})},{}],37:[function(n,r,i){var s=n("immediate");function o(){}var a={},c=["REJECTED"],f=["FULFILLED"],b=["PENDING"];function g(w){if(typeof w!="function")throw new TypeError("resolver must be a function");this.state=b,this.queue=[],this.outcome=void 0,w!==o&&h(this,w)}function v(w,C,A){this.promise=w,typeof C=="function"&&(this.onFulfilled=C,this.callFulfilled=this.otherCallFulfilled),typeof A=="function"&&(this.onRejected=A,this.callRejected=this.otherCallRejected)}function u(w,C,A){s(function(){var I;try{I=C(A)}catch(z){return a.reject(w,z)}I===w?a.reject(w,new TypeError("Cannot resolve promise with itself")):a.resolve(w,I)})}function x(w){var C=w&&w.then;if(w&&(typeof w=="object"||typeof w=="function")&&typeof C=="function")return function(){C.apply(w,arguments)}}function h(w,C){var A=!1;function I(j){A||(A=!0,a.reject(w,j))}function z(j){A||(A=!0,a.resolve(w,j))}var K=m(function(){C(z,I)});K.status==="error"&&I(K.value)}function m(w,C){var A={};try{A.value=w(C),A.status="success"}catch(I){A.status="error",A.value=I}return A}(r.exports=g).prototype.finally=function(w){if(typeof w!="function")return this;var C=this.constructor;return this.then(function(A){return C.resolve(w()).then(function(){return A})},function(A){return C.resolve(w()).then(function(){throw A})})},g.prototype.catch=function(w){return this.then(null,w)},g.prototype.then=function(w,C){if(typeof w!="function"&&this.state===f||typeof C!="function"&&this.state===c)return this;var A=new this.constructor(o);return this.state!==b?u(A,this.state===f?w:C,this.outcome):this.queue.push(new v(A,w,C)),A},v.prototype.callFulfilled=function(w){a.resolve(this.promise,w)},v.prototype.otherCallFulfilled=function(w){u(this.promise,this.onFulfilled,w)},v.prototype.callRejected=function(w){a.reject(this.promise,w)},v.prototype.otherCallRejected=function(w){u(this.promise,this.onRejected,w)},a.resolve=function(w,C){var A=m(x,C);if(A.status==="error")return a.reject(w,A.value);var I=A.value;if(I)h(w,I);else{w.state=f,w.outcome=C;for(var z=-1,K=w.queue.length;++z<K;)w.queue[z].callFulfilled(C)}return w},a.reject=function(w,C){w.state=c,w.outcome=C;for(var A=-1,I=w.queue.length;++A<I;)w.queue[A].callRejected(C);return w},g.resolve=function(w){return w instanceof this?w:a.resolve(new this(o),w)},g.reject=function(w){var C=new this(o);return a.reject(C,w)},g.all=function(w){var C=this;if(Object.prototype.toString.call(w)!=="[object Array]")return this.reject(new TypeError("must be an array"));var A=w.length,I=!1;if(!A)return this.resolve([]);for(var z=new Array(A),K=0,j=-1,V=new this(o);++j<A;)F(w[j],j);return V;function F(G,st){C.resolve(G).then(function(S){z[st]=S,++K!==A||I||(I=!0,a.resolve(V,z))},function(S){I||(I=!0,a.reject(V,S))})}},g.race=function(w){var C=this;if(Object.prototype.toString.call(w)!=="[object Array]")return this.reject(new TypeError("must be an array"));var A=w.length,I=!1;if(!A)return this.resolve([]);for(var z=-1,K=new this(o);++z<A;)j=w[z],C.resolve(j).then(function(V){I||(I=!0,a.resolve(K,V))},function(V){I||(I=!0,a.reject(K,V))});var j;return K}},{immediate:36}],38:[function(n,r,i){var s={};(0,n("./lib/utils/common").assign)(s,n("./lib/deflate"),n("./lib/inflate"),n("./lib/zlib/constants")),r.exports=s},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(n,r,i){var s=n("./zlib/deflate"),o=n("./utils/common"),a=n("./utils/strings"),c=n("./zlib/messages"),f=n("./zlib/zstream"),b=Object.prototype.toString,g=0,v=-1,u=0,x=8;function h(w){if(!(this instanceof h))return new h(w);this.options=o.assign({level:v,method:x,chunkSize:16384,windowBits:15,memLevel:8,strategy:u,to:""},w||{});var C=this.options;C.raw&&0<C.windowBits?C.windowBits=-C.windowBits:C.gzip&&0<C.windowBits&&C.windowBits<16&&(C.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new f,this.strm.avail_out=0;var A=s.deflateInit2(this.strm,C.level,C.method,C.windowBits,C.memLevel,C.strategy);if(A!==g)throw new Error(c[A]);if(C.header&&s.deflateSetHeader(this.strm,C.header),C.dictionary){var I;if(I=typeof C.dictionary=="string"?a.string2buf(C.dictionary):b.call(C.dictionary)==="[object ArrayBuffer]"?new Uint8Array(C.dictionary):C.dictionary,(A=s.deflateSetDictionary(this.strm,I))!==g)throw new Error(c[A]);this._dict_set=!0}}function m(w,C){var A=new h(C);if(A.push(w,!0),A.err)throw A.msg||c[A.err];return A.result}h.prototype.push=function(w,C){var A,I,z=this.strm,K=this.options.chunkSize;if(this.ended)return!1;I=C===~~C?C:C===!0?4:0,typeof w=="string"?z.input=a.string2buf(w):b.call(w)==="[object ArrayBuffer]"?z.input=new Uint8Array(w):z.input=w,z.next_in=0,z.avail_in=z.input.length;do{if(z.avail_out===0&&(z.output=new o.Buf8(K),z.next_out=0,z.avail_out=K),(A=s.deflate(z,I))!==1&&A!==g)return this.onEnd(A),!(this.ended=!0);z.avail_out!==0&&(z.avail_in!==0||I!==4&&I!==2)||(this.options.to==="string"?this.onData(a.buf2binstring(o.shrinkBuf(z.output,z.next_out))):this.onData(o.shrinkBuf(z.output,z.next_out)))}while((0<z.avail_in||z.avail_out===0)&&A!==1);return I===4?(A=s.deflateEnd(this.strm),this.onEnd(A),this.ended=!0,A===g):I!==2||(this.onEnd(g),!(z.avail_out=0))},h.prototype.onData=function(w){this.chunks.push(w)},h.prototype.onEnd=function(w){w===g&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=w,this.msg=this.strm.msg},i.Deflate=h,i.deflate=m,i.deflateRaw=function(w,C){return(C=C||{}).raw=!0,m(w,C)},i.gzip=function(w,C){return(C=C||{}).gzip=!0,m(w,C)}},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(n,r,i){var s=n("./zlib/inflate"),o=n("./utils/common"),a=n("./utils/strings"),c=n("./zlib/constants"),f=n("./zlib/messages"),b=n("./zlib/zstream"),g=n("./zlib/gzheader"),v=Object.prototype.toString;function u(h){if(!(this instanceof u))return new u(h);this.options=o.assign({chunkSize:16384,windowBits:0,to:""},h||{});var m=this.options;m.raw&&0<=m.windowBits&&m.windowBits<16&&(m.windowBits=-m.windowBits,m.windowBits===0&&(m.windowBits=-15)),!(0<=m.windowBits&&m.windowBits<16)||h&&h.windowBits||(m.windowBits+=32),15<m.windowBits&&m.windowBits<48&&!(15&m.windowBits)&&(m.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new b,this.strm.avail_out=0;var w=s.inflateInit2(this.strm,m.windowBits);if(w!==c.Z_OK)throw new Error(f[w]);this.header=new g,s.inflateGetHeader(this.strm,this.header)}function x(h,m){var w=new u(m);if(w.push(h,!0),w.err)throw w.msg||f[w.err];return w.result}u.prototype.push=function(h,m){var w,C,A,I,z,K,j=this.strm,V=this.options.chunkSize,F=this.options.dictionary,G=!1;if(this.ended)return!1;C=m===~~m?m:m===!0?c.Z_FINISH:c.Z_NO_FLUSH,typeof h=="string"?j.input=a.binstring2buf(h):v.call(h)==="[object ArrayBuffer]"?j.input=new Uint8Array(h):j.input=h,j.next_in=0,j.avail_in=j.input.length;do{if(j.avail_out===0&&(j.output=new o.Buf8(V),j.next_out=0,j.avail_out=V),(w=s.inflate(j,c.Z_NO_FLUSH))===c.Z_NEED_DICT&&F&&(K=typeof F=="string"?a.string2buf(F):v.call(F)==="[object ArrayBuffer]"?new Uint8Array(F):F,w=s.inflateSetDictionary(this.strm,K)),w===c.Z_BUF_ERROR&&G===!0&&(w=c.Z_OK,G=!1),w!==c.Z_STREAM_END&&w!==c.Z_OK)return this.onEnd(w),!(this.ended=!0);j.next_out&&(j.avail_out!==0&&w!==c.Z_STREAM_END&&(j.avail_in!==0||C!==c.Z_FINISH&&C!==c.Z_SYNC_FLUSH)||(this.options.to==="string"?(A=a.utf8border(j.output,j.next_out),I=j.next_out-A,z=a.buf2string(j.output,A),j.next_out=I,j.avail_out=V-I,I&&o.arraySet(j.output,j.output,A,I,0),this.onData(z)):this.onData(o.shrinkBuf(j.output,j.next_out)))),j.avail_in===0&&j.avail_out===0&&(G=!0)}while((0<j.avail_in||j.avail_out===0)&&w!==c.Z_STREAM_END);return w===c.Z_STREAM_END&&(C=c.Z_FINISH),C===c.Z_FINISH?(w=s.inflateEnd(this.strm),this.onEnd(w),this.ended=!0,w===c.Z_OK):C!==c.Z_SYNC_FLUSH||(this.onEnd(c.Z_OK),!(j.avail_out=0))},u.prototype.onData=function(h){this.chunks.push(h)},u.prototype.onEnd=function(h){h===c.Z_OK&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=h,this.msg=this.strm.msg},i.Inflate=u,i.inflate=x,i.inflateRaw=function(h,m){return(m=m||{}).raw=!0,x(h,m)},i.ungzip=x},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(n,r,i){var s=typeof Uint8Array<"u"&&typeof Uint16Array<"u"&&typeof Int32Array<"u";i.assign=function(c){for(var f=Array.prototype.slice.call(arguments,1);f.length;){var b=f.shift();if(b){if(typeof b!="object")throw new TypeError(b+"must be non-object");for(var g in b)b.hasOwnProperty(g)&&(c[g]=b[g])}}return c},i.shrinkBuf=function(c,f){return c.length===f?c:c.subarray?c.subarray(0,f):(c.length=f,c)};var o={arraySet:function(c,f,b,g,v){if(f.subarray&&c.subarray)c.set(f.subarray(b,b+g),v);else for(var u=0;u<g;u++)c[v+u]=f[b+u]},flattenChunks:function(c){var f,b,g,v,u,x;for(f=g=0,b=c.length;f<b;f++)g+=c[f].length;for(x=new Uint8Array(g),f=v=0,b=c.length;f<b;f++)u=c[f],x.set(u,v),v+=u.length;return x}},a={arraySet:function(c,f,b,g,v){for(var u=0;u<g;u++)c[v+u]=f[b+u]},flattenChunks:function(c){return[].concat.apply([],c)}};i.setTyped=function(c){c?(i.Buf8=Uint8Array,i.Buf16=Uint16Array,i.Buf32=Int32Array,i.assign(i,o)):(i.Buf8=Array,i.Buf16=Array,i.Buf32=Array,i.assign(i,a))},i.setTyped(s)},{}],42:[function(n,r,i){var s=n("./common"),o=!0,a=!0;try{String.fromCharCode.apply(null,[0])}catch{o=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch{a=!1}for(var c=new s.Buf8(256),f=0;f<256;f++)c[f]=252<=f?6:248<=f?5:240<=f?4:224<=f?3:192<=f?2:1;function b(g,v){if(v<65537&&(g.subarray&&a||!g.subarray&&o))return String.fromCharCode.apply(null,s.shrinkBuf(g,v));for(var u="",x=0;x<v;x++)u+=String.fromCharCode(g[x]);return u}c[254]=c[254]=1,i.string2buf=function(g){var v,u,x,h,m,w=g.length,C=0;for(h=0;h<w;h++)(64512&(u=g.charCodeAt(h)))==55296&&h+1<w&&(64512&(x=g.charCodeAt(h+1)))==56320&&(u=65536+(u-55296<<10)+(x-56320),h++),C+=u<128?1:u<2048?2:u<65536?3:4;for(v=new s.Buf8(C),h=m=0;m<C;h++)(64512&(u=g.charCodeAt(h)))==55296&&h+1<w&&(64512&(x=g.charCodeAt(h+1)))==56320&&(u=65536+(u-55296<<10)+(x-56320),h++),u<128?v[m++]=u:(u<2048?v[m++]=192|u>>>6:(u<65536?v[m++]=224|u>>>12:(v[m++]=240|u>>>18,v[m++]=128|u>>>12&63),v[m++]=128|u>>>6&63),v[m++]=128|63&u);return v},i.buf2binstring=function(g){return b(g,g.length)},i.binstring2buf=function(g){for(var v=new s.Buf8(g.length),u=0,x=v.length;u<x;u++)v[u]=g.charCodeAt(u);return v},i.buf2string=function(g,v){var u,x,h,m,w=v||g.length,C=new Array(2*w);for(u=x=0;u<w;)if((h=g[u++])<128)C[x++]=h;else if(4<(m=c[h]))C[x++]=65533,u+=m-1;else{for(h&=m===2?31:m===3?15:7;1<m&&u<w;)h=h<<6|63&g[u++],m--;1<m?C[x++]=65533:h<65536?C[x++]=h:(h-=65536,C[x++]=55296|h>>10&1023,C[x++]=56320|1023&h)}return b(C,x)},i.utf8border=function(g,v){var u;for((v=v||g.length)>g.length&&(v=g.length),u=v-1;0<=u&&(192&g[u])==128;)u--;return u<0||u===0?v:u+c[g[u]]>v?u:v}},{"./common":41}],43:[function(n,r,i){r.exports=function(s,o,a,c){for(var f=65535&s|0,b=s>>>16&65535|0,g=0;a!==0;){for(a-=g=2e3<a?2e3:a;b=b+(f=f+o[c++]|0)|0,--g;);f%=65521,b%=65521}return f|b<<16|0}},{}],44:[function(n,r,i){r.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(n,r,i){var s=function(){for(var o,a=[],c=0;c<256;c++){o=c;for(var f=0;f<8;f++)o=1&o?3988292384^o>>>1:o>>>1;a[c]=o}return a}();r.exports=function(o,a,c,f){var b=s,g=f+c;o^=-1;for(var v=f;v<g;v++)o=o>>>8^b[255&(o^a[v])];return-1^o}},{}],46:[function(n,r,i){var s,o=n("../utils/common"),a=n("./trees"),c=n("./adler32"),f=n("./crc32"),b=n("./messages"),g=0,v=4,u=0,x=-2,h=-1,m=4,w=2,C=8,A=9,I=286,z=30,K=19,j=2*I+1,V=15,F=3,G=258,st=G+F+1,S=42,W=113,d=1,q=2,at=3,H=4;function ot(l,P){return l.msg=b[P],P}function X(l){return(l<<1)-(4<l?9:0)}function rt(l){for(var P=l.length;0<=--P;)l[P]=0}function M(l){var P=l.state,E=P.pending;E>l.avail_out&&(E=l.avail_out),E!==0&&(o.arraySet(l.output,P.pending_buf,P.pending_out,E,l.next_out),l.next_out+=E,P.pending_out+=E,l.total_out+=E,l.avail_out-=E,P.pending-=E,P.pending===0&&(P.pending_out=0))}function L(l,P){a._tr_flush_block(l,0<=l.block_start?l.block_start:-1,l.strstart-l.block_start,P),l.block_start=l.strstart,M(l.strm)}function ut(l,P){l.pending_buf[l.pending++]=P}function it(l,P){l.pending_buf[l.pending++]=P>>>8&255,l.pending_buf[l.pending++]=255&P}function tt(l,P){var E,_,p=l.max_chain_length,T=l.strstart,$=l.prev_length,D=l.nice_match,O=l.strstart>l.w_size-st?l.strstart-(l.w_size-st):0,U=l.window,J=l.w_mask,Z=l.prev,Q=l.strstart+G,N=U[T+$-1],R=U[T+$];l.prev_length>=l.good_match&&(p>>=2),D>l.lookahead&&(D=l.lookahead);do if(U[(E=P)+$]===R&&U[E+$-1]===N&&U[E]===U[T]&&U[++E]===U[T+1]){T+=2,E++;do;while(U[++T]===U[++E]&&U[++T]===U[++E]&&U[++T]===U[++E]&&U[++T]===U[++E]&&U[++T]===U[++E]&&U[++T]===U[++E]&&U[++T]===U[++E]&&U[++T]===U[++E]&&T<Q);if(_=G-(Q-T),T=Q-G,$<_){if(l.match_start=P,D<=($=_))break;N=U[T+$-1],R=U[T+$]}}while((P=Z[P&J])>O&&--p!=0);return $<=l.lookahead?$:l.lookahead}function _t(l){var P,E,_,p,T,$,D,O,U,J,Z=l.w_size;do{if(p=l.window_size-l.lookahead-l.strstart,l.strstart>=Z+(Z-st)){for(o.arraySet(l.window,l.window,Z,Z,0),l.match_start-=Z,l.strstart-=Z,l.block_start-=Z,P=E=l.hash_size;_=l.head[--P],l.head[P]=Z<=_?_-Z:0,--E;);for(P=E=Z;_=l.prev[--P],l.prev[P]=Z<=_?_-Z:0,--E;);p+=Z}if(l.strm.avail_in===0)break;if($=l.strm,D=l.window,O=l.strstart+l.lookahead,U=p,J=void 0,J=$.avail_in,U<J&&(J=U),E=J===0?0:($.avail_in-=J,o.arraySet(D,$.input,$.next_in,J,O),$.state.wrap===1?$.adler=c($.adler,D,J,O):$.state.wrap===2&&($.adler=f($.adler,D,J,O)),$.next_in+=J,$.total_in+=J,J),l.lookahead+=E,l.lookahead+l.insert>=F)for(T=l.strstart-l.insert,l.ins_h=l.window[T],l.ins_h=(l.ins_h<<l.hash_shift^l.window[T+1])&l.hash_mask;l.insert&&(l.ins_h=(l.ins_h<<l.hash_shift^l.window[T+F-1])&l.hash_mask,l.prev[T&l.w_mask]=l.head[l.ins_h],l.head[l.ins_h]=T,T++,l.insert--,!(l.lookahead+l.insert<F)););}while(l.lookahead<st&&l.strm.avail_in!==0)}function kt(l,P){for(var E,_;;){if(l.lookahead<st){if(_t(l),l.lookahead<st&&P===g)return d;if(l.lookahead===0)break}if(E=0,l.lookahead>=F&&(l.ins_h=(l.ins_h<<l.hash_shift^l.window[l.strstart+F-1])&l.hash_mask,E=l.prev[l.strstart&l.w_mask]=l.head[l.ins_h],l.head[l.ins_h]=l.strstart),E!==0&&l.strstart-E<=l.w_size-st&&(l.match_length=tt(l,E)),l.match_length>=F)if(_=a._tr_tally(l,l.strstart-l.match_start,l.match_length-F),l.lookahead-=l.match_length,l.match_length<=l.max_lazy_match&&l.lookahead>=F){for(l.match_length--;l.strstart++,l.ins_h=(l.ins_h<<l.hash_shift^l.window[l.strstart+F-1])&l.hash_mask,E=l.prev[l.strstart&l.w_mask]=l.head[l.ins_h],l.head[l.ins_h]=l.strstart,--l.match_length!=0;);l.strstart++}else l.strstart+=l.match_length,l.match_length=0,l.ins_h=l.window[l.strstart],l.ins_h=(l.ins_h<<l.hash_shift^l.window[l.strstart+1])&l.hash_mask;else _=a._tr_tally(l,0,l.window[l.strstart]),l.lookahead--,l.strstart++;if(_&&(L(l,!1),l.strm.avail_out===0))return d}return l.insert=l.strstart<F-1?l.strstart:F-1,P===v?(L(l,!0),l.strm.avail_out===0?at:H):l.last_lit&&(L(l,!1),l.strm.avail_out===0)?d:q}function vt(l,P){for(var E,_,p;;){if(l.lookahead<st){if(_t(l),l.lookahead<st&&P===g)return d;if(l.lookahead===0)break}if(E=0,l.lookahead>=F&&(l.ins_h=(l.ins_h<<l.hash_shift^l.window[l.strstart+F-1])&l.hash_mask,E=l.prev[l.strstart&l.w_mask]=l.head[l.ins_h],l.head[l.ins_h]=l.strstart),l.prev_length=l.match_length,l.prev_match=l.match_start,l.match_length=F-1,E!==0&&l.prev_length<l.max_lazy_match&&l.strstart-E<=l.w_size-st&&(l.match_length=tt(l,E),l.match_length<=5&&(l.strategy===1||l.match_length===F&&4096<l.strstart-l.match_start)&&(l.match_length=F-1)),l.prev_length>=F&&l.match_length<=l.prev_length){for(p=l.strstart+l.lookahead-F,_=a._tr_tally(l,l.strstart-1-l.prev_match,l.prev_length-F),l.lookahead-=l.prev_length-1,l.prev_length-=2;++l.strstart<=p&&(l.ins_h=(l.ins_h<<l.hash_shift^l.window[l.strstart+F-1])&l.hash_mask,E=l.prev[l.strstart&l.w_mask]=l.head[l.ins_h],l.head[l.ins_h]=l.strstart),--l.prev_length!=0;);if(l.match_available=0,l.match_length=F-1,l.strstart++,_&&(L(l,!1),l.strm.avail_out===0))return d}else if(l.match_available){if((_=a._tr_tally(l,0,l.window[l.strstart-1]))&&L(l,!1),l.strstart++,l.lookahead--,l.strm.avail_out===0)return d}else l.match_available=1,l.strstart++,l.lookahead--}return l.match_available&&(_=a._tr_tally(l,0,l.window[l.strstart-1]),l.match_available=0),l.insert=l.strstart<F-1?l.strstart:F-1,P===v?(L(l,!0),l.strm.avail_out===0?at:H):l.last_lit&&(L(l,!1),l.strm.avail_out===0)?d:q}function mt(l,P,E,_,p){this.good_length=l,this.max_lazy=P,this.nice_length=E,this.max_chain=_,this.func=p}function et(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=C,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new o.Buf16(2*j),this.dyn_dtree=new o.Buf16(2*(2*z+1)),this.bl_tree=new o.Buf16(2*(2*K+1)),rt(this.dyn_ltree),rt(this.dyn_dtree),rt(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new o.Buf16(V+1),this.heap=new o.Buf16(2*I+1),rt(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new o.Buf16(2*I+1),rt(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function Y(l){var P;return l&&l.state?(l.total_in=l.total_out=0,l.data_type=w,(P=l.state).pending=0,P.pending_out=0,P.wrap<0&&(P.wrap=-P.wrap),P.status=P.wrap?S:W,l.adler=P.wrap===2?0:1,P.last_flush=g,a._tr_init(P),u):ot(l,x)}function k(l){var P=Y(l);return P===u&&function(E){E.window_size=2*E.w_size,rt(E.head),E.max_lazy_match=s[E.level].max_lazy,E.good_match=s[E.level].good_length,E.nice_match=s[E.level].nice_length,E.max_chain_length=s[E.level].max_chain,E.strstart=0,E.block_start=0,E.lookahead=0,E.insert=0,E.match_length=E.prev_length=F-1,E.match_available=0,E.ins_h=0}(l.state),P}function B(l,P,E,_,p,T){if(!l)return x;var $=1;if(P===h&&(P=6),_<0?($=0,_=-_):15<_&&($=2,_-=16),p<1||A<p||E!==C||_<8||15<_||P<0||9<P||T<0||m<T)return ot(l,x);_===8&&(_=9);var D=new et;return(l.state=D).strm=l,D.wrap=$,D.gzhead=null,D.w_bits=_,D.w_size=1<<D.w_bits,D.w_mask=D.w_size-1,D.hash_bits=p+7,D.hash_size=1<<D.hash_bits,D.hash_mask=D.hash_size-1,D.hash_shift=~~((D.hash_bits+F-1)/F),D.window=new o.Buf8(2*D.w_size),D.head=new o.Buf16(D.hash_size),D.prev=new o.Buf16(D.w_size),D.lit_bufsize=1<<p+6,D.pending_buf_size=4*D.lit_bufsize,D.pending_buf=new o.Buf8(D.pending_buf_size),D.d_buf=1*D.lit_bufsize,D.l_buf=3*D.lit_bufsize,D.level=P,D.strategy=T,D.method=E,k(l)}s=[new mt(0,0,0,0,function(l,P){var E=65535;for(E>l.pending_buf_size-5&&(E=l.pending_buf_size-5);;){if(l.lookahead<=1){if(_t(l),l.lookahead===0&&P===g)return d;if(l.lookahead===0)break}l.strstart+=l.lookahead,l.lookahead=0;var _=l.block_start+E;if((l.strstart===0||l.strstart>=_)&&(l.lookahead=l.strstart-_,l.strstart=_,L(l,!1),l.strm.avail_out===0)||l.strstart-l.block_start>=l.w_size-st&&(L(l,!1),l.strm.avail_out===0))return d}return l.insert=0,P===v?(L(l,!0),l.strm.avail_out===0?at:H):(l.strstart>l.block_start&&(L(l,!1),l.strm.avail_out),d)}),new mt(4,4,8,4,kt),new mt(4,5,16,8,kt),new mt(4,6,32,32,kt),new mt(4,4,16,16,vt),new mt(8,16,32,32,vt),new mt(8,16,128,128,vt),new mt(8,32,128,256,vt),new mt(32,128,258,1024,vt),new mt(32,258,258,4096,vt)],i.deflateInit=function(l,P){return B(l,P,C,15,8,0)},i.deflateInit2=B,i.deflateReset=k,i.deflateResetKeep=Y,i.deflateSetHeader=function(l,P){return l&&l.state?l.state.wrap!==2?x:(l.state.gzhead=P,u):x},i.deflate=function(l,P){var E,_,p,T;if(!l||!l.state||5<P||P<0)return l?ot(l,x):x;if(_=l.state,!l.output||!l.input&&l.avail_in!==0||_.status===666&&P!==v)return ot(l,l.avail_out===0?-5:x);if(_.strm=l,E=_.last_flush,_.last_flush=P,_.status===S)if(_.wrap===2)l.adler=0,ut(_,31),ut(_,139),ut(_,8),_.gzhead?(ut(_,(_.gzhead.text?1:0)+(_.gzhead.hcrc?2:0)+(_.gzhead.extra?4:0)+(_.gzhead.name?8:0)+(_.gzhead.comment?16:0)),ut(_,255&_.gzhead.time),ut(_,_.gzhead.time>>8&255),ut(_,_.gzhead.time>>16&255),ut(_,_.gzhead.time>>24&255),ut(_,_.level===9?2:2<=_.strategy||_.level<2?4:0),ut(_,255&_.gzhead.os),_.gzhead.extra&&_.gzhead.extra.length&&(ut(_,255&_.gzhead.extra.length),ut(_,_.gzhead.extra.length>>8&255)),_.gzhead.hcrc&&(l.adler=f(l.adler,_.pending_buf,_.pending,0)),_.gzindex=0,_.status=69):(ut(_,0),ut(_,0),ut(_,0),ut(_,0),ut(_,0),ut(_,_.level===9?2:2<=_.strategy||_.level<2?4:0),ut(_,3),_.status=W);else{var $=C+(_.w_bits-8<<4)<<8;$|=(2<=_.strategy||_.level<2?0:_.level<6?1:_.level===6?2:3)<<6,_.strstart!==0&&($|=32),$+=31-$%31,_.status=W,it(_,$),_.strstart!==0&&(it(_,l.adler>>>16),it(_,65535&l.adler)),l.adler=1}if(_.status===69)if(_.gzhead.extra){for(p=_.pending;_.gzindex<(65535&_.gzhead.extra.length)&&(_.pending!==_.pending_buf_size||(_.gzhead.hcrc&&_.pending>p&&(l.adler=f(l.adler,_.pending_buf,_.pending-p,p)),M(l),p=_.pending,_.pending!==_.pending_buf_size));)ut(_,255&_.gzhead.extra[_.gzindex]),_.gzindex++;_.gzhead.hcrc&&_.pending>p&&(l.adler=f(l.adler,_.pending_buf,_.pending-p,p)),_.gzindex===_.gzhead.extra.length&&(_.gzindex=0,_.status=73)}else _.status=73;if(_.status===73)if(_.gzhead.name){p=_.pending;do{if(_.pending===_.pending_buf_size&&(_.gzhead.hcrc&&_.pending>p&&(l.adler=f(l.adler,_.pending_buf,_.pending-p,p)),M(l),p=_.pending,_.pending===_.pending_buf_size)){T=1;break}T=_.gzindex<_.gzhead.name.length?255&_.gzhead.name.charCodeAt(_.gzindex++):0,ut(_,T)}while(T!==0);_.gzhead.hcrc&&_.pending>p&&(l.adler=f(l.adler,_.pending_buf,_.pending-p,p)),T===0&&(_.gzindex=0,_.status=91)}else _.status=91;if(_.status===91)if(_.gzhead.comment){p=_.pending;do{if(_.pending===_.pending_buf_size&&(_.gzhead.hcrc&&_.pending>p&&(l.adler=f(l.adler,_.pending_buf,_.pending-p,p)),M(l),p=_.pending,_.pending===_.pending_buf_size)){T=1;break}T=_.gzindex<_.gzhead.comment.length?255&_.gzhead.comment.charCodeAt(_.gzindex++):0,ut(_,T)}while(T!==0);_.gzhead.hcrc&&_.pending>p&&(l.adler=f(l.adler,_.pending_buf,_.pending-p,p)),T===0&&(_.status=103)}else _.status=103;if(_.status===103&&(_.gzhead.hcrc?(_.pending+2>_.pending_buf_size&&M(l),_.pending+2<=_.pending_buf_size&&(ut(_,255&l.adler),ut(_,l.adler>>8&255),l.adler=0,_.status=W)):_.status=W),_.pending!==0){if(M(l),l.avail_out===0)return _.last_flush=-1,u}else if(l.avail_in===0&&X(P)<=X(E)&&P!==v)return ot(l,-5);if(_.status===666&&l.avail_in!==0)return ot(l,-5);if(l.avail_in!==0||_.lookahead!==0||P!==g&&_.status!==666){var D=_.strategy===2?function(O,U){for(var J;;){if(O.lookahead===0&&(_t(O),O.lookahead===0)){if(U===g)return d;break}if(O.match_length=0,J=a._tr_tally(O,0,O.window[O.strstart]),O.lookahead--,O.strstart++,J&&(L(O,!1),O.strm.avail_out===0))return d}return O.insert=0,U===v?(L(O,!0),O.strm.avail_out===0?at:H):O.last_lit&&(L(O,!1),O.strm.avail_out===0)?d:q}(_,P):_.strategy===3?function(O,U){for(var J,Z,Q,N,R=O.window;;){if(O.lookahead<=G){if(_t(O),O.lookahead<=G&&U===g)return d;if(O.lookahead===0)break}if(O.match_length=0,O.lookahead>=F&&0<O.strstart&&(Z=R[Q=O.strstart-1])===R[++Q]&&Z===R[++Q]&&Z===R[++Q]){N=O.strstart+G;do;while(Z===R[++Q]&&Z===R[++Q]&&Z===R[++Q]&&Z===R[++Q]&&Z===R[++Q]&&Z===R[++Q]&&Z===R[++Q]&&Z===R[++Q]&&Q<N);O.match_length=G-(N-Q),O.match_length>O.lookahead&&(O.match_length=O.lookahead)}if(O.match_length>=F?(J=a._tr_tally(O,1,O.match_length-F),O.lookahead-=O.match_length,O.strstart+=O.match_length,O.match_length=0):(J=a._tr_tally(O,0,O.window[O.strstart]),O.lookahead--,O.strstart++),J&&(L(O,!1),O.strm.avail_out===0))return d}return O.insert=0,U===v?(L(O,!0),O.strm.avail_out===0?at:H):O.last_lit&&(L(O,!1),O.strm.avail_out===0)?d:q}(_,P):s[_.level].func(_,P);if(D!==at&&D!==H||(_.status=666),D===d||D===at)return l.avail_out===0&&(_.last_flush=-1),u;if(D===q&&(P===1?a._tr_align(_):P!==5&&(a._tr_stored_block(_,0,0,!1),P===3&&(rt(_.head),_.lookahead===0&&(_.strstart=0,_.block_start=0,_.insert=0))),M(l),l.avail_out===0))return _.last_flush=-1,u}return P!==v?u:_.wrap<=0?1:(_.wrap===2?(ut(_,255&l.adler),ut(_,l.adler>>8&255),ut(_,l.adler>>16&255),ut(_,l.adler>>24&255),ut(_,255&l.total_in),ut(_,l.total_in>>8&255),ut(_,l.total_in>>16&255),ut(_,l.total_in>>24&255)):(it(_,l.adler>>>16),it(_,65535&l.adler)),M(l),0<_.wrap&&(_.wrap=-_.wrap),_.pending!==0?u:1)},i.deflateEnd=function(l){var P;return l&&l.state?(P=l.state.status)!==S&&P!==69&&P!==73&&P!==91&&P!==103&&P!==W&&P!==666?ot(l,x):(l.state=null,P===W?ot(l,-3):u):x},i.deflateSetDictionary=function(l,P){var E,_,p,T,$,D,O,U,J=P.length;if(!l||!l.state||(T=(E=l.state).wrap)===2||T===1&&E.status!==S||E.lookahead)return x;for(T===1&&(l.adler=c(l.adler,P,J,0)),E.wrap=0,J>=E.w_size&&(T===0&&(rt(E.head),E.strstart=0,E.block_start=0,E.insert=0),U=new o.Buf8(E.w_size),o.arraySet(U,P,J-E.w_size,E.w_size,0),P=U,J=E.w_size),$=l.avail_in,D=l.next_in,O=l.input,l.avail_in=J,l.next_in=0,l.input=P,_t(E);E.lookahead>=F;){for(_=E.strstart,p=E.lookahead-(F-1);E.ins_h=(E.ins_h<<E.hash_shift^E.window[_+F-1])&E.hash_mask,E.prev[_&E.w_mask]=E.head[E.ins_h],E.head[E.ins_h]=_,_++,--p;);E.strstart=_,E.lookahead=F-1,_t(E)}return E.strstart+=E.lookahead,E.block_start=E.strstart,E.insert=E.lookahead,E.lookahead=0,E.match_length=E.prev_length=F-1,E.match_available=0,l.next_in=D,l.input=O,l.avail_in=$,E.wrap=T,u},i.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(n,r,i){r.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],48:[function(n,r,i){r.exports=function(s,o){var a,c,f,b,g,v,u,x,h,m,w,C,A,I,z,K,j,V,F,G,st,S,W,d,q;a=s.state,c=s.next_in,d=s.input,f=c+(s.avail_in-5),b=s.next_out,q=s.output,g=b-(o-s.avail_out),v=b+(s.avail_out-257),u=a.dmax,x=a.wsize,h=a.whave,m=a.wnext,w=a.window,C=a.hold,A=a.bits,I=a.lencode,z=a.distcode,K=(1<<a.lenbits)-1,j=(1<<a.distbits)-1;t:do{A<15&&(C+=d[c++]<<A,A+=8,C+=d[c++]<<A,A+=8),V=I[C&K];e:for(;;){if(C>>>=F=V>>>24,A-=F,(F=V>>>16&255)===0)q[b++]=65535&V;else{if(!(16&F)){if(!(64&F)){V=I[(65535&V)+(C&(1<<F)-1)];continue e}if(32&F){a.mode=12;break t}s.msg="invalid literal/length code",a.mode=30;break t}G=65535&V,(F&=15)&&(A<F&&(C+=d[c++]<<A,A+=8),G+=C&(1<<F)-1,C>>>=F,A-=F),A<15&&(C+=d[c++]<<A,A+=8,C+=d[c++]<<A,A+=8),V=z[C&j];n:for(;;){if(C>>>=F=V>>>24,A-=F,!(16&(F=V>>>16&255))){if(!(64&F)){V=z[(65535&V)+(C&(1<<F)-1)];continue n}s.msg="invalid distance code",a.mode=30;break t}if(st=65535&V,A<(F&=15)&&(C+=d[c++]<<A,(A+=8)<F&&(C+=d[c++]<<A,A+=8)),u<(st+=C&(1<<F)-1)){s.msg="invalid distance too far back",a.mode=30;break t}if(C>>>=F,A-=F,(F=b-g)<st){if(h<(F=st-F)&&a.sane){s.msg="invalid distance too far back",a.mode=30;break t}if(W=w,(S=0)===m){if(S+=x-F,F<G){for(G-=F;q[b++]=w[S++],--F;);S=b-st,W=q}}else if(m<F){if(S+=x+m-F,(F-=m)<G){for(G-=F;q[b++]=w[S++],--F;);if(S=0,m<G){for(G-=F=m;q[b++]=w[S++],--F;);S=b-st,W=q}}}else if(S+=m-F,F<G){for(G-=F;q[b++]=w[S++],--F;);S=b-st,W=q}for(;2<G;)q[b++]=W[S++],q[b++]=W[S++],q[b++]=W[S++],G-=3;G&&(q[b++]=W[S++],1<G&&(q[b++]=W[S++]))}else{for(S=b-st;q[b++]=q[S++],q[b++]=q[S++],q[b++]=q[S++],2<(G-=3););G&&(q[b++]=q[S++],1<G&&(q[b++]=q[S++]))}break}}break}}while(c<f&&b<v);c-=G=A>>3,C&=(1<<(A-=G<<3))-1,s.next_in=c,s.next_out=b,s.avail_in=c<f?f-c+5:5-(c-f),s.avail_out=b<v?v-b+257:257-(b-v),a.hold=C,a.bits=A}},{}],49:[function(n,r,i){var s=n("../utils/common"),o=n("./adler32"),a=n("./crc32"),c=n("./inffast"),f=n("./inftrees"),b=1,g=2,v=0,u=-2,x=1,h=852,m=592;function w(S){return(S>>>24&255)+(S>>>8&65280)+((65280&S)<<8)+((255&S)<<24)}function C(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new s.Buf16(320),this.work=new s.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function A(S){var W;return S&&S.state?(W=S.state,S.total_in=S.total_out=W.total=0,S.msg="",W.wrap&&(S.adler=1&W.wrap),W.mode=x,W.last=0,W.havedict=0,W.dmax=32768,W.head=null,W.hold=0,W.bits=0,W.lencode=W.lendyn=new s.Buf32(h),W.distcode=W.distdyn=new s.Buf32(m),W.sane=1,W.back=-1,v):u}function I(S){var W;return S&&S.state?((W=S.state).wsize=0,W.whave=0,W.wnext=0,A(S)):u}function z(S,W){var d,q;return S&&S.state?(q=S.state,W<0?(d=0,W=-W):(d=1+(W>>4),W<48&&(W&=15)),W&&(W<8||15<W)?u:(q.window!==null&&q.wbits!==W&&(q.window=null),q.wrap=d,q.wbits=W,I(S))):u}function K(S,W){var d,q;return S?(q=new C,(S.state=q).window=null,(d=z(S,W))!==v&&(S.state=null),d):u}var j,V,F=!0;function G(S){if(F){var W;for(j=new s.Buf32(512),V=new s.Buf32(32),W=0;W<144;)S.lens[W++]=8;for(;W<256;)S.lens[W++]=9;for(;W<280;)S.lens[W++]=7;for(;W<288;)S.lens[W++]=8;for(f(b,S.lens,0,288,j,0,S.work,{bits:9}),W=0;W<32;)S.lens[W++]=5;f(g,S.lens,0,32,V,0,S.work,{bits:5}),F=!1}S.lencode=j,S.lenbits=9,S.distcode=V,S.distbits=5}function st(S,W,d,q){var at,H=S.state;return H.window===null&&(H.wsize=1<<H.wbits,H.wnext=0,H.whave=0,H.window=new s.Buf8(H.wsize)),q>=H.wsize?(s.arraySet(H.window,W,d-H.wsize,H.wsize,0),H.wnext=0,H.whave=H.wsize):(q<(at=H.wsize-H.wnext)&&(at=q),s.arraySet(H.window,W,d-q,at,H.wnext),(q-=at)?(s.arraySet(H.window,W,d-q,q,0),H.wnext=q,H.whave=H.wsize):(H.wnext+=at,H.wnext===H.wsize&&(H.wnext=0),H.whave<H.wsize&&(H.whave+=at))),0}i.inflateReset=I,i.inflateReset2=z,i.inflateResetKeep=A,i.inflateInit=function(S){return K(S,15)},i.inflateInit2=K,i.inflate=function(S,W){var d,q,at,H,ot,X,rt,M,L,ut,it,tt,_t,kt,vt,mt,et,Y,k,B,l,P,E,_,p=0,T=new s.Buf8(4),$=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!S||!S.state||!S.output||!S.input&&S.avail_in!==0)return u;(d=S.state).mode===12&&(d.mode=13),ot=S.next_out,at=S.output,rt=S.avail_out,H=S.next_in,q=S.input,X=S.avail_in,M=d.hold,L=d.bits,ut=X,it=rt,P=v;t:for(;;)switch(d.mode){case x:if(d.wrap===0){d.mode=13;break}for(;L<16;){if(X===0)break t;X--,M+=q[H++]<<L,L+=8}if(2&d.wrap&&M===35615){T[d.check=0]=255&M,T[1]=M>>>8&255,d.check=a(d.check,T,2,0),L=M=0,d.mode=2;break}if(d.flags=0,d.head&&(d.head.done=!1),!(1&d.wrap)||(((255&M)<<8)+(M>>8))%31){S.msg="incorrect header check",d.mode=30;break}if((15&M)!=8){S.msg="unknown compression method",d.mode=30;break}if(L-=4,l=8+(15&(M>>>=4)),d.wbits===0)d.wbits=l;else if(l>d.wbits){S.msg="invalid window size",d.mode=30;break}d.dmax=1<<l,S.adler=d.check=1,d.mode=512&M?10:12,L=M=0;break;case 2:for(;L<16;){if(X===0)break t;X--,M+=q[H++]<<L,L+=8}if(d.flags=M,(255&d.flags)!=8){S.msg="unknown compression method",d.mode=30;break}if(57344&d.flags){S.msg="unknown header flags set",d.mode=30;break}d.head&&(d.head.text=M>>8&1),512&d.flags&&(T[0]=255&M,T[1]=M>>>8&255,d.check=a(d.check,T,2,0)),L=M=0,d.mode=3;case 3:for(;L<32;){if(X===0)break t;X--,M+=q[H++]<<L,L+=8}d.head&&(d.head.time=M),512&d.flags&&(T[0]=255&M,T[1]=M>>>8&255,T[2]=M>>>16&255,T[3]=M>>>24&255,d.check=a(d.check,T,4,0)),L=M=0,d.mode=4;case 4:for(;L<16;){if(X===0)break t;X--,M+=q[H++]<<L,L+=8}d.head&&(d.head.xflags=255&M,d.head.os=M>>8),512&d.flags&&(T[0]=255&M,T[1]=M>>>8&255,d.check=a(d.check,T,2,0)),L=M=0,d.mode=5;case 5:if(1024&d.flags){for(;L<16;){if(X===0)break t;X--,M+=q[H++]<<L,L+=8}d.length=M,d.head&&(d.head.extra_len=M),512&d.flags&&(T[0]=255&M,T[1]=M>>>8&255,d.check=a(d.check,T,2,0)),L=M=0}else d.head&&(d.head.extra=null);d.mode=6;case 6:if(1024&d.flags&&(X<(tt=d.length)&&(tt=X),tt&&(d.head&&(l=d.head.extra_len-d.length,d.head.extra||(d.head.extra=new Array(d.head.extra_len)),s.arraySet(d.head.extra,q,H,tt,l)),512&d.flags&&(d.check=a(d.check,q,tt,H)),X-=tt,H+=tt,d.length-=tt),d.length))break t;d.length=0,d.mode=7;case 7:if(2048&d.flags){if(X===0)break t;for(tt=0;l=q[H+tt++],d.head&&l&&d.length<65536&&(d.head.name+=String.fromCharCode(l)),l&&tt<X;);if(512&d.flags&&(d.check=a(d.check,q,tt,H)),X-=tt,H+=tt,l)break t}else d.head&&(d.head.name=null);d.length=0,d.mode=8;case 8:if(4096&d.flags){if(X===0)break t;for(tt=0;l=q[H+tt++],d.head&&l&&d.length<65536&&(d.head.comment+=String.fromCharCode(l)),l&&tt<X;);if(512&d.flags&&(d.check=a(d.check,q,tt,H)),X-=tt,H+=tt,l)break t}else d.head&&(d.head.comment=null);d.mode=9;case 9:if(512&d.flags){for(;L<16;){if(X===0)break t;X--,M+=q[H++]<<L,L+=8}if(M!==(65535&d.check)){S.msg="header crc mismatch",d.mode=30;break}L=M=0}d.head&&(d.head.hcrc=d.flags>>9&1,d.head.done=!0),S.adler=d.check=0,d.mode=12;break;case 10:for(;L<32;){if(X===0)break t;X--,M+=q[H++]<<L,L+=8}S.adler=d.check=w(M),L=M=0,d.mode=11;case 11:if(d.havedict===0)return S.next_out=ot,S.avail_out=rt,S.next_in=H,S.avail_in=X,d.hold=M,d.bits=L,2;S.adler=d.check=1,d.mode=12;case 12:if(W===5||W===6)break t;case 13:if(d.last){M>>>=7&L,L-=7&L,d.mode=27;break}for(;L<3;){if(X===0)break t;X--,M+=q[H++]<<L,L+=8}switch(d.last=1&M,L-=1,3&(M>>>=1)){case 0:d.mode=14;break;case 1:if(G(d),d.mode=20,W!==6)break;M>>>=2,L-=2;break t;case 2:d.mode=17;break;case 3:S.msg="invalid block type",d.mode=30}M>>>=2,L-=2;break;case 14:for(M>>>=7&L,L-=7&L;L<32;){if(X===0)break t;X--,M+=q[H++]<<L,L+=8}if((65535&M)!=(M>>>16^65535)){S.msg="invalid stored block lengths",d.mode=30;break}if(d.length=65535&M,L=M=0,d.mode=15,W===6)break t;case 15:d.mode=16;case 16:if(tt=d.length){if(X<tt&&(tt=X),rt<tt&&(tt=rt),tt===0)break t;s.arraySet(at,q,H,tt,ot),X-=tt,H+=tt,rt-=tt,ot+=tt,d.length-=tt;break}d.mode=12;break;case 17:for(;L<14;){if(X===0)break t;X--,M+=q[H++]<<L,L+=8}if(d.nlen=257+(31&M),M>>>=5,L-=5,d.ndist=1+(31&M),M>>>=5,L-=5,d.ncode=4+(15&M),M>>>=4,L-=4,286<d.nlen||30<d.ndist){S.msg="too many length or distance symbols",d.mode=30;break}d.have=0,d.mode=18;case 18:for(;d.have<d.ncode;){for(;L<3;){if(X===0)break t;X--,M+=q[H++]<<L,L+=8}d.lens[$[d.have++]]=7&M,M>>>=3,L-=3}for(;d.have<19;)d.lens[$[d.have++]]=0;if(d.lencode=d.lendyn,d.lenbits=7,E={bits:d.lenbits},P=f(0,d.lens,0,19,d.lencode,0,d.work,E),d.lenbits=E.bits,P){S.msg="invalid code lengths set",d.mode=30;break}d.have=0,d.mode=19;case 19:for(;d.have<d.nlen+d.ndist;){for(;mt=(p=d.lencode[M&(1<<d.lenbits)-1])>>>16&255,et=65535&p,!((vt=p>>>24)<=L);){if(X===0)break t;X--,M+=q[H++]<<L,L+=8}if(et<16)M>>>=vt,L-=vt,d.lens[d.have++]=et;else{if(et===16){for(_=vt+2;L<_;){if(X===0)break t;X--,M+=q[H++]<<L,L+=8}if(M>>>=vt,L-=vt,d.have===0){S.msg="invalid bit length repeat",d.mode=30;break}l=d.lens[d.have-1],tt=3+(3&M),M>>>=2,L-=2}else if(et===17){for(_=vt+3;L<_;){if(X===0)break t;X--,M+=q[H++]<<L,L+=8}L-=vt,l=0,tt=3+(7&(M>>>=vt)),M>>>=3,L-=3}else{for(_=vt+7;L<_;){if(X===0)break t;X--,M+=q[H++]<<L,L+=8}L-=vt,l=0,tt=11+(127&(M>>>=vt)),M>>>=7,L-=7}if(d.have+tt>d.nlen+d.ndist){S.msg="invalid bit length repeat",d.mode=30;break}for(;tt--;)d.lens[d.have++]=l}}if(d.mode===30)break;if(d.lens[256]===0){S.msg="invalid code -- missing end-of-block",d.mode=30;break}if(d.lenbits=9,E={bits:d.lenbits},P=f(b,d.lens,0,d.nlen,d.lencode,0,d.work,E),d.lenbits=E.bits,P){S.msg="invalid literal/lengths set",d.mode=30;break}if(d.distbits=6,d.distcode=d.distdyn,E={bits:d.distbits},P=f(g,d.lens,d.nlen,d.ndist,d.distcode,0,d.work,E),d.distbits=E.bits,P){S.msg="invalid distances set",d.mode=30;break}if(d.mode=20,W===6)break t;case 20:d.mode=21;case 21:if(6<=X&&258<=rt){S.next_out=ot,S.avail_out=rt,S.next_in=H,S.avail_in=X,d.hold=M,d.bits=L,c(S,it),ot=S.next_out,at=S.output,rt=S.avail_out,H=S.next_in,q=S.input,X=S.avail_in,M=d.hold,L=d.bits,d.mode===12&&(d.back=-1);break}for(d.back=0;mt=(p=d.lencode[M&(1<<d.lenbits)-1])>>>16&255,et=65535&p,!((vt=p>>>24)<=L);){if(X===0)break t;X--,M+=q[H++]<<L,L+=8}if(mt&&!(240&mt)){for(Y=vt,k=mt,B=et;mt=(p=d.lencode[B+((M&(1<<Y+k)-1)>>Y)])>>>16&255,et=65535&p,!(Y+(vt=p>>>24)<=L);){if(X===0)break t;X--,M+=q[H++]<<L,L+=8}M>>>=Y,L-=Y,d.back+=Y}if(M>>>=vt,L-=vt,d.back+=vt,d.length=et,mt===0){d.mode=26;break}if(32&mt){d.back=-1,d.mode=12;break}if(64&mt){S.msg="invalid literal/length code",d.mode=30;break}d.extra=15&mt,d.mode=22;case 22:if(d.extra){for(_=d.extra;L<_;){if(X===0)break t;X--,M+=q[H++]<<L,L+=8}d.length+=M&(1<<d.extra)-1,M>>>=d.extra,L-=d.extra,d.back+=d.extra}d.was=d.length,d.mode=23;case 23:for(;mt=(p=d.distcode[M&(1<<d.distbits)-1])>>>16&255,et=65535&p,!((vt=p>>>24)<=L);){if(X===0)break t;X--,M+=q[H++]<<L,L+=8}if(!(240&mt)){for(Y=vt,k=mt,B=et;mt=(p=d.distcode[B+((M&(1<<Y+k)-1)>>Y)])>>>16&255,et=65535&p,!(Y+(vt=p>>>24)<=L);){if(X===0)break t;X--,M+=q[H++]<<L,L+=8}M>>>=Y,L-=Y,d.back+=Y}if(M>>>=vt,L-=vt,d.back+=vt,64&mt){S.msg="invalid distance code",d.mode=30;break}d.offset=et,d.extra=15&mt,d.mode=24;case 24:if(d.extra){for(_=d.extra;L<_;){if(X===0)break t;X--,M+=q[H++]<<L,L+=8}d.offset+=M&(1<<d.extra)-1,M>>>=d.extra,L-=d.extra,d.back+=d.extra}if(d.offset>d.dmax){S.msg="invalid distance too far back",d.mode=30;break}d.mode=25;case 25:if(rt===0)break t;if(tt=it-rt,d.offset>tt){if((tt=d.offset-tt)>d.whave&&d.sane){S.msg="invalid distance too far back",d.mode=30;break}_t=tt>d.wnext?(tt-=d.wnext,d.wsize-tt):d.wnext-tt,tt>d.length&&(tt=d.length),kt=d.window}else kt=at,_t=ot-d.offset,tt=d.length;for(rt<tt&&(tt=rt),rt-=tt,d.length-=tt;at[ot++]=kt[_t++],--tt;);d.length===0&&(d.mode=21);break;case 26:if(rt===0)break t;at[ot++]=d.length,rt--,d.mode=21;break;case 27:if(d.wrap){for(;L<32;){if(X===0)break t;X--,M|=q[H++]<<L,L+=8}if(it-=rt,S.total_out+=it,d.total+=it,it&&(S.adler=d.check=d.flags?a(d.check,at,it,ot-it):o(d.check,at,it,ot-it)),it=rt,(d.flags?M:w(M))!==d.check){S.msg="incorrect data check",d.mode=30;break}L=M=0}d.mode=28;case 28:if(d.wrap&&d.flags){for(;L<32;){if(X===0)break t;X--,M+=q[H++]<<L,L+=8}if(M!==(4294967295&d.total)){S.msg="incorrect length check",d.mode=30;break}L=M=0}d.mode=29;case 29:P=1;break t;case 30:P=-3;break t;case 31:return-4;case 32:default:return u}return S.next_out=ot,S.avail_out=rt,S.next_in=H,S.avail_in=X,d.hold=M,d.bits=L,(d.wsize||it!==S.avail_out&&d.mode<30&&(d.mode<27||W!==4))&&st(S,S.output,S.next_out,it-S.avail_out)?(d.mode=31,-4):(ut-=S.avail_in,it-=S.avail_out,S.total_in+=ut,S.total_out+=it,d.total+=it,d.wrap&&it&&(S.adler=d.check=d.flags?a(d.check,at,it,S.next_out-it):o(d.check,at,it,S.next_out-it)),S.data_type=d.bits+(d.last?64:0)+(d.mode===12?128:0)+(d.mode===20||d.mode===15?256:0),(ut==0&&it===0||W===4)&&P===v&&(P=-5),P)},i.inflateEnd=function(S){if(!S||!S.state)return u;var W=S.state;return W.window&&(W.window=null),S.state=null,v},i.inflateGetHeader=function(S,W){var d;return S&&S.state&&2&(d=S.state).wrap?((d.head=W).done=!1,v):u},i.inflateSetDictionary=function(S,W){var d,q=W.length;return S&&S.state?(d=S.state).wrap!==0&&d.mode!==11?u:d.mode===11&&o(1,W,q,0)!==d.check?-3:st(S,W,q,q)?(d.mode=31,-4):(d.havedict=1,v):u},i.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(n,r,i){var s=n("../utils/common"),o=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],a=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],c=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],f=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];r.exports=function(b,g,v,u,x,h,m,w){var C,A,I,z,K,j,V,F,G,st=w.bits,S=0,W=0,d=0,q=0,at=0,H=0,ot=0,X=0,rt=0,M=0,L=null,ut=0,it=new s.Buf16(16),tt=new s.Buf16(16),_t=null,kt=0;for(S=0;S<=15;S++)it[S]=0;for(W=0;W<u;W++)it[g[v+W]]++;for(at=st,q=15;1<=q&&it[q]===0;q--);if(q<at&&(at=q),q===0)return x[h++]=20971520,x[h++]=20971520,w.bits=1,0;for(d=1;d<q&&it[d]===0;d++);for(at<d&&(at=d),S=X=1;S<=15;S++)if(X<<=1,(X-=it[S])<0)return-1;if(0<X&&(b===0||q!==1))return-1;for(tt[1]=0,S=1;S<15;S++)tt[S+1]=tt[S]+it[S];for(W=0;W<u;W++)g[v+W]!==0&&(m[tt[g[v+W]]++]=W);if(j=b===0?(L=_t=m,19):b===1?(L=o,ut-=257,_t=a,kt-=257,256):(L=c,_t=f,-1),S=d,K=h,ot=W=M=0,I=-1,z=(rt=1<<(H=at))-1,b===1&&852<rt||b===2&&592<rt)return 1;for(;;){for(V=S-ot,G=m[W]<j?(F=0,m[W]):m[W]>j?(F=_t[kt+m[W]],L[ut+m[W]]):(F=96,0),C=1<<S-ot,d=A=1<<H;x[K+(M>>ot)+(A-=C)]=V<<24|F<<16|G|0,A!==0;);for(C=1<<S-1;M&C;)C>>=1;if(C!==0?(M&=C-1,M+=C):M=0,W++,--it[S]==0){if(S===q)break;S=g[v+m[W]]}if(at<S&&(M&z)!==I){for(ot===0&&(ot=at),K+=d,X=1<<(H=S-ot);H+ot<q&&!((X-=it[H+ot])<=0);)H++,X<<=1;if(rt+=1<<H,b===1&&852<rt||b===2&&592<rt)return 1;x[I=M&z]=at<<24|H<<16|K-h|0}}return M!==0&&(x[K+M]=S-ot<<24|64<<16|0),w.bits=at,0}},{"../utils/common":41}],51:[function(n,r,i){r.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],52:[function(n,r,i){var s=n("../utils/common"),o=0,a=1;function c(p){for(var T=p.length;0<=--T;)p[T]=0}var f=0,b=29,g=256,v=g+1+b,u=30,x=19,h=2*v+1,m=15,w=16,C=7,A=256,I=16,z=17,K=18,j=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],V=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],F=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],G=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],st=new Array(2*(v+2));c(st);var S=new Array(2*u);c(S);var W=new Array(512);c(W);var d=new Array(256);c(d);var q=new Array(b);c(q);var at,H,ot,X=new Array(u);function rt(p,T,$,D,O){this.static_tree=p,this.extra_bits=T,this.extra_base=$,this.elems=D,this.max_length=O,this.has_stree=p&&p.length}function M(p,T){this.dyn_tree=p,this.max_code=0,this.stat_desc=T}function L(p){return p<256?W[p]:W[256+(p>>>7)]}function ut(p,T){p.pending_buf[p.pending++]=255&T,p.pending_buf[p.pending++]=T>>>8&255}function it(p,T,$){p.bi_valid>w-$?(p.bi_buf|=T<<p.bi_valid&65535,ut(p,p.bi_buf),p.bi_buf=T>>w-p.bi_valid,p.bi_valid+=$-w):(p.bi_buf|=T<<p.bi_valid&65535,p.bi_valid+=$)}function tt(p,T,$){it(p,$[2*T],$[2*T+1])}function _t(p,T){for(var $=0;$|=1&p,p>>>=1,$<<=1,0<--T;);return $>>>1}function kt(p,T,$){var D,O,U=new Array(m+1),J=0;for(D=1;D<=m;D++)U[D]=J=J+$[D-1]<<1;for(O=0;O<=T;O++){var Z=p[2*O+1];Z!==0&&(p[2*O]=_t(U[Z]++,Z))}}function vt(p){var T;for(T=0;T<v;T++)p.dyn_ltree[2*T]=0;for(T=0;T<u;T++)p.dyn_dtree[2*T]=0;for(T=0;T<x;T++)p.bl_tree[2*T]=0;p.dyn_ltree[2*A]=1,p.opt_len=p.static_len=0,p.last_lit=p.matches=0}function mt(p){8<p.bi_valid?ut(p,p.bi_buf):0<p.bi_valid&&(p.pending_buf[p.pending++]=p.bi_buf),p.bi_buf=0,p.bi_valid=0}function et(p,T,$,D){var O=2*T,U=2*$;return p[O]<p[U]||p[O]===p[U]&&D[T]<=D[$]}function Y(p,T,$){for(var D=p.heap[$],O=$<<1;O<=p.heap_len&&(O<p.heap_len&&et(T,p.heap[O+1],p.heap[O],p.depth)&&O++,!et(T,D,p.heap[O],p.depth));)p.heap[$]=p.heap[O],$=O,O<<=1;p.heap[$]=D}function k(p,T,$){var D,O,U,J,Z=0;if(p.last_lit!==0)for(;D=p.pending_buf[p.d_buf+2*Z]<<8|p.pending_buf[p.d_buf+2*Z+1],O=p.pending_buf[p.l_buf+Z],Z++,D===0?tt(p,O,T):(tt(p,(U=d[O])+g+1,T),(J=j[U])!==0&&it(p,O-=q[U],J),tt(p,U=L(--D),$),(J=V[U])!==0&&it(p,D-=X[U],J)),Z<p.last_lit;);tt(p,A,T)}function B(p,T){var $,D,O,U=T.dyn_tree,J=T.stat_desc.static_tree,Z=T.stat_desc.has_stree,Q=T.stat_desc.elems,N=-1;for(p.heap_len=0,p.heap_max=h,$=0;$<Q;$++)U[2*$]!==0?(p.heap[++p.heap_len]=N=$,p.depth[$]=0):U[2*$+1]=0;for(;p.heap_len<2;)U[2*(O=p.heap[++p.heap_len]=N<2?++N:0)]=1,p.depth[O]=0,p.opt_len--,Z&&(p.static_len-=J[2*O+1]);for(T.max_code=N,$=p.heap_len>>1;1<=$;$--)Y(p,U,$);for(O=Q;$=p.heap[1],p.heap[1]=p.heap[p.heap_len--],Y(p,U,1),D=p.heap[1],p.heap[--p.heap_max]=$,p.heap[--p.heap_max]=D,U[2*O]=U[2*$]+U[2*D],p.depth[O]=(p.depth[$]>=p.depth[D]?p.depth[$]:p.depth[D])+1,U[2*$+1]=U[2*D+1]=O,p.heap[1]=O++,Y(p,U,1),2<=p.heap_len;);p.heap[--p.heap_max]=p.heap[1],function(R,nt){var ft,ct,Ct,bt,Vt,Ot,zt=nt.dyn_tree,Re=nt.max_code,ui=nt.stat_desc.static_tree,di=nt.stat_desc.has_stree,fi=nt.stat_desc.extra_bits,Os=nt.stat_desc.extra_base,Fe=nt.stat_desc.max_length,rn=0;for(bt=0;bt<=m;bt++)R.bl_count[bt]=0;for(zt[2*R.heap[R.heap_max]+1]=0,ft=R.heap_max+1;ft<h;ft++)Fe<(bt=zt[2*zt[2*(ct=R.heap[ft])+1]+1]+1)&&(bt=Fe,rn++),zt[2*ct+1]=bt,Re<ct||(R.bl_count[bt]++,Vt=0,Os<=ct&&(Vt=fi[ct-Os]),Ot=zt[2*ct],R.opt_len+=Ot*(bt+Vt),di&&(R.static_len+=Ot*(ui[2*ct+1]+Vt)));if(rn!==0){do{for(bt=Fe-1;R.bl_count[bt]===0;)bt--;R.bl_count[bt]--,R.bl_count[bt+1]+=2,R.bl_count[Fe]--,rn-=2}while(0<rn);for(bt=Fe;bt!==0;bt--)for(ct=R.bl_count[bt];ct!==0;)Re<(Ct=R.heap[--ft])||(zt[2*Ct+1]!==bt&&(R.opt_len+=(bt-zt[2*Ct+1])*zt[2*Ct],zt[2*Ct+1]=bt),ct--)}}(p,T),kt(U,N,p.bl_count)}function l(p,T,$){var D,O,U=-1,J=T[1],Z=0,Q=7,N=4;for(J===0&&(Q=138,N=3),T[2*($+1)+1]=65535,D=0;D<=$;D++)O=J,J=T[2*(D+1)+1],++Z<Q&&O===J||(Z<N?p.bl_tree[2*O]+=Z:O!==0?(O!==U&&p.bl_tree[2*O]++,p.bl_tree[2*I]++):Z<=10?p.bl_tree[2*z]++:p.bl_tree[2*K]++,U=O,N=(Z=0)===J?(Q=138,3):O===J?(Q=6,3):(Q=7,4))}function P(p,T,$){var D,O,U=-1,J=T[1],Z=0,Q=7,N=4;for(J===0&&(Q=138,N=3),D=0;D<=$;D++)if(O=J,J=T[2*(D+1)+1],!(++Z<Q&&O===J)){if(Z<N)for(;tt(p,O,p.bl_tree),--Z!=0;);else O!==0?(O!==U&&(tt(p,O,p.bl_tree),Z--),tt(p,I,p.bl_tree),it(p,Z-3,2)):Z<=10?(tt(p,z,p.bl_tree),it(p,Z-3,3)):(tt(p,K,p.bl_tree),it(p,Z-11,7));U=O,N=(Z=0)===J?(Q=138,3):O===J?(Q=6,3):(Q=7,4)}}c(X);var E=!1;function _(p,T,$,D){it(p,(f<<1)+(D?1:0),3),function(O,U,J,Z){mt(O),Z&&(ut(O,J),ut(O,~J)),s.arraySet(O.pending_buf,O.window,U,J,O.pending),O.pending+=J}(p,T,$,!0)}i._tr_init=function(p){E||(function(){var T,$,D,O,U,J=new Array(m+1);for(O=D=0;O<b-1;O++)for(q[O]=D,T=0;T<1<<j[O];T++)d[D++]=O;for(d[D-1]=O,O=U=0;O<16;O++)for(X[O]=U,T=0;T<1<<V[O];T++)W[U++]=O;for(U>>=7;O<u;O++)for(X[O]=U<<7,T=0;T<1<<V[O]-7;T++)W[256+U++]=O;for($=0;$<=m;$++)J[$]=0;for(T=0;T<=143;)st[2*T+1]=8,T++,J[8]++;for(;T<=255;)st[2*T+1]=9,T++,J[9]++;for(;T<=279;)st[2*T+1]=7,T++,J[7]++;for(;T<=287;)st[2*T+1]=8,T++,J[8]++;for(kt(st,v+1,J),T=0;T<u;T++)S[2*T+1]=5,S[2*T]=_t(T,5);at=new rt(st,j,g+1,v,m),H=new rt(S,V,0,u,m),ot=new rt(new Array(0),F,0,x,C)}(),E=!0),p.l_desc=new M(p.dyn_ltree,at),p.d_desc=new M(p.dyn_dtree,H),p.bl_desc=new M(p.bl_tree,ot),p.bi_buf=0,p.bi_valid=0,vt(p)},i._tr_stored_block=_,i._tr_flush_block=function(p,T,$,D){var O,U,J=0;0<p.level?(p.strm.data_type===2&&(p.strm.data_type=function(Z){var Q,N=4093624447;for(Q=0;Q<=31;Q++,N>>>=1)if(1&N&&Z.dyn_ltree[2*Q]!==0)return o;if(Z.dyn_ltree[18]!==0||Z.dyn_ltree[20]!==0||Z.dyn_ltree[26]!==0)return a;for(Q=32;Q<g;Q++)if(Z.dyn_ltree[2*Q]!==0)return a;return o}(p)),B(p,p.l_desc),B(p,p.d_desc),J=function(Z){var Q;for(l(Z,Z.dyn_ltree,Z.l_desc.max_code),l(Z,Z.dyn_dtree,Z.d_desc.max_code),B(Z,Z.bl_desc),Q=x-1;3<=Q&&Z.bl_tree[2*G[Q]+1]===0;Q--);return Z.opt_len+=3*(Q+1)+5+5+4,Q}(p),O=p.opt_len+3+7>>>3,(U=p.static_len+3+7>>>3)<=O&&(O=U)):O=U=$+5,$+4<=O&&T!==-1?_(p,T,$,D):p.strategy===4||U===O?(it(p,2+(D?1:0),3),k(p,st,S)):(it(p,4+(D?1:0),3),function(Z,Q,N,R){var nt;for(it(Z,Q-257,5),it(Z,N-1,5),it(Z,R-4,4),nt=0;nt<R;nt++)it(Z,Z.bl_tree[2*G[nt]+1],3);P(Z,Z.dyn_ltree,Q-1),P(Z,Z.dyn_dtree,N-1)}(p,p.l_desc.max_code+1,p.d_desc.max_code+1,J+1),k(p,p.dyn_ltree,p.dyn_dtree)),vt(p),D&&mt(p)},i._tr_tally=function(p,T,$){return p.pending_buf[p.d_buf+2*p.last_lit]=T>>>8&255,p.pending_buf[p.d_buf+2*p.last_lit+1]=255&T,p.pending_buf[p.l_buf+p.last_lit]=255&$,p.last_lit++,T===0?p.dyn_ltree[2*$]++:(p.matches++,T--,p.dyn_ltree[2*(d[$]+g+1)]++,p.dyn_dtree[2*L(T)]++),p.last_lit===p.lit_bufsize-1},i._tr_align=function(p){it(p,2,3),tt(p,A,st),function(T){T.bi_valid===16?(ut(T,T.bi_buf),T.bi_buf=0,T.bi_valid=0):8<=T.bi_valid&&(T.pending_buf[T.pending++]=255&T.bi_buf,T.bi_buf>>=8,T.bi_valid-=8)}(p)}},{"../utils/common":41}],53:[function(n,r,i){r.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(n,r,i){(function(s){(function(o,a){if(!o.setImmediate){var c,f,b,g,v=1,u={},x=!1,h=o.document,m=Object.getPrototypeOf&&Object.getPrototypeOf(o);m=m&&m.setTimeout?m:o,c={}.toString.call(o.process)==="[object process]"?function(I){process.nextTick(function(){C(I)})}:function(){if(o.postMessage&&!o.importScripts){var I=!0,z=o.onmessage;return o.onmessage=function(){I=!1},o.postMessage("","*"),o.onmessage=z,I}}()?(g="setImmediate$"+Math.random()+"$",o.addEventListener?o.addEventListener("message",A,!1):o.attachEvent("onmessage",A),function(I){o.postMessage(g+I,"*")}):o.MessageChannel?((b=new MessageChannel).port1.onmessage=function(I){C(I.data)},function(I){b.port2.postMessage(I)}):h&&"onreadystatechange"in h.createElement("script")?(f=h.documentElement,function(I){var z=h.createElement("script");z.onreadystatechange=function(){C(I),z.onreadystatechange=null,f.removeChild(z),z=null},f.appendChild(z)}):function(I){setTimeout(C,0,I)},m.setImmediate=function(I){typeof I!="function"&&(I=new Function(""+I));for(var z=new Array(arguments.length-1),K=0;K<z.length;K++)z[K]=arguments[K+1];var j={callback:I,args:z};return u[v]=j,c(v),v++},m.clearImmediate=w}function w(I){delete u[I]}function C(I){if(x)setTimeout(C,0,I);else{var z=u[I];if(z){x=!0;try{(function(K){var j=K.callback,V=K.args;switch(V.length){case 0:j();break;case 1:j(V[0]);break;case 2:j(V[0],V[1]);break;case 3:j(V[0],V[1],V[2]);break;default:j.apply(a,V)}})(z)}finally{w(I),x=!1}}}}function A(I){I.source===o&&typeof I.data=="string"&&I.data.indexOf(g)===0&&C(+I.data.slice(g.length))}})(typeof self>"u"?s===void 0?this:s:self)}).call(this,typeof fn<"u"?fn:typeof self<"u"?self:typeof window<"u"?window:{})},{}]},{},[10])(10)})})(li);var En=li.exports;class As{settings;app;api;constructor(e,n){this.app=e,this.settings=n,this.api=new Ce(n.token)}async getPluginUrl(e,n){const r=Date.now(),i=localStorage.getItem("pluginUrl");if(console.log(i,"cachedPluginUrl"),i){const c=JSON.parse(i);if(c.name===e&&c.version===n&&r<c.expiryTime)return c.url}const s=await this.getPluginDownloadUrl(e,n),o=r+15*60*1e3,a={name:e,version:n,url:s,expiryTime:o};return localStorage.setItem("pluginUrl",JSON.stringify(a)),s}async getPluginDownloadUrl(e,n){const r=await this.api.getDownloadUrl(e,n);if(r.startsWith("http"))return r;throw new lt.Notice(`${JSON.parse(r).message}`),new Error(`${JSON.parse(r).message}`)}async downloadPluginToPluginFolder(e,n){const r=await this.getPluginUrl(e,n);if(!r)return new lt.Notice(`获取${e}插件下载地址失败！`),!1;if(app.plugins.manifests[e])return new lt.Notice(`插件${e}已经安装，无需重复安装！`),!1;try{const i=await lt.requestUrl({url:r,method:"GET"}),s=lt.normalizePath(app.vault.configDir+"/plugins/"+e)+"/",o=this.app.vault.adapter,a=await En.loadAsync(i.arrayBuffer);(await o.exists(s)===!1||!await o.exists(s+"manifest.json"))&&await o.mkdir(s);try{for(const[c,f]of Object.entries(a.files)){const b=s+c,g=b.substring(0,b.lastIndexOf("/"));if(await o.mkdir(g),!f.dir){const v=await f.async("string");await o.write(b,v)}}}catch{throw new lt.Notice(`插件${e}解压失败！请联系开发者处理！`,5e3),o.rmdir(s,!0),Error(`插件${e}解压失败！`)}return new lt.Notice(`插件${e}安装成功！
请在插件列表中启用`,5e3),await app.plugins.loadManifests(),setTimeout(()=>{dispatchEvent(new Event("reload-statusbar"))},100),!0}catch(i){return console.log(i),new lt.Notice(`插件${e}安装失败！${i}`,5e3),!1}}async updatePluginToExistPluginFolder(e,n){const r=await this.getPluginDownloadUrl(e,n);if(!r)throw new lt.Notice(`获取${e}插件下载地址失败！`),new Error(`获取${e}插件下载地址失败！`);if(e!="obsidian-pkmer"&&!app.plugins.manifests[e])return new lt.Notice(`插件${e}未安装！`),!1;try{let i=lt.normalizePath(app.vault.configDir+"/plugins/"+e)+"/";e=="obsidian-pkmer"&&(i=lt.normalizePath(app.vault.configDir+"/plugins/")+"/");const s=this.app.vault.adapter;if(await s.exists(i)===!1&&!await s.exists(i+"manifest.json"))throw new Error(`插件${e}未安装！`);const o=await lt.requestUrl({url:r,method:"GET"}),a=await En.loadAsync(o.arrayBuffer);try{for(const[c,f]of Object.entries(a.files)){const b=i+c,g=b.substring(0,b.lastIndexOf("/"));if(await s.mkdir(g),!f.dir){const v=await f.async("string");await s.write(b,v)}}}catch{throw new lt.Notice(`插件${e}解压失败！得手动清除残留文件！`),Error(`插件${e}解压失败！`)}return new lt.Notice(`插件${e}更新成功！
 请在插件列表中重新启用`),await app.plugins.loadManifests(),setTimeout(()=>{dispatchEvent(new Event("reload-statusbar"))},100),!0}catch(i){return new lt.Notice(`插件${e}更新失败！${i}`),!1}}}const _c={class:"text-right pkmer-toolbar"},bc=["tooltip"],yc={class:"z-10 flex w-3/4 p-4 m-auto my-4 top-20 bg-yellow-200/50"},xc=y("div",{class:"mr-2"},"⚠️",-1),kc=y("span",{class:"font-bold"},"提示：",-1),ci=ge({__name:"Head",props:{isLogin:{type:Boolean},settings:{},app:{}},setup(t){const e=t,n=dt(0),r=dt(""),i=dt(),s=new Ce(e.settings.token),o=new As(e.app,e.settings);We(()=>e.isLogin,async g=>{if(g)try{n.value=await s.getDownloadCount()}catch{n.value=0}else n.value=0},{immediate:!0}),(async()=>{try{i.value=await s.getPkmerVersion()}catch(g){console.error("Head.vue: Error fetching PKMer version:",g)}})(),r.value=e.app.plugins.manifests.pkmer.version;const a=Ut(()=>i.value&&r.value&&i.value!==r.value?"发现新版本:"+i.value+"(点我更新)":i.value&&r.value&&i.value===r.value?"Ver:"+r.value:"版本检查中..."),c=async()=>{!i.value||i.value===r.value||(new lt.Notice("正在更新插件，请稍后...",3e3),!await o.updatePluginToExistPluginFolder("obsidian-pkmer",i.value))||e.app.workspace.activeLeaf.rebuildView()},f=async()=>{e.isLogin&&(localStorage.removeItem("pluginList"),localStorage.removeItem("pluginListExpiry"),localStorage.removeItem("themeList"),localStorage.removeItem("themeListExpiry")),e.app.workspace.activeLeaf.rebuildView()},b=()=>{e.app.setting.open(),e.app.setting.openTabById("pkmer")};return(g,v)=>(pt(),wt(Dt,null,[y("div",_c,[y("span",{onClick:c,class:"inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-yellow-600 text-white shadow-xl shadow-primary-500/20"},Tt(a.value),1),Et(y("span",{tooltip:n.value<=5?"请在Pkmer个人中心绑定微信后可获取更多次数":null,class:"inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-yellow-600 text-white shadow-xl shadow-primary-500/20"}," 剩余次数 "+Tt(n.value),9,bc),[[At,e.isLogin]]),y("span",{onClick:f,class:"inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-green-500 text-white shadow-xl shadow-primary-500/20"}," 刷新 "),y("span",{class:"inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-primary-500 text-white shadow-xl shadow-primary-500/20",onClick:b}," 设置 ")]),Et(y("div",yc,[y("div",{class:"flex items-center"},[xc,y("div",null,[kc,y("span",null,[Ft("当前是未登录状态，仅展示下载前20的热门内容，请"),y("button",{class:"bg-yellow-600 w-20 h-6 inline-block px-1 py-1 m-1 font-sans text-xs rounded-lg",onClick:b}," 点此登录"),Ft("后获取全部内容。")])])])],512),[[At,!e.isLogin]])],64))}});class Ps{settings;app;api;constructor(e,n){this.app=e,this.settings=n,this.api=new Ce(n.token)}async getThemeUrl(e,n){const r=Date.now(),i=localStorage.getItem("themeUrl");if(i){const c=JSON.parse(i);if(c.name===e&&c.version===n&&r<c.expiryTime)return c.url}const s=await this.getThemeDownloadUrl(e,n),o=r+15*60*1e3,a={name:e,version:n,url:s,expiryTime:o};return localStorage.setItem("themeUrl",JSON.stringify(a)),s}async getThemeDownloadUrl(e,n){const r=await this.api.getThemeDownloadUrl(e,n);if(r.startsWith("http"))return r;throw new lt.Notice(`${JSON.parse(r).message}`),new Error(`${JSON.parse(r).message}`)}async downloadThemeToThemeFolder(e,n){const r=await this.getThemeUrl(e,n);if(!r)return new lt.Notice(`获取${e}主题下载地址失败！`),!1;if(app.customCss.themes[e])return new lt.Notice(`主题${e}已经安装，无需重复安装！`),!1;try{const i=await lt.requestUrl({url:r,method:"GET"}),s=lt.normalizePath(app.vault.configDir+"/themes/"+e)+"/",o=this.app.vault.adapter,a=await En.loadAsync(i.arrayBuffer);(await o.exists(s)===!1||!await o.exists(s+"manifest.json"))&&await o.mkdir(s);try{a.forEach(async(c,f)=>{const b=s+c,g=await f.async("string");await o.write(b,g)})}catch{throw new lt.Notice(`主题${e}解压失败！得手动清除残留文件！`,5e3),o.rmdir(s,!0),Error(`主题${e}解压失败！`)}return new lt.Notice(`主题${e}安装并启用成功！
`,5e3),await app.customCss.setTheme(e),setTimeout(()=>{dispatchEvent(new Event("reload-statusbar"))},100),!0}catch(i){return console.log(i),new lt.Notice(`主题${e}安装失败！${i}`,5e3),!1}}async updateThemeToExistThemeFolder(e,n){const r=await this.getThemeDownloadUrl(e,n);if(!r)throw new lt.Notice(`获取${e}主题下载地址失败！`),new Error(`获取${e}主题下载地址失败！`);if(!app.customCss.themes[e])return new lt.Notice(`主题${e}未安装！`),!1;try{const i=lt.normalizePath(app.vault.configDir+"/themes/"+e)+"/",s=this.app.vault.adapter;if(await s.exists(i)===!1&&!await s.exists(i+"manifest.json"))throw new Error(`主题${e}未安装！`);const o=await lt.requestUrl({url:r,method:"GET"}),a=await En.loadAsync(o.arrayBuffer);try{a.forEach(async(c,f)=>{const b=i+c,g=await f.async("string");await s.write(b,g)})}catch{throw new lt.Notice(`主题${e}解压失败！得手动清除残留文件！`),Error(`主题${e}解压失败！`)}return new lt.Notice(`主题${e}更新成功！
 新主题已生效`),await app.customCss.setTheme(e),setTimeout(()=>{dispatchEvent(new Event("reload-statusbar"))},100),!0}catch(i){return new lt.Notice(`主题${e}更新失败！${i}`),!1}}}const Cc={"data-pagefind-body":"",class:"w-full"},Tc={class:"flex items-center justify-between w-full px-2 py-4 mx-auto font-sans search first-letter:"},Ic={class:"flex flex-wrap items-center justify-center w-full first-letter:mx-auto"},Ec={class:"w-full lg:max-w-[60vw] mx-auto py-3 md:px-6"},Sc={class:"flex-wrap relative top-0 z-30 flex items-center w-full overflow-x-auto divide-x rounded dark:bg-muted-800 border-muted-200 dark:border-muted-700 divide-muted-200 dark:divide-muted-700 dark:shadow-muted-900/30 md:overflow-x-visible"},Ac={class:"widget-item"},Pc=y("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[y("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"solar:round-sort-vertical-line-duotone",class:"w-6 h-6 iconify iconify--solar"},[y("g",{fill:"none",stroke:"currentColor","stroke-width":"1.5"},[y("circle",{cx:"12",cy:"12",r:"10",opacity:".5"}),y("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M9.5 8v8m0 0L7 13.25M9.5 16l2.5-2.75M14.5 16V8m0 0L12 10.75M14.5 8l2.5 2.75"})])])],-1),Oc=[Pc],zc={class:"widget-item"},Bc=y("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[y("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"ic:sharp-update",class:"w-6 h-6 iconify iconify--ic"},[y("path",{fill:"currentColor",d:"M11 8v5l4.25 2.52l.77-1.28l-3.52-2.09V8H11zm10 2V3l-2.64 2.64A8.937 8.937 0 0 0 12 3a9 9 0 1 0 9 9h-2c0 3.86-3.14 7-7 7s-7-3.14-7-7s3.14-7 7-7c1.93 0 3.68.79 4.95 2.05L14 10h7z"})])],-1),Dc=[Bc],$c={class:"widget-item"},Lc=y("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[y("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:sort-by-alpha",class:"w-6 h-6 iconify iconify--material-symbols"},[y("path",{fill:"currentColor",d:"M2 17L5.75 7H7.9l3.75 10H9.6l-.85-2.4H4.9L4.1 17H2Zm3.5-4.1h2.6L6.9 9.15h-.15L5.5 12.9Zm8.2 4.1v-1.9l5.05-6.3H13.9V7h7.05v1.9l-5 6.3H21V17h-7.3ZM9 5l3-3l3 3H9Zm3 17l-3-3h6l-3 3Z"})])],-1),Uc=[Lc],Mc={class:"widget-item"},Rc=y("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[y("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:whatshot",class:"iconify w-6 h-6 iconify--material-symbols"},[y("path",{fill:"currentColor",d:"M12 22q-2.5 0-4.588-1.1T3.95 17.95l4.1-4.1l3 2.5L16 11.4V14h2V8h-6v2h2.6l-3.65 3.65l-3-2.5L2.9 16.2q-.425-.95-.662-2.013T2 12q0-2.075.788-3.9t2.137-3.175q1.35-1.35 3.175-2.137T12 2q2.075 0 3.9.788t3.175 2.137q1.35 1.35 2.138 3.175T22 12q0 2.075-.788 3.9t-2.137 3.175q-1.35 1.35-3.175 2.138T12 22Z"})])],-1),Fc=[Rc],jc={class:"widget-item"},Nc=y("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[y("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:sort-by-alpha",class:"w-5 h-5 iconify iconify--material-symbols"},[y("path",{fill:"currentColor",d:"M4.5 11a8.5 8.5 0 1 1 8.188 8.494a6.47 6.47 0 0 1-.68 1.457c.327.033.658.049.992.049c5.523 0 10-4.477 10-10S18.523 1 13 1S3 5.477 3 11c0 .334.016.665.048.991a6.51 6.51 0 0 1 1.458-.68A8.65 8.65 0 0 1 4.5 11Zm8.493-5.352a.75.75 0 0 0-1.493.102v6l.007.102a.75.75 0 0 0 .743.648h4l.102-.007A.75.75 0 0 0 16.25 11H13V5.75l-.007-.102ZM1 17.5a5.5 5.5 0 0 1 5-5.477v5.77l-1.646-1.647a.5.5 0 0 0-.708.708l2.5 2.5a.5.5 0 0 0 .708 0l2.5-2.5a.5.5 0 0 0-.708-.708L7 17.793v-5.77A5.5 5.5 0 1 1 1 17.5Zm8.5 3A.5.5 0 0 0 9 20H4a.5.5 0 0 0 0 1h5a.5.5 0 0 0 .5-.5Z"})])],-1),Hc={class:"num"},Wc=["tooltip"],Zc=y("option",{class:"text-muted-800 dark:text-muted-100 bg-white dark:bg-muted-800",value:"default"}," 默认 ",-1),Kc=y("option",{class:"text-muted-800 dark:text-muted-100 bg-white dark:bg-muted-800",value:"mobile"}," 移动端 ",-1),Vc=y("option",{class:"text-muted-800 dark:text-muted-100 bg-white dark:bg-muted-800",value:"desktop"}," 仅桌面端 ",-1),qc=[Zc,Kc,Vc],Jc={class:"relative w-full"},Yc={class:"relative group"},Gc=["value"],Xc=y("div",{class:"absolute top-0 left-0 hidden md:flex items-center justify-center w-16 h-8 transition-colors duration-300 text-muted-400 group-focus-within:text-primary-500"},[y("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"lucide:search",class:"w-4 h-4 iconify iconify--lucide"},[y("g",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2"},[y("circle",{cx:"11",cy:"11",r:"8"}),y("path",{d:"m21 21l-4.3-4.3"})])])],-1),Qc={class:"text-right"},tu=["onClick"],eu=y("svg",{xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",viewBox:"0 0 32 32"},[y("path",{fill:"white",d:"M16 2C8.2 2 2 8.2 2 16s6.2 14 14 14s14-6.2 14-14S23.8 2 16 2m5.4 21L16 17.6L10.6 23L9 21.4l5.4-5.4L9 10.6L10.6 9l5.4 5.4L21.4 9l1.6 1.6l-5.4 5.4l5.4 5.4z"})],-1),nu=[eu],su={class:"w-full bg-muted-100 dark:bg-muted-1000"},ru={class:"w-full mx-auto max-w-7xl"},iu={class:"flex items-center w-full overflow-hidden"},ou={class:"flex flex-col justify-between w-full h-full md:px-6 pt-4 pb-16"},au={class:"w-full max-w-[90vw] mx-auto space-y-4 text-center"},lu={class:"flex flex-col gap-12 py-12"},cu={key:0,class:"flex justify-center items-center py-10"},uu=y("div",{class:"w-12 h-12 border-4 border-t-4 border-gray-200 rounded-full animate-spin dark:border-gray-700 dark:border-t-primary-500"},null,-1),du=[uu],fu={class:"flex items-center justify-center w-full p-6 -m-3"},hu={class:"flex items-center justify-center w-full mb-4"},pu={class:"flex space-x-2"},mu={class:"flex items-center px-3 py-1"},gu={class:"fixed inset-0 z-30 flex items-center justify-center overflow-auto bg-black bg-opacity-50"},vu={class:"flex items-center justify-between"},wu=y("h5",{class:"mr-3 max-w-none"},null,-1),_u=y("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor"},[y("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M6 18L18 6M6 6l12 12"})],-1),bu=[_u],yu={class:"body-font"},xu={class:"container px-5 py-4 mx-auto"},ku={class:"mb-6 text-2xl font-medium text-center title-font"},Cu=y("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"line-md:downloading-loop",class:"w-6 h-6 iconify iconify--line-md"},[y("g",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-width":"2"},[y("path",{"stroke-dasharray":"2 4","stroke-dashoffset":"6",d:"M12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21"},[y("animate",{attributeName:"stroke-dashoffset",dur:"0.6s",repeatCount:"indefinite",values:"6;0"})]),y("path",{"stroke-dasharray":"30","stroke-dashoffset":"30",d:"M12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3"},[y("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.1s",dur:"0.3s",values:"30;0"})]),y("path",{"stroke-dasharray":"10","stroke-dashoffset":"10",d:"M12 8v7.5"},[y("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.5s",dur:"0.2s",values:"10;0"})]),y("path",{"stroke-dasharray":"6","stroke-dashoffset":"6",d:"M12 15.5l3.5 -3.5M12 15.5l-3.5 -3.5"},[y("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.7s",dur:"0.2s",values:"6;0"})])])],-1),Tu={class:"mb-2"},Iu={class:"bolder"},Eu=y("p",{class:"mb-4 text-base leading-relaxed"}," 注意，安装和更新操作不可逆，请确认后再操作。 ",-1),Su={class:"flex-wrap block -mx-4 -mt-4 space-y-6 md:flex sm:-m-4 md:-mb-10 md:space-y-0"},Au={class:"flex md:p-4 md:w-1/2"},Pu={class:"flex-grow"},Ou=ge({__name:"PluginMarket",props:{settings:{},app:{},tab:{},currentTab:{}},setup(t){const e=t,n=dt(""),r=dt(""),i=dt(!1),s=dt();let o=dt(24),a=dt(1);const c=dt(!0),f=dt("default"),b=new Ce(e.settings.token),g=new As(e.app,e.settings),v=dt(!1),u=dt(!1),x=dt(null),h=dt(0),m=dt(1),w=dt(!1),C=dt([]),A=dt(0),I=dt(0),z=Ut(()=>A.value),K=Ut(()=>I.value),j=(N,R)=>{if(console.error(`${R}:`,N),w.value=!1,N.statusCode===401||N.message==="Unauthorized"||N.name==="UnauthorizedError"||N.response&&N.response.status===401)x.value="验证失败。您的令牌可能无效或过期。请重新在 PKMer 插件设置中更新您的令牌。",new lt.Notice(x.value,1e4),u.value=!1,s.value=[],C.value=[],h.value=0,m.value=1,I.value=0;else{let ft=N.message||"An unknown error occurred.";N.response&&N.response.data&&typeof N.response.data.message=="string"&&(ft=N.response.data.message),x.value=`${R}. Please try again later. Details: ${ft}`,new lt.Notice(x.value,7e3)}},V=async()=>{w.value=!0,x.value=null;try{const N=await b.getPkmerDocs();if(u.value){const{plugins:R,total:nt,totalPages:ft}=await b.getPluginListPaginated(a.value,o.value,n.value||"downloadCount",r.value?.toUpperCase()||"DESC");s.value=R||[],h.value=nt||0,m.value=ft||1}else s.value=await b.getTop20Plugins()||[],h.value=s.value.length,m.value=Math.ceil(h.value/o.value)||1;Array.isArray(s.value)?s.value.forEach(R=>{const nt=N.find(Ct=>Ct.slug==R.id);nt&&(R.contentUrl=`https://pkmer.cn/show/${nt.uid}`,R.tags=nt.tags,R.chineseDescription=nt.description,R.authorAvatar=nt.authorAvatar);const ft=N.find(Ct=>Ct.slug.includes(R.id+"_readme"));ft&&(R.readme_zh=`https://pkmer.cn/show/${ft.uid}`);const ct=e.app.plugins.manifests;R.isInstalled=ct[R.id]!==void 0,R.isOutdated=R.isInstalled&&ct[R.id].version!==R.version}):s.value=[]}catch(N){j(N,"Error:"),s.value=[],h.value=0,m.value=1}finally{w.value=!1}},F=()=>{v.value=!0,mt()},G=dt(""),st=dt("all"),S=dt(""),W=dt(""),d=dt(""),q=async()=>{x.value=null;const N=Object.keys(e.app.plugins.manifests);if(A.value=N.length,!u.value){I.value=0;return}try{if(N.length>0){const{plugins:R}=await b.getInstalledPluginsPaginated(N,1,N.length,"downloadCount","DESC"),nt=R.filter(ft=>{const ct=e.app.plugins.manifests[ft.id];return ct&&ct.version!==ft.version});I.value=nt.length}else I.value=0}catch(R){j(R,"Error loading plugin update status"),I.value=0}},at=async()=>{i.value=!1,new lt.Notice("正在下载插件，请稍后...",3e3),await g.downloadPluginToPluginFolder(S.value,W.value)&&(s.value=s.value.map(R=>(R.id==S.value&&(R.isInstalled=!0),R)),await q())},H=async()=>{i.value=!1,new lt.Notice("正在更新插件，请稍后...",3e3),await g.updatePluginToExistPluginFolder(S.value,W.value)&&(s.value=s.value.map(R=>(R.id==S.value&&(R.isOutdated=!1),R)),await q())},ot=()=>{i.value=!1},X=N=>{st.value=N,a.value=1,N==="all"?V():V().then(()=>{s.value=s.value.filter(R=>R.tags?.includes(N))})},rt=(N,R,nt,ft)=>{i.value=!0,S.value=R,W.value=nt,d.value=ft,N==="download"?c.value=!0:c.value=!1},M=()=>{const N=window.location.hash.slice(1);if(N){const R=decodeURIComponent(N);st.value=R}},L=dt(),ut=async()=>{if(!u.value){C.value=[];return}try{x.value=null;const R=await b.getPluginTags()||[];if(!Array.isArray(R)){C.value=[];return}C.value=R.map(nt=>nt.tag)}catch(N){j(N,"Failed to load plugin tags"),C.value=[]}};Ln(async()=>{x.value=null;try{if(u.value=await b.isUserLogin(),!u.value&&e.settings.token){const N="PKMer 登录验证失败。您的令牌可能无效或过期。请重新登录获取";x.value=N,new lt.Notice(N,1e4)}else!u.value&&!e.settings.token&&new lt.Notice("未登录 PKMer，某些功能不可用，请在设置中设置您的Token，以便完全访问。",7e3)}catch(N){console.error("Error during initial login check:",N),u.value=!1,N.status===401||N.name==="UnauthorizedError"||N.response&&N.response.status===401?x.value="验证错误： 无法通过 PKMer 验证登录状态。您的令牌可能无效。":x.value="网络错误： 无法连接到 PKMer 以验证登录状态。",new lt.Notice(x.value,1e4)}if(v.value=!1,M(),n.value="downloadCount",r.value="desc",e.currentTab&&(p.value=e.currentTab),app.workspace.on("resize",it),L.value=e.app.workspace.activeLeaf?.view?.leaf?.width||0,u.value?(await ut(),await q()):(C.value=[],A.value=Object.keys(e.app.plugins.manifests).length,I.value=0),e.tab){const N=JSON.parse(e.tab);N.type=="updated"&&(n.value="updateTime",await V()),N.type=="installed"&&await k()}else p.value==="theme"?await T():await V()});const it=()=>{L.value=e.app.workspace.activeLeaf.view.leaf.width};sn(()=>{localStorage.removeItem("pkmer-update-tab")});const tt=N=>{lt.debounce(()=>{G.value=N.target.value,_()},800)()},_t=Ut(()=>f.value==="mobile"?s.value?.filter(N=>!N.isDesktopOnly)||[]:f.value==="desktop"?s.value?.filter(N=>N.isDesktopOnly)||[]:s.value||[]),kt=Ut(()=>{if(st.value==="all")return m.value;{const N=_t.value.filter(R=>R.tags?.includes(st.value));return Math.ceil(N.length/o.value)}});function vt(){n.value="pkmerDownloadCount",r.value=r.value==="desc"?"asc":"desc",a.value=1,V()}function mt(){n.value="downloadCount",r.value=r.value==="desc"?"asc":"desc",a.value=1,V()}function et(){n.value="pluginUpdatedTime",r.value=r.value==="desc"?"asc":"desc",a.value=1,V()}function Y(){n.value="name",r.value=r.value==="desc"?"asc":"desc",a.value=1,V()}async function k(){n.value="installed",r.value="desc",a.value=1,st.value="all";try{const N=Object.keys(e.app.plugins.manifests),{plugins:R,total:nt,totalPages:ft}=await b.getInstalledPluginsPaginated(N,a.value,o.value,n.value,r.value?.toUpperCase());s.value=R,h.value=nt,m.value=ft,Array.isArray(s.value)&&s.value.forEach(ct=>{const Ct=e.app.plugins.manifests;ct.isInstalled=Ct[ct.id]!==void 0,ct.isOutdated=ct.isInstalled&&Ct[ct.id].version!==ct.version})}catch(N){console.error("Error fetching installed plugins:",N)}}async function B(){n.value="downloadCount",r.value="desc",a.value=1;try{const N=Object.keys(e.app.plugins.manifests),{plugins:R}=await b.getInstalledPluginsPaginated(N,a.value,o.value,n.value,r.value?.toUpperCase()),nt=R.filter(ft=>{const ct=e.app.plugins.manifests[ft.id];return ct&&ct.version!==ft.version});s.value=nt,h.value=nt.length,m.value=Math.ceil(nt.length/o.value),Array.isArray(s.value)&&s.value.forEach(ft=>{const ct=e.app.plugins.manifests;ft.isInstalled=ct[ft.id]!==void 0,ft.isOutdated=ft.isInstalled&&ct[ft.id].version!==ft.version})}catch(N){console.error("Error fetching outdated plugins:",N)}}const l=Ut(()=>st.value==="all"?_t.value:_t.value.filter(N=>N.tags?.includes(st.value))),P=Ut(()=>Array.isArray(s.value)?s.value:[]),E=async N=>{a.value=N,await V()},_=async()=>{w.value=!0,a.value=1,st.value="all";try{if(G.value.trim()){const{plugins:N,total:R,totalPages:nt}=await b.searchPluginsPaginated(G.value,a.value,o.value,n.value||"downloadCount",r.value?.toUpperCase()||"DESC");if(s.value=N,h.value=R,m.value=nt,Array.isArray(s.value)){const ft=await b.getPkmerDocs();s.value.forEach(ct=>{const Ct=ft.find(Ot=>Ot.slug==ct.id);Ct&&(ct.contentUrl=`https://pkmer.cn/show/${Ct.uid}`,ct.tags=Ct.tags,ct.chineseDescription=Ct.description,ct.authorAvatar=Ct.authorAvatar);const bt=ft.find(Ot=>Ot.slug.includes(ct.id+"_readme"));bt&&(ct.readme_zh=`https://pkmer.cn/show/${bt.uid}`);const Vt=e.app.plugins.manifests;ct.isInstalled=Vt[ct.id]!==void 0,ct.isOutdated=ct.isInstalled&&Vt[ct.id].version!==ct.version})}}else await V()}catch(N){console.error("Error searching plugins:",N)}finally{w.value=!1}},p=dt("plugin"),T=async()=>{w.value=!0;const N=await b.getPkmerDocs();if(u)try{const{themes:R,total:nt,totalPages:ft}=await b.getThemeListPaginated(a.value,o.value,n.value||"downloadCount",r.value?.toUpperCase()||"DESC");s.value=R,h.value=nt,m.value=ft,Array.isArray(s.value)?s.value.forEach(ct=>{const Ct=N.find(Vt=>Vt.slug==ct.name.replace(/\s+/g,"-").toLowerCase());Ct&&(ct.contentUrl=`https://pkmer.cn/show/${Ct.uid}`,ct.tags=Ct.tags,ct.chineseDescription=Ct.description,ct.authorAvatar=Ct.authorAvatar);const bt=e.app.customCss.themes;ct.isInstalled=bt[ct.name]!==void 0,ct.isOutdated=ct.isInstalled&&bt[ct.name].version!==ct.version}):s.value=[]}catch(R){console.error("Error loading themes:",R)}else s.value=await b.getTop20Themes(),Array.isArray(s.value)?s.value.forEach(R=>{const nt=N.find(ct=>ct.slug==R.name.replace(/\s+/g,"-").toLowerCase());nt&&(R.contentUrl=`https://pkmer.cn/show/${nt.uid}`,R.tags=nt.tags,R.chineseDescription=nt.description,R.authorAvatar=nt.authorAvatar);const ft=e.app.customCss.themes;R.isInstalled=ft[R.name]!==void 0,R.isOutdated=R.isInstalled&&ft[R.name].version!==R.version}):s.value=[];w.value=!1};We(()=>e.currentTab,N=>{N&&(p.value=N,N==="theme"&&s.value?.length===0&&$())},{immediate:!0});async function $(){if(p.value==="theme"){w.value=!0;try{await T()}catch(N){console.error("Error loading theme data:",N)}finally{w.value=!1}}}const D=new Ps(e.app,e.settings),O=dt(""),U=dt(""),J=(N,R,nt)=>{i.value=!0,O.value=R,U.value=nt,N==="download"?c.value=!0:c.value=!1},Z=async()=>{i.value=!1,new lt.Notice("正在下载主题，请稍后...",3e3),await D.downloadThemeToThemeFolder(O.value,U.value)&&s.value.forEach(R=>{R.name===O.value&&(R.isInstalled=!0)})},Q=async()=>{i.value=!1,new lt.Notice("正在更新主题，请稍后...",3e3),await D.updateThemeToExistThemeFolder(O.value,U.value)&&s.value.forEach(R=>{R.name===O.value&&(R.isOutdated=!1)})};return(N,R)=>(pt(),wt(Dt,null,[$t(ci,{settings:e.settings,isLogin:u.value,app:e.app},null,8,["settings","isLogin","app"]),y("main",Cc,[y("div",Tc,[y("div",Ic,[y("div",Ec,[y("div",Sc,[y("div",Ac,[y("button",{class:Pt([{active:n.value=="downloadCount"},"flex items-center px-2 font-sans transition-colors duration-300 group whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按下载量",flow:"down",onClick:mt},Oc,2)]),y("div",zc,[y("button",{class:Pt([{active:n.value=="pluginUpdatedTime"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按更新时间",flow:"down",onClick:et},Dc,2)]),y("div",$c,[y("button",{class:Pt([{active:n.value=="name"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按文件名排序",flow:"down",onClick:Y},Uc,2)]),y("div",Mc,[y("button",{class:Pt(["active items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700",{active:n.value=="pkmerDownloadCount"}]),tooltip:"按插件热度",flow:"down",onClick:vt},Fc,2)]),y("div",jc,[y("button",{class:Pt([{active:n.value=="installed"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"筛选已安装插件",flow:"down",onClick:k},[Nc,y("span",Hc,Tt(z.value),1)],2)]),y("div",{class:"widget-item",tooltip:f.value=="mobile"?"支持移动端的插件":f.value=="desktop"?"仅支持桌面端的插件":"所有终端"},[Et(y("select",{"onUpdate:modelValue":R[0]||(R[0]=nt=>f.value=nt),class:"block border px-2 w-18 text-muted-800 dark:text-muted-100 bg-white dark:bg-muted-800 rounded-md shadow-sm focus:outline-none"},qc,512),[[Ra,f.value]])],8,Wc),y("div",Jc,[y("div",Yc,[y("input",{type:"text",class:"w-full h-8 pl-2 md:pl-16 pr-5 font-sans text-base leading-5 transition-all duration-300 text-muted-600 focus:border-muted-300 focus:shadow-lg focus:shadow-muted-300/50 dark:focus:shadow-muted-800/50 placeholder:text-muted-300 dark:placeholder:text-muted-500 dark:bg-muted-800 dark:text-muted-200 dark:border-muted-700 dark:focus:border-muted-600 tw-accessibility",placeholder:"Search plugins...",onInput:tt,value:G.value},null,40,Gc),Xc])])])])])]),y("div",Qc,[Et(y("button",{onClick:B,class:"inline-block w-full font-sans text-xs px-3 m-1 rounded-lg bg-green-600 text-white shadow-xl shadow-primary-500/20"},[Ft(" 发现 "+Tt(K.value)+" 个插件更新！【点我查看】 ",1),y("button",{onClick:jn(F,["stop"]),class:"ml-2 px-3 shadow-none"},nu,8,tu)],512),[[At,K.value&&!v.value]])]),y("section",su,[y("div",ru,[y("div",iu,[y("div",ou,[y("div",au,[$t(Ja,{"active-category":st.value,pluginList:P.value,pluginTags:C.value,onUpdateActiveCategory:X},null,8,["active-category","pluginList","pluginTags","onUpdateActiveCategory"])]),y("div",lu,[w.value?(pt(),wt("div",cu,du)):(pt(),wt("div",{key:1,class:Pt(["grid gap-6 -m-3 ptablet:grid-cols-2 ltablet:grid-cols-3 lg:grid-cols-3",{"!grid-cols-1":L.value<=768&&L.value>0,"!grid-cols-2":L.value>768&&L.value<1024,"!grid-cols-3":L.value>1024}])},[(pt(!0),wt(Dt,null,Un(l.value,nt=>(pt(),wt("div",{key:p.value==="theme"?nt.name:nt.id},[p.value==="plugin"?(pt(),Tn(Fl,{key:0,app:e.app,"plugin-info":nt,isLogin:u.value,onDownloadUpdatePlugin:rt},null,8,["app","plugin-info","isLogin","onDownloadUpdatePlugin"])):p.value==="theme"?(pt(),Tn(ai,{key:1,app:e.app,"theme-info":nt,isLogin:u.value,onDownloadUpdateTheme:J},null,8,["app","theme-info","isLogin"])):ue("",!0)]))),128))],2)),y("div",fu,[y("div",hu,[y("div",pu,[Mt(a)>1?(pt(),wt("button",{key:0,onClick:R[1]||(R[1]=nt=>E(Mt(a)-1)),class:"px-3 py-1 border rounded hover:bg-gray-100 dark:hover:bg-muted-700"}," 上一页 ")):ue("",!0),y("span",mu," 第 "+Tt(Mt(a))+" 页 / 共 "+Tt(kt.value)+" 页 ",1),Mt(a)<kt.value?(pt(),wt("button",{key:1,onClick:R[2]||(R[2]=nt=>E(Mt(a)+1)),class:"px-3 py-1 border rounded hover:bg-gray-100 dark:hover:bg-muted-700"}," 下一页 ")):ue("",!0)])])])])])])])])]),Et(y("div",gu,[y("div",{class:"max-w-3xl px-6 py-4 mx-auto text-left bg-white rounded shadow-lg dark:bg-muted-700",onClick:R[4]||(R[4]=nt=>i.value=!1),"x-transition:enter":"motion-safe:ease-out duration-300","x-transition:enter-start":"opacity-0 scale-90","x-transition:enter-end":"opacity-100 scale-100"},[y("div",vu,[wu,y("button",{type:"button",class:"z-50 cursor-pointer",onClick:R[3]||(R[3]=nt=>i.value=!1)},bu)]),y("section",yu,[y("div",xu,[y("h3",ku,[Cu,Ft(" 即将安装...."+Tt(S.value.toUpperCase()),1)]),y("div",null,[y("p",Tu,[Ft(" 插件来源： "),y("span",Iu,Tt(d.value==="official"?"Obsidian官方商城":"社区专供"),1)]),Eu]),y("div",Su,[y("div",Au,[y("div",Pu,[p.value==="plugin"?(pt(),wt(Dt,{key:0},[c.value?(pt(),wt("h2",{key:0,onClick:at,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 确 认 ")):(pt(),wt("h2",{key:1,onClick:H,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 更 新 "))],64)):p.value==="theme"?(pt(),wt(Dt,{key:1},[c.value?(pt(),wt("h2",{key:0,onClick:Z,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 确 认 ")):(pt(),wt("h2",{key:1,onClick:Q,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 更 新 "))],64)):ue("",!0)])]),y("div",{class:"flex md:p-4 md:w-1/2"},[y("div",{class:"flex-grow"},[y("h2",{onClick:ot,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 取 消 ")])])])])])])],512),[[At,i.value]])],64))}});const zu={class:"relative w-full flex justify-center gap-2 flex-wrap"},Bu=["onClick"],Du=ge({__name:"ThemeToolbar",props:{themeList:{},activeCategory:{}},emits:["update-active-category"],setup(t){const e=t;let n=[];const r=Ut(()=>{Array.isArray(e.themeList)&&e.themeList.forEach(o=>{if(o.tags&&typeof o.tags=="string"){let a=o.tags.split(",").map(c=>c.trim());a=a.filter(c=>c!==""),a.length>0&&n.push(a[0])}});let s=[];return Array.isArray(e.themeList)&&e.themeList.forEach(o=>{if(o.modes&&typeof o.modes=="string"){let a=o.modes.split(",").map(c=>c.trim());a=a.filter(c=>c!==""),a.length>0&&s.push(a[0])}}),n.concat(s)}),i=Ut(()=>Array.from(new Set(r.value)));return(s,o)=>(pt(),wt("div",zu,[y("button",{class:Pt(["h-6 inline-flex justify-center items-center py-2 px-4 font-sans text-sm rounded-lg bg-muted-200 dark:bg-muted-800 text-muted-500 hover:bg-muted-300 dark:hover:bg-muted-700 dark:hover:text-muted-200 border-2 transition-colors duration-300 tw-accessibility",s.activeCategory==="all"?"border-primary-500 bg-muted-50 dark:bg-muted-700":"border-transparent "]),onClick:o[0]||(o[0]=a=>s.$emit("update-active-category","all"))}," All ",2),(pt(!0),wt(Dt,null,Un(i.value,a=>(pt(),wt("div",{class:"plugin-item",key:a},[y("button",{class:Pt(["flex-1 inline-flex justify-center items-center py-2 px-4 font-sans text-sm rounded-lg bg-muted-200 dark:bg-muted-800 text-muted-500 hover:bg-muted-300 dark:hover:bg-muted-700 dark:hover:text-muted-200 border-2 transition-colors duration-300 tw-accessibility",s.activeCategory===a?"border-primary-500 bg-muted-50 dark:bg-muted-700":"border-transparent"]),onClick:()=>{s.$emit("update-active-category",a)}},Tt(a),11,Bu)]))),128))]))}}),$u={"data-pagefind-body":"",class:"w-full"},Lu={class:"flex items-center justify-between w-full px-2 py-4 mx-auto font-sans search first-letter:"},Uu={class:"flex flex-wrap items-center justify-center w-full first-letter:mx-auto"},Mu={class:"w-full lg:max-w-[60vw] mx-auto py-3 md:px-6"},Ru={class:"flex-wrap relative top-0 z-30 flex items-center w-full overflow-x-auto divide-x rounded dark:bg-muted-800 border-muted-200 dark:border-muted-700 divide-muted-200 dark:divide-muted-700 dark:shadow-muted-900/30 md:overflow-x-visible"},Fu={class:"widget-item"},ju=y("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[y("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"solar:round-sort-vertical-line-duotone",class:"w-6 h-6 iconify iconify--solar"},[y("g",{fill:"none",stroke:"currentColor","stroke-width":"1.5"},[y("circle",{cx:"12",cy:"12",r:"10",opacity:".5"}),y("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M9.5 8v8m0 0L7 13.25M9.5 16l2.5-2.75M14.5 16V8m0 0L12 10.75M14.5 8l2.5 2.75"})])])],-1),Nu=[ju],Hu={class:"widget-item"},Wu=y("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[y("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"ic:sharp-update",class:"w-6 h-6 iconify iconify--ic"},[y("path",{fill:"currentColor",d:"M11 8v5l4.25 2.52l.77-1.28l-3.52-2.09V8H11zm10 2V3l-2.64 2.64A8.937 8.937 0 0 0 12 3a9 9 0 1 0 9 9h-2c0 3.86-3.14 7-7 7s-7-3.14-7-7s3.14-7 7-7c1.93 0 3.68.79 4.95 2.05L14 10h7z"})])],-1),Zu=[Wu],Ku={class:"widget-item"},Vu=y("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[y("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:sort-by-alpha",class:"w-6 h-6 iconify iconify--material-symbols"},[y("path",{fill:"currentColor",d:"M2 17L5.75 7H7.9l3.75 10H9.6l-.85-2.4H4.9L4.1 17H2Zm3.5-4.1h2.6L6.9 9.15h-.15L5.5 12.9Zm8.2 4.1v-1.9l5.05-6.3H13.9V7h7.05v1.9l-5 6.3H21V17h-7.3ZM9 5l3-3l3 3H9Zm3 17l-3-3h6l-3 3Z"})])],-1),qu=[Vu],Ju={class:"widget-item"},Yu=y("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[y("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:whatshot",class:"iconify w-6 h-6 iconify--material-symbols"},[y("path",{fill:"currentColor",d:"M12 22q-2.5 0-4.588-1.1T3.95 17.95l4.1-4.1l3 2.5L16 11.4V14h2V8h-6v2h2.6l-3.65 3.65l-3-2.5L2.9 16.2q-.425-.95-.662-2.013T2 12q0-2.075.788-3.9t2.137-3.175q1.35-1.35 3.175-2.137T12 2q2.075 0 3.9.788t3.175 2.137q1.35 1.35 2.138 3.175T22 12q0 2.075-.788 3.9t-2.137 3.175q-1.35 1.35-3.175 2.138T12 22Z"})])],-1),Gu=[Yu],Xu={class:"widget-item"},Qu=y("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[y("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:sort-by-alpha",class:"w-5 h-5 iconify iconify--material-symbols"},[y("path",{fill:"currentColor",d:"M4.5 11a8.5 8.5 0 1 1 8.188 8.494a6.47 6.47 0 0 1-.68 1.457c.327.033.658.049.992.049c5.523 0 10-4.477 10-10S18.523 1 13 1S3 5.477 3 11c0 .334.016.665.048.991a6.51 6.51 0 0 1 1.458-.68A8.65 8.65 0 0 1 4.5 11Zm8.493-5.352a.75.75 0 0 0-1.493.102v6l.007.102a.75.75 0 0 0 .743.648h4l.102-.007A.75.75 0 0 0 16.25 11H13V5.75l-.007-.102ZM1 17.5a5.5 5.5 0 0 1 5-5.477v5.77l-1.646-1.647a.5.5 0 0 0-.708.708l2.5 2.5a.5.5 0 0 0 .708 0l2.5-2.5a.5.5 0 0 0-.708-.708L7 17.793v-5.77A5.5 5.5 0 1 1 1 17.5Zm8.5 3A.5.5 0 0 0 9 20H4a.5.5 0 0 0 0 1h5a.5.5 0 0 0 .5-.5Z"})])],-1),td={class:"num"},ed={class:"relative w-full"},nd={class:"relative group"},sd=["value"],rd=y("div",{class:"absolute top-0 left-0 hidden md:flex items-center justify-center w-16 h-8 transition-colors duration-300 text-muted-400 group-focus-within:text-primary-500"},[y("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"lucide:search",class:"w-4 h-4 iconify iconify--lucide"},[y("g",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2"},[y("circle",{cx:"11",cy:"11",r:"8"}),y("path",{d:"m21 21l-4.3-4.3"})])])],-1),id={class:"text-right"},od=["onClick"],ad=y("svg",{xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",viewBox:"0 0 32 32"},[y("path",{fill:"white",d:"M16 2C8.2 2 2 8.2 2 16s6.2 14 14 14s14-6.2 14-14S23.8 2 16 2m5.4 21L16 17.6L10.6 23L9 21.4l5.4-5.4L9 10.6L10.6 9l5.4 5.4L21.4 9l1.6 1.6l-5.4 5.4l5.4 5.4z"})],-1),ld=[ad],cd={class:"w-full bg-muted-100 dark:bg-muted-1000"},ud={class:"w-full max-w-7xl mx-auto"},dd={class:"w-full flex items-center overflow-hidden"},fd={class:"w-full h-full flex flex-col justify-between md:px-6 pb-16 pt-4"},hd={class:"w-full max-w-[90vw] mx-auto space-y-4 text-center"},pd={class:"flex flex-col gap-12 py-12"},md={class:"w-full flex items-center justify-center p-6 -m-3"},gd={class:"w-full max-w-[210px] pt-16"},vd=y("div",null,"Load More",-1),wd=[vd],_d={class:"fixed inset-0 z-30 flex items-center justify-center overflow-auto bg-black bg-opacity-50"},bd=y("h5",{class:"mr-3 max-w-none"},null,-1),yd=y("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor"},[y("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M6 18L18 6M6 6l12 12"})],-1),xd=[yd],kd={class:"body-font"},Cd={class:"container md:px-5 py-4 mx-auto"},Td={class:"text-2xl font-medium title-font text-center mb-6"},Id=y("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"line-md:downloading-loop",class:"w-6 h-6 iconify iconify--line-md"},[y("g",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-width":"2"},[y("path",{"stroke-dasharray":"2 4","stroke-dashoffset":"6",d:"M12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21"},[y("animate",{attributeName:"stroke-dashoffset",dur:"0.6s",repeatCount:"indefinite",values:"6;0"})]),y("path",{"stroke-dasharray":"30","stroke-dashoffset":"30",d:"M12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3"},[y("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.1s",dur:"0.3s",values:"30;0"})]),y("path",{"stroke-dasharray":"10","stroke-dashoffset":"10",d:"M12 8v7.5"},[y("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.5s",dur:"0.2s",values:"10;0"})]),y("path",{"stroke-dasharray":"6","stroke-dashoffset":"6",d:"M12 15.5l3.5 -3.5M12 15.5l-3.5 -3.5"},[y("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.7s",dur:"0.2s",values:"6;0"})])])],-1),Ed=y("div",null,[y("p",{class:"mb-4 text-base leading-relaxed"}," 注意，安装和更新操作不可逆，请确认后再操作。 ")],-1),Sd={class:"block md:flex flex-wrap sm:-m-4 -mx-4 md:-mb-10 md:-mt-4 md:space-y-0"},Ad={class:"md:p-4 md:w-1/2 flex"},Pd={class:"flex-grow"},Od=ge({__name:"ThemeMarket",props:{settings:{},app:{},tab:{}},async setup(t){let e,n;const r=t,i=dt(""),s=dt(!1),o=dt([]);let a=dt(24),c=dt(1);const f=dt(!1),b=dt(!0),g=new Ce(r.settings.token),v=new Ps(r.app,r.settings),u=([e,n]=Ho(()=>g.isUserLogin()),e=await e,n(),e),x=()=>{f.value=!0,L()},h=async()=>{const et=await g.getPkmerDocs();if(u)try{o.value=await g.getThemeList(),o.value=o.value.sort((Y,k)=>k.downloadCount-Y.downloadCount),Array.isArray(o.value)?o.value.forEach(Y=>{const k=et.find(l=>l.slug==Y.name.replace(/\s+/g,"-").toLowerCase());k&&(Y.contentUrl=`https://pkmer.cn/show/${k.uid}`);const B=r.app.customCss.themes;Y.isInstalled=B[Y.name]!==void 0,Y.isOutdated=Y.isInstalled&&B[Y.name].version!==Y.version}):o.value=[]}catch(Y){console.error("Error loading themes:",Y)}else o.value=await g.getTop20Themes(),Array.isArray(o.value)?o.value.forEach(Y=>{const k=et.find(l=>l.slug==Y.name.replace(/\s+/g,"-").toLowerCase());k&&(Y.contentUrl=`https://pkmer.cn/show/${k.uid}`);const B=r.app.customCss.themes;Y.isInstalled=B[Y.name]!==void 0,Y.isOutdated=Y.isInstalled&&B[Y.name].version!==Y.version}):o.value=[]},m=Ut(()=>{if(o.value)return o.value.filter(k=>k.isInstalled===!0).length}),w=Ut(()=>o.value?o.value.filter(k=>k.isOutdated===!0).length:!1),C=dt(""),A=dt("all"),I=dt(""),z=dt(""),K=dt(0),j=et=>{lt.debounce(()=>{C.value=et.target.value},800)()},V=()=>{s.value=!1},F=et=>{A.value=et},G=(et,Y,k)=>{s.value=!0,I.value=Y,z.value=k,et==="download"?b.value=!0:b.value=!1},st=async()=>{s.value=!1,new lt.Notice("正在更新主题，请稍后...",3e3),await v.updateThemeToExistThemeFolder(I.value,z.value)&&(o.value=o.value.map(Y=>(Y.name==I.value&&(Y.isOutdated=!1),Y)))},S=async()=>{s.value=!1,new lt.Notice("正在下载主题，请稍后...",3e3),await v.downloadThemeToThemeFolder(I.value,z.value)&&(o.value=o.value.map(Y=>(Y.name==I.value&&(Y.isInstalled=!0),Y)))},W=()=>{s.value=!1},d=()=>{const et=window.location.hash.slice(1);if(et){const Y=decodeURIComponent(et);A.value=Y}},q=dt();Ln(async()=>{if(d(),await h(),i.value="pkmerDownloadCount",rt.value="asc",app.workspace.on("resize",at),q.value=r.app.workspace.activeLeaf.view.leaf.width,u&&(K.value=await g.getDownloadCount()),r.tab){const et=JSON.parse(r.tab);et.type=="tupdated"&&_t(),et.type=="tupdated"&&tt()}});const at=()=>{q.value=r.app.workspace.activeLeaf.view.leaf.width};sn(()=>{window.removeEventListener("resize",at)});const H=Ut(()=>{const et=C.value.toLowerCase().trim();return et.length<1?o.value:o.value.filter(Y=>Y.name.toLowerCase().includes(et)||Y.author.toLowerCase().includes(et)||Y.chineseDescription?.toLowerCase().includes(et)||Y.tags?.toLowerCase().includes(et))}),ot=Ut(()=>Math.ceil(H.value?.length/a.value)),X=Ut(()=>c.value<ot.value),rt=dt("");function M(){i.value="pkmerDownloadCount",rt.value=rt.value==="asc"?"desc":"asc"}function L(){i.value="downloadCount",rt.value=rt.value==="asc"?"desc":"asc"}function ut(){i.value="updateTime",rt.value=rt.value==="asc"?"desc":"asc"}function it(){i.value="fileName",rt.value=rt.value==="asc"?"desc":"asc"}function tt(){i.value="installed",rt.value=rt.value==="asc"?"desc":"asc"}function _t(){i.value="updated",rt.value=rt.value==="asc"?"desc":"asc"}const kt=Ut(()=>{let et=[];return A.value=="all"?i.value==="downloadCount"?rt.value==="asc"?et=H.value.sort((Y,k)=>Y.downloadCount-k.downloadCount):et=H.value.sort((Y,k)=>k.downloadCount-Y.downloadCount):i.value==="updateTime"?rt.value==="asc"?et=H.value.sort((Y,k)=>new Date(Y.updatedTime).getTime()-new Date(k.updatedTime).getTime()):et=H.value.sort((Y,k)=>new Date(k.updatedTime).getTime()-new Date(Y.updatedTime).getTime()):i.value==="fileName"?rt.value==="asc"?et=H.value.sort((Y,k)=>Y.name.localeCompare(k.name)):et=H.value.sort((Y,k)=>k.name.localeCompare(Y.name)):i.value==="pkmerDownloadCount"?rt.value==="asc"?et=H.value.sort((Y,k)=>k.pkmerDownloadCount-Y.pkmerDownloadCount):et=H.value.sort((Y,k)=>Y.pkmerDownloadCount-k.pkmerDownloadCount):i.value==="installed"?et=H.value.filter(Y=>Y.isInstalled):i.value==="updated"?et=H.value.filter(Y=>Y.isOutdated):et=H.value?.slice(0,c.value*a.value):(et=H.value.filter(Y=>Y.tags?.toLowerCase().includes(A.value)||Y.modes?.toLowerCase().includes(A.value)),i.value==="downloadCount"?rt.value==="asc"?et=et.sort((Y,k)=>Y.downloadCount-k.downloadCount):et=et.sort((Y,k)=>k.downloadCount-Y.downloadCount):i.value==="updateTime"?rt.value==="asc"?et=et.sort((Y,k)=>new Date(Y.updatedTime).getTime()-new Date(k.updatedTime).getTime()):et=et.sort((Y,k)=>new Date(k.updatedTime).getTime()-new Date(Y.updatedTime).getTime()):i.value==="fileName"?rt.value==="asc"?et=et.sort((Y,k)=>Y.name.localeCompare(k.name)):et=et.sort((Y,k)=>k.name.localeCompare(Y.name)):i.value==="pkmerDownloadCount"&&(rt.value==="asc"?et=et.sort((Y,k)=>Y.pkmerDownloadCount-k.pkmerDownloadCount):et=et.sort((Y,k)=>k.pkmerDownloadCount-Y.pkmerDownloadCount))),et?.slice(0,c.value*a.value)}),vt=Ut(()=>Array.isArray(H.value)?H.value:[]),mt=()=>{const et=c.value*a.value,Y=et+a.value,k=kt.value?.slice(et,Y);c.value++,o.value=[...o.value,...k]};return(et,Y)=>(pt(),wt(Dt,null,[$t(ci,{settings:r.settings,isLogin:Mt(u),app:r.app},null,8,["settings","isLogin","app"]),y("main",$u,[y("div",Lu,[y("div",Uu,[y("div",Mu,[y("div",Ru,[y("div",Fu,[y("button",{class:Pt([{active:i.value=="downloadCount"},"flex items-center px-2 font-sans transition-colors duration-300 group whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按下载量",flow:"down",onClick:L},Nu,2)]),y("div",Hu,[y("button",{class:Pt([{active:i.value=="updateTime"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按更新时间",flow:"down",onClick:ut},Zu,2)]),y("div",Ku,[y("button",{class:Pt([{active:i.value=="fileName"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按文件名排序",flow:"down",onClick:it},qu,2)]),y("div",Ju,[y("button",{class:Pt(["active items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700",{active:i.value=="pkmerDownloadCount"}]),tooltip:"按主题热度",flow:"down",onClick:M},Gu,2)]),y("div",Xu,[y("button",{class:Pt([{active:i.value=="installed"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"筛选已安装主题",flow:"down",onClick:tt},[Qu,y("span",td,Tt(m.value),1)],2)]),y("div",ed,[y("div",nd,[y("input",{type:"text",class:"w-full h-8 pl-2 md:pl-16 pr-5 font-sans text-base leading-5 transition-all duration-300 text-muted-600 focus:border-muted-300 focus:shadow-lg focus:shadow-muted-300/50 dark:focus:shadow-muted-800/50 placeholder:text-muted-300 dark:placeholder:text-muted-500 dark:bg-muted-800 dark:text-muted-200 dark:border-muted-700 dark:focus:border-muted-600 tw-accessibility",placeholder:"Search themes...",onInput:j,value:C.value},null,40,sd),rd])])])])])]),y("div",id,[Et(y("button",{onClick:_t,class:"inline-block w-full font-sans text-xs px-3 m-1 rounded-lg bg-green-600 text-white shadow-xl shadow-primary-500/20"},[Ft(" 发现 "+Tt(w.value)+" 个主题更新！【点我查看】 ",1),y("button",{onClick:jn(x,["stop"]),class:"ml-2 px-3 shadow-none"},ld,8,od)],512),[[At,w.value]])]),y("section",cd,[y("div",ud,[y("div",dd,[y("div",fd,[y("div",hd,[$t(Du,{"active-category":A.value,themeList:vt.value,onUpdateActiveCategory:F},null,8,["active-category","themeList","onUpdateActiveCategory"])]),y("div",pd,[y("div",{class:Pt(["grid gap-6 -m-3 ptablet:grid-cols-2 ltablet:grid-cols-3 lg:grid-cols-3",{"!grid-cols-1":q.value<=768&&q.value>0,"!grid-cols-2":q.value>768&&q.value<1024,"!grid-cols-3":q.value>1024}])},[(pt(!0),wt(Dt,null,Un(kt.value,k=>(pt(),wt("div",{key:k.id},[$t(ai,{app:r.app,"theme-info":k,isLogin:Mt(u),onDownloadUpdateTheme:G},null,8,["app","theme-info","isLogin","onDownloadUpdateTheme"])]))),128))],2),y("div",md,[y("div",gd,[X.value?(pt(),wt("button",{key:0,onClick:mt,class:"w-full inline-flex items-center justify-center gap-2 font-sans font-semibold bg-white dark:bg-muted-700 text-muted-800 dark:text-white border border-muted-300 dark:border-muted-600 relative px-6 py-4 rounded-lg tw-accessibility hover:shadow-xl hover:shadow-muted-400/20 transition-all duration-300"},wd)):ue("",!0)])])])])])])])]),Et(y("div",_d,[y("div",{class:"max-w-3xl px-6 py-4 mx-auto text-left bg-white rounded shadow-lg dark:bg-muted-700",onClick:W,"x-transition:enter":"motion-safe:ease-out duration-300","x-transition:enter-start":"opacity-0 scale-90","x-transition:enter-end":"opacity-100 scale-100"},[y("div",{class:"flex items-center justify-between"},[bd,y("button",{type:"button",class:"z-50 cursor-pointer",onClick:W},xd)]),y("section",kd,[y("div",Cd,[y("h3",Td,[Id,Ft(" 即将安装...."+Tt(I.value.toUpperCase()),1)]),Ed,y("div",Sd,[y("div",Ad,[y("div",Pd,[b.value?(pt(),wt("h2",{key:0,onClick:S,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 确 认 ")):(pt(),wt("h2",{key:1,onClick:st,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 更 新 "))])]),y("div",{class:"md:p-4 md:w-1/2 flex"},[y("div",{class:"flex-grow"},[y("h2",{onClick:V,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 取 消 ")])])])])])])],512),[[At,s.value]])],64))}});const zd={class:"w-full"},Bd={class:"flex flex-wrap md:content-center"},Dd={class:"flex items-center justify-between md:px-8 mx-auto font-sans logo scale-90 md:scale-125 max-w-7xl"},$d={class:"flex flex-wrap items-center justify-center w-full mx-auto max-w-7xl"},Ld={class:"items-center w-auto gap-6 basis-0"},Ud={href:"https://pkmer.cn",class:"flex items-center gap-3 no-underline text-inherit"},Md={class:"transition-all duration-300 text-primary-600"},Rd=ca('<g><path d="M395.631 98.837C358.783 45.867 309.195 16.696 256 16.696S153.217 45.867 116.369 98.837c-35.565 51.124-55.151 118.797-55.151 190.554 0 113.54 87.379 205.913 194.783 205.913s194.783-92.373 194.783-205.913c-.001-71.756-19.588-139.43-55.153-190.554z" style="" fill="#ffc170" class=""></path><path d="M256 495.304c107.403 0 194.783-92.373 194.783-205.913 0-71.757-19.586-139.43-55.151-190.554C358.783 45.867 309.195 16.696 256 16.696" style="" fill="#e1a05a" data-original="#ffd6a0" class=""></path><path d="M0 128h55.652v33.391H0z" style="" fill="#a0bdd4" class=""></path><path d="M13.053 51.94h55.65v33.391h-55.65z" style="" transform="rotate(-160.527 40.878 68.636)" fill="#a0bdd4" class=""></path><path d="M456.348 128H512v33.391h-55.652z" style="" fill="#a0bdd4" class=""></path><path d="M454.411 40.807h33.391v55.65h-33.391z" style="" transform="rotate(-109.469 471.111 68.636)" fill="#a0bdd4" class=""></path><path d="m187.719 277.315 14.949-29.896-47.598-21.154-93.659 51.085c-.124 4-.194 8.013-.194 12.041 0 8.564.505 17.005 1.471 25.298l93.892-51.214 31.139 13.84zM450.63 278.997l-105.587-52.794-89.463 44.731-22.369-9.942-14.948 29.896 38.155 16.958 88.625-44.31 104.166 52.083a218.592 218.592 0 0 0 1.573-26.228c.001-3.476-.059-6.938-.152-10.394z" style="" fill="#f8f8f8" class=""></path><path d="m450.63 278.997-105.587-52.794-89.463 44.731.839 36.913 88.624-44.31 104.166 52.083a218.592 218.592 0 0 0 1.573-26.228 382.07 382.07 0 0 0-.152-10.395z" style="" fill="#fef5ea" class=""></path></g>',1),Fd=[Rd],jd=y("span",{class:"font-sans text-lg font-extrabold tracking-widest uppercase whitespace-nowrap feat dark:text-muted-100"},"Obsidian PKMer Market",-1),Nd={class:"pkmer-tab-container"},Hd={class:"mb-5 flex list-none flex-row flex-wrap border-b-0 pl-0"},Wd={class:"relative cursor-pointer my-2 block border-x-0 border-b-2 border-t-0 border-transparent px-7 pb-3.5 pt-4 font-bold uppercase leading-tight hover:isolate dark:hover:bg-slate-900/30 hover:bg-neutral-100 focus:isolate focus:border-transparent"},Zd={class:"relative cursor-pointer my-2 block border-x-0 border-b-2 border-t-0 border-transparent px-7 pb-3.5 pt-4 font-bold uppercase leading-tight hover:isolate dark:hover:bg-slate-900/30 hover:bg-neutral-100 focus:isolate focus:border-transparent"},Kd={class:"pkmer-tab-content"},Vd={key:0,class:"opacity-100 transition-opacity duration-150 ease-linear"},qd={key:1,class:"opacity-100 transition-opacity duration-150 ease-linear"},Jd=y("h1",null,"Loading...",-1),Yd=y("h2",null,"如果长时间加载，请确保网络通常，并关闭网络代理。",-1),Gd=ge({__name:"PluginMarketView",props:{settings:{},app:{}},setup(t){const e=t,n=dt("plugin"),r=dt(),i=dt({type:"",count:0}),s=o=>{n.value=o};return Ln(()=>{r.value=localStorage.getItem("pkmer-update-tab"),r.value!==null&&r.value!==""&&(i.value=JSON.parse(r.value),i.value.type=="tupdated"&&s("theme"))}),sn(()=>{localStorage.removeItem("pkmer-update-tab")}),(o,a)=>(pt(),wt(Dt,null,[y("div",zd,[y("div",Bd,[y("div",Dd,[y("div",$d,[y("div",Ld,[y("a",Ud,[y("div",Md,[(pt(),wt("svg",{class:Pt(["fill-current w-7 h-7","w-7 h-7"]),width:"1.75rem",xmlns:"http://www.w3.org/2000/svg",version:"1.1","xmlns:xlink":"http://www.w3.org/1999/xlink","xmlns:svgjs":"http://svgjs.com/svgjs",viewBox:"0 0 512 512","xml:space":"preserve"},Fd))]),jd])])])])])]),y("div",Nd,[y("ul",Hd,[y("li",{class:Pt(["flex-auto text-center",{active:n.value==="plugin"}]),onClick:a[0]||(a[0]=c=>s("plugin"))},[y("span",Wd,[Ft(" 插件市场 "),Et(y("span",{class:"num bradge"},Tt(i.value.count),513),[[At,i.value.type=="updated"&&i.value.count>0]])])],2),y("li",{class:Pt(["flex-auto text-center relative",{active:n.value==="theme"}]),onClick:a[1]||(a[1]=c=>s("theme"))},[y("span",Zd,[Ft(" 主题市场 "),Et(y("span",{class:"num bradge"},Tt(i.value.count),513),[[At,i.value.type=="tupdated"&&i.value.count>0]])])],2)]),y("div",Kd,[(pt(),Tn(xo,null,{default:Qn(()=>[n.value==="plugin"?(pt(),wt("div",Vd,[$t(Ou,{settings:e.settings,app:e.app,tab:r.value,"current-tab":n.value},null,8,["settings","app","tab","current-tab"])])):n.value==="theme"?(pt(),wt("div",qd,[$t(Od,{settings:e.settings,app:e.app,tab:r.value,"current-tab":n.value},null,8,["settings","app","tab","current-tab"])])):ue("",!0)]),fallback:Qn(()=>[Jd,Yd]),_:1}))])])],64))}});const as="pkmer-downloader";class Xd extends lt.ItemView{plugin;settings;constructor(e,n){super(e),this.plugin=n,this.settings=n.settings}getIcon(){return"bookmark"}getDisplayText(){return"Pkmer Market"}getViewType(){return as}async onOpen(){const{contentEl:e}=this;console.log("welcome Pkmer Market"),Wa(Gd,{settings:this.settings,app:this.app}).mount(e)}}class ur{modal;settingTab;constructor(e){this.settingTab=e;const{remote:n}=require("electron"),{BrowserWindow:r}=n;this.modal=new r({parent:n.getCurrentWindow(),width:630,height:840,show:!1}),this.modal.once("ready-to-show",()=>{this.modal.setTitle("登录Pkmer~"),this.modal.setMenu(null),this.modal.show()}),this.modal.webContents.on("will-navigate",()=>{this.modal.webContents.executeJavaScript("localStorage.getItem('pkmer-token')").then(i=>{i&&(this.settingTab.saveToken(i),this.settingTab.display(),this.modal.close(),this.settingTab.app.workspace.activeLeaf.rebuildView())})})}async doLogin(){try{await this.modal.loadURL("https://pkmer.cn/products/signIn/")}catch(e){console.log(e)}}async Loginout(){try{await this.modal.loadURL("https://pkmer.cn/products/UserProfile/"),this.modal.webContents.executeJavaScript("localStorage.removeItem('pkmer-token')").then(()=>{this.settingTab.saveToken(""),this.settingTab.display(),this.modal.close(),this.settingTab.app.workspace.activeLeaf.rebuildView()})}catch(e){console.log(e),new lt.Notice("你没登录咋退出？")}}onClose(){this.modal.close()}}class Qd extends lt.PluginSettingTab{plugin;constructor(e,n){super(e,n),this.plugin=n}display(){const{containerEl:e}=this;e.empty(),e.createEl("h1",{text:"Obsidian PKMer Market"}),e.setAttribute("data-type","pkmer-downloader"),lt.Platform.isDesktopApp&&(this.plugin.settings.token?this.showLoginOut():this.showLogin()),new lt.Setting(e).setName("Token").setDesc("Default token for pkmer downloader").addText(r=>r.setPlaceholder("输入token").setValue(this.plugin.settings.token).setDisabled(!1).onChange(async i=>{this.plugin.settings.token=i,await this.plugin.saveSettings()})),lt.Platform.isDesktopApp&&new lt.Setting(e).setName("Tips").setDesc("如果登录后，仍然提示登录，请退出重新登录PKMER "),lt.Platform.isMobileApp&&new lt.Setting(e).setName("Tips").setDesc("移动端需要您手动在电脑端登录获取token后复制到输入框中 "),new lt.Setting(e).setName("🥚打开PKMer Market").setDesc("点击开始挑选心爱的插件和主题吧").addButton(r=>{r.setIcon("download").setButtonText("进入").setClass("px-5").setCta().onClick(()=>{app.setting.close(),setTimeout(()=>{this.plugin.openView("")},100)})}),e.createEl("hr",{cls:"mt-2"});const n=e.createEl("div",{cls:"mt-4"});n.createEl("a",{text:"🥚PKMer.cn",href:"https://pkmer.cn"}),n.createEl("span",{text:" | "}),n.createEl("a",{text:"👤个人中心",href:"https://pkmer.cn/products/UserProfile/"})}showLogin(){new lt.Setting(this.containerEl).setName("登录Pkmer").addButton(e=>e.setButtonText("登录").setCta().onClick(async()=>{e.setDisabled(!0),await new ur(this).doLogin(),this.display()}))}showLoginOut(){new lt.Setting(this.containerEl).setName("退出登录").addButton(e=>e.setButtonText("退出").setCta().onClick(async()=>{e.setDisabled(!0),await new ur(this).Loginout(),this.display()}))}saveToken(e){this.plugin.settings.token=e,this.plugin.saveSettings()}}let tf=class{constructor(e,n){this.app=e,this.settings=n,this.api=new Ce(this.settings.token),this.isUserLogin=!1}api;isUserLogin;async getPluginStatus(){try{if(this.isUserLogin=await this.api.isUserLogin(),!this.isUserLogin)return{installedCount:0,updatedCount:0};const e=Object.keys(this.app.plugins.manifests),n=e.length;if(n===0)return{installedCount:0,updatedCount:0};const{plugins:r}=await this.api.getInstalledPluginsPaginated(e,1,n,"downloadCount","DESC"),i=r.filter(s=>{const o=this.app.plugins.manifests[s.id];return o&&o.version!==s.version}).length;return{installedCount:n,updatedCount:i}}catch(e){return console.error("Error getting plugin status:",e),{installedCount:0,updatedCount:0}}}};class ef{constructor(e,n){this.app=e,this.settings=n,this.api=new Ce(this.settings.token),this.isUserLogin=!1,this.allThemeList=[],this.isLoaded=!1}api;isUserLogin;allThemeList;isLoaded;async loadAllThemes(){if(!this.isLoaded)try{if(this.isUserLogin=await this.api.isUserLogin(),this.isUserLogin){const e=await this.api.getThemeList();this.allThemeList=Array.isArray(e)?e:[],await this.updateThemeStatus(),this.isLoaded=!0}}catch(e){console.error("Error loading themes:",e)}}async updateThemeStatus(){const e=this.app.customCss.themes;this.allThemeList.forEach(n=>{n.isInstalled=e[n.name]!==void 0,n.isOutdated=n.isInstalled&&e[n.name].version!==n.version})}async getThemeStatus(){await this.loadAllThemes();const e=this.allThemeList.filter(r=>r.isInstalled).length,n=this.allThemeList.filter(r=>r.isOutdated).length;return{tinstalledCount:e,tupdatedCount:n}}}const nf={token:""};class sf extends lt.Plugin{settings;statusBarIconEl;async onload(){await this.loadSettings(),localStorage.removeItem("pkmer-update-tab"),this.registerCustomURI(),this.registerCustomCommands(),this.registerCustomRibbon(),this.addStatusBarIcon(),await this.reloadStatusBarHandler(),this.addSettingTab(new Qd(this.app,this)),this.registerView(as,e=>new Xd(e,this)),addEventListener("reload-statusbar",async()=>{this.reloadStatusBarHandler()})}reloadStatusBarHandler=async()=>{await this.updateStatusBar("")};onunload(){removeEventListener("reload-statusbar",this.reloadStatusBarHandler)}async loadSettings(){this.settings=Object.assign({},nf,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}registerCustomURI(){this.registerObsidianProtocolHandler("pkmer-installer",async e=>{const n=e.pluginID,r=e.themeID,i=e.version;if(!this.settings.token){new lt.Notice("请先登录获取token",5e3),app.setting.open(),app.setting.openTabById("PKMer");return}if(n)try{new lt.Notice("正在下载插件，请稍后...",3e3),await new As(app,this.settings).downloadPluginToPluginFolder(n,i)}catch{new lt.Notice("下载失败，请检查网络")}if(r)try{new lt.Notice("正在安装主题，请稍后...",3e3),await new Ps(app,this.settings).downloadThemeToThemeFolder(r,i)}catch{new lt.Notice("下载失败，请检查网络")}})}registerCustomCommands(){this.addCommand({id:"open-pkmer-market-view",name:"Open Pkmer Market View",callback:()=>{this.openView("")}})}registerCustomRibbon(){this.addRibbonIcon("download","Open Pkmer Market",()=>{this.openView("")})}addStatusBarIcon(){this.statusBarIconEl=this.addStatusBarItem(),this.statusBarIconEl.addClass("pkmer-statusbar"),this.statusBarIconEl.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-rocket"><path d="M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z"/><path d="m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z"/><path d="M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0"/><path d="M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5"/></svg>',this.statusBarIconEl.setAttribute("aria-label","PKMer插件市场"),this.registerDomEvent(this.statusBarIconEl,"click",()=>{this.updateStatusBar("statusbar")})}async updateStatusBar(e){const n=new tf(app,this.settings),r=new ef(app,this.settings),{installedCount:i,updatedCount:s}=await n.getPluginStatus(),{tinstalledCount:o,tupdatedCount:a}=await r.getThemeStatus();if(s>0||a>0){if(this.statusBarIconEl.setAttribute("aria-label-position","top"),this.statusBarIconEl.setAttribute("aria-label","Updated Info: Plugins: "+s+"/"+i+", Themes: "+a+"/"+o),this.statusBarIconEl.innerHTML=`<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-rocket"><path d="M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z"/><path d="m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z"/><path d="M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0"/><path d="M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5"/></svg>
            <svg xmlns="http://www.w3.org/2000/svg"  style="margin-top: -12px;margin-left: -3px;"  width="1em" height="1em" viewBox="0 0 15 15"><path fill="orange" d="M9.875 7.5a2.375 2.375 0 1 1-4.75 0a2.375 2.375 0 0 1 4.75 0"/></svg> `,e==="statusbar")if(s>0){const c={type:"updated",count:s};this.openView(JSON.stringify(c))}else{const c={type:"tupdated",count:a};this.openView(JSON.stringify(c))}}else this.statusBarIconEl.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-rocket"><path d="M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z"/><path d="m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z"/><path d="M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0"/><path d="M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5"/></svg>',this.statusBarIconEl.setAttribute("aria-label","Updated Info: Plugins: "+s+"/"+i+", Themes: "+a+"/"+o),e==="statusbar"&&this.openView("")}openView(e){let n=!1;app.workspace.iterateAllLeaves(r=>{try{if(r.getViewState().type==="pkmer-downloader"){n=!0,localStorage.setItem("pkmer-update-tab",e),setTimeout(()=>{this.app.workspace.setActiveLeaf(r),this.app.workspace.activeLeaf.rebuildView()},300);return}}catch(i){console.error("Error occurred while processing leaf:",i)}}),n||(localStorage.setItem("pkmer-update-tab",e),setTimeout(()=>{this.app.workspace?.getLeaf()?.setViewState({active:!0,type:as})},300))}}module.exports=sf;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
